//>>built

require({cache:{"ier/widget/dialog/BaseAccordionWizardDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-class", "dojo/aspect", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/BaseAccordionWizardDialogContent.html", "dijit/layout/AccordionContainer"], function (dojo_declare, dojo_lang, dojo_style, dojo_class, dojo_aspect, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.BaseAccordionWizardDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, finishButtonLabel:ier_messages.baseDialog_finishButton, postCreate:function () {
            this.inherited(arguments);
            var defaultButton = this.addButton(this.finishButtonLabel, "_finishButtonClicked", true, false);
            this.addButton(ier_messages.baseDialog_nextButton, "_nextButtonClicked", false, false);
            this.addButton(ier_messages.baseDialog_previousButton, "_previousButtonClicked", true, false);
            this.setDefaultButton(defaultButton);
            dojo_aspect.after(this.baseAccordionContainer, "selectChild", dojo_lang.hitch(this, function (page, animation) {
                this.updateButtonsState(page);
                this.onPaneSelected(page);
            }), true);
        }, startup:function () {
            this.inherited(arguments);
            var children = this.getChildPanes();
            if (children) {
                for (var i in children) {
                    var pane = children[i];
                    if (!this.hasNext(pane)) {
                        var index = this.getPaneIndex(pane);
                        var nextIndex = index + 1;
                        if (nextIndex <= children.length - 1) {
                            nextPane = this.getChildPane(nextIndex);
                            if (nextPane) {
                                this.disablePane(nextPane);
                            }
                        }
                    }
                }
            }
            this.updateButtonsState();
            this.baseAccordionContainer.startup();
        }, addChildPane:function (pane) {
            this.inherited(arguments);
            this.baseAccordionContainer.addChild(pane);
        }, selectPane:function (pane) {
            if (pane) {
                this.enablePane(pane);
                this.baseAccordionContainer.selectChild(pane);
            }
        }, selectNextPane:function () {
            this.baseAccordionContainer.forward();
            var pane = this.getCurrentPane();
            if (pane) {
                this.enablePane(pane);
            }
        }, selectPreviousPane:function () {
            this.baseAccordionContainer.back();
            var pane = this.getCurrentPane();
            if (pane) {
                this.enablePane(pane);
            }
        }, getCurrentPane:function () {
            return this.baseAccordionContainer.selectedChildWidget;
        }, onNextButtonClicked:function (pane) {
        }, onPreviousButtonClicked:function (pane) {
        }, onFinishButtonClicked:function () {
        }, onPaneSelected:function (pane) {
        }, hasPrevious:function (pane) {
            var currentPane = pane ? pane : this.getCurrentPane();
            if (currentPane) {
                var index = this.getPaneIndex(currentPane);
                if (index != 0 || index != -1) {
                    var previousPane = this.getPreviousPane(pane);
                    if (previousPane && !previousPane.disabled) {
                        return true;
                    }
                }
            }
            return false;
        }, hasNext:function (pane) {
            var currentPane = pane ? pane : this.getCurrentPane();
            if (currentPane) {
                var index = this.getPaneIndex(currentPane);
                if (index != -1 || index > this.getChildPanes().length) {
                    var nextPane = this.getNextPane(pane);
                    if (nextPane && !nextPane.disabled) {
                        return true;
                    }
                }
            }
            return false;
        }, getNextPane:function (pane) {
            var currentPane = pane ? pane : this.getCurrentPane();
            if (currentPane) {
                var index = this.getPaneIndex(currentPane);
                var nextIndex = index + 1;
                if (nextIndex <= this.getChildPanes().length - 1) {
                    nextPane = this.getChildPane(nextIndex);
                    return nextPane;
                }
            }
            return null;
        }, getPreviousPane:function (pane) {
            var currentPane = pane ? pane : this.getCurrentPane();
            if (currentPane) {
                var index = this.getPaneIndex(currentPane);
                var previousIndex = index - 1;
                if (previousIndex >= 0) {
                    previousPane = this.getChildPane(previousIndex);
                    return previousPane;
                }
            }
            return null;
        }, getPaneIndex:function (child) {
            return this.baseAccordionContainer.getIndexOfChild(child);
        }, getChildPane:function (index) {
            var children = this.getChildPanes();
            return children[index];
        }, getChildPanes:function () {
            return this.baseAccordionContainer.getChildren();
        }, _nextButtonClicked:function () {
            this.selectNextPane();
            this.onNextButtonClicked(this.getCurrentPane());
        }, _previousButtonClicked:function () {
            this.selectPreviousPane();
            this.onPreviousButtonClicked(this.getCurrentPane());
        }, _finishButtonClicked:function () {
            if (this.isDefaultButtonEnabled) {
                this.onFinishButtonClicked();
            }
        }, enablePane:function (pane) {
            if (pane.disabled && pane._buttonWidget) {
                dojo_class.remove(pane.domNode, "dijitDisabled");
                dojo_class.remove(pane._buttonWidget.domNode, "dijitDisabled");
                if (pane._buttonWidget._onTitleClick && pane._buttonWidget.previousOnTitleClick) {
                    pane._buttonWidget._onTitleClick = pane._buttonWidget.previousOnTitleClick;
                }
                if (pane._buttonWidget._onKeyPress && pane._buttonWidget.previousOnKeyPress) {
                    pane._buttonWidget._onKeyPress = pane._buttonWidget.previousOnKeyPress;
                }
                pane.disabled = false;
                pane.set("disabled", false);
            }
        }, disablePane:function (pane) {
            pane.disabled = true;
            if (pane._buttonWidget) {
                dojo_class.add(pane.domNode, "dijitDisabled");
                dojo_class.add(pane._buttonWidget.domNode, "dijitDisabled");
                if (pane._buttonWidget._onTitleClick) {
                    if (!pane._buttonWidget.previousOnTitleClick) {
                        pane._buttonWidget.previousOnTitleClick = pane._buttonWidget._onTitleClick;
                    }
                    pane._buttonWidget._onTitleClick = function () {
                    };
                }
                if (pane._buttonWidget._onKeyPress) {
                    if (!pane._buttonWidget.previousOnKeyPress) {
                        pane._buttonWidget.previousOnKeyPress = pane._buttonWidget._onKeyPress;
                    }
                    pane._buttonWidget._onKeyPress = function () {
                    };
                }
            }
        }, updateButtonsState:function (pane) {
            this.setButtonEnabled(this.childButtons[2], this.hasPrevious(pane));
            this.setButtonEnabled(this.childButtons[1], this.hasNext(pane));
            this.setButtonEnabled(this.childButtons[0], this.validateInput());
        }});
    });
}, "url:ier/widget/templates/CommonConditionsForm.html":"<div class=\"ierCommonConditionForm\">\r\n\t<div>\r\n\t\t <div data-dojo-attach-point=\"_propertyContainer\">\r\n\t\t </div>\r\n\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_addPropertyButton\">${_messages.commonConditionForm_addProperty}</button>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"_contentContainer\" class=\"ierSectionContainer\">\r\n\t\t<div class=\"dijitInline ierLabelContainer\">\r\n\t\t\t<label for=\"${id}_contentBox\">${_messages.commonConditionForm_contentContain}</label>\r\n\t\t</div>\r\n\t\t<div class=\"dijitInline ierLabelContainer\">\r\n\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"_contentBox\" id=\"${id}_contentBox\" style=\"width:200px\"/>\r\n\t\t</div>\r\n<!--\r\n\t\t<div class=\"dijitInline ierLabelContainer\">\r\n\t\t\t<label for=\"${id}_contentSelect\">${_messages.commonConditionForm_contentIn}</label>\r\n\t\t</div>\r\n\t\t<select data-dojo-type=\"dijit.form.Select\" data-dojo-attach-point=\"_contentSelect\" id=\"${id}_contentSelect\">\r\n\t\t\t<option value=\"${_contentTypes.0}\">${_messages.commonConditionForm_content}</option>\r\n\t\t\t<option value=\"${_contentTypes.1}\">${_messages.commonConditionForm_metadata}</option>\r\n\t\t</select>\r\n-->\r\n\t</div>\r\n\t<div class=\"ierSectionContainer\">\r\n\t\t<fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t\t<legend style=\"display: none\">${_messages.commonConditionForm_match_all_any_label}</legend>\r\n\t\t\t<div class=\"dijitInline ierLabelContainer\">\r\n\t\t\t\t<input data-dojo-type=\"dijit.form.RadioButton\" id=\"${id}_matchAll\" name=\"${id}_match\" data-dojo-attach-point=\"matchAllButton\" data-dojo-props=\"checked:'true'\"/>\r\n\t\t\t\t<label for=\"${id}_matchAll\">${_messages.commonConditionForm_matchAll}</label>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"dijitInline\">\r\n\t\t\t\t<input data-dojo-type=\"dijit.form.RadioButton\" id=\"${id}_matchAny\" name=\"${id}_match\" data-dojo-attach-point=\"matchAnyButton\"/>\r\n\t\t\t\t<label for=\"${id}_matchAny\">${_messages.commonConditionForm_matchAny}</label>\r\n\t\t\t</div>\r\n\t\t</fieldset>\r\n\t</div>\r\n</div>\r\n", "ier/widget/tasks/TaskInformationPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-style", "dojo/dom-geometry", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ier/constants", "ier/messages", "ier/widget/tasks/TaskDetailsPane", "ier/widget/tasks/TaskParametersPane", "ier/widget/tasks/TaskResultsPane", "ier/widget/tasks/TaskErrorPane", "ier/widget/tasks/TaskExecutionRecordPane", "dojo/text!./templates/TaskInformationPane.html", "idx/layout/HeaderPane", "dijit/layout/TabContainer"], function (dojo_declare, dojo_lang, dojo_connect, dojo_style, dojo_geo, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ier_constants, ier_messages, TaskDetailsPane, TaskParametersPane, TaskResultsPane, TaskErrorPane, TaskEexecutionRecordPane, templateString) {
        return dojo_declare("ier.widget.tasks.TaskInformationPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, ier_messages:ier_messages, item:null, taskHandlerClass:null, postCreate:function () {
            this.inherited(arguments);
            this.taskPreviewTabContainer.startup();
            this.setUpTabs();
            if (this.item) {
                this.setItem(this.item);
            }
            this.connect(ecm.model.desktop, "onChange", function (item) {
                if (item && item[0] && item[0] instanceof ecm.model.AsyncTask) {
                    if (item[0] == this.item) {
                        this.item = null;
                        this.setItem(item[0], null, null, true);
                    }
                }
            });
            this.resultsPaneHandler = this.connect(this.taskPreviewTabContainer, "selectChild", dojo_lang.hitch(this, function (evt) {
                var selectedTab = this.taskPreviewTabContainer.selectedChildWidget;
                if (selectedTab == this.taskInstancesTab) {
                    this.taskInstancesTab.createRendering(this.item);
                }
            }));
        }, setUpTabs:function () {
            this.detailsTab = new TaskDetailsPane({UUID:"details", title:ier_messages.taskPane_previewDetails, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.detailsTab);
            this.parametersTab = new TaskParametersPane({UUID:"parameters", title:ier_messages.taskPane_previewParameters, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.parametersTab);
            this.resultsTab = new TaskResultsPane({UUID:"results", title:ier_messages.taskPane_previewResults, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.resultsTab);
            this.errorsTab = new TaskErrorPane({UUID:"errors", title:ier_messages.taskPane_previewErrors, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.errorsTab);
            this.taskInstancesTab = new TaskEexecutionRecordPane({UUID:"asyncTaskInstances", title:ier_messages.taskPane_previewExecutionRecords, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.taskInstancesTab);
        }, setItem:function (item, onComplete, tabIdToOpen, ignoreTabOpen) {
            if (item == null) {
                dojo_style.set(this.noItemSelected, "display", "");
                dojo_style.set(this.taskPreviewTabContainer.domNode, "display", "none");
            } else {
                dojo_style.set(this.noItemSelected, "display", "none");
                dojo_style.set(this.taskPreviewTabContainer.domNode, "display", "");
                if (item && this.item != item) {
                    this.item = item;
                    this.getDetails(this.item, dojo_lang.hitch(this, function (item) {
                        if (this.detailsTab) {
                            this.detailsTab.createRendering(this.item);
                        }
                        if (this.parametersTab) {
                            this.parametersTab.createRendering(this.item);
                        }
                        if (this.resultsTab) {
                            if (this.item.results) {
                                dojo_style.set(this.resultsTab.controlButton.domNode, "display", "");
                                this.resultsTab.createRendering(item);
                            } else {
                                dojo_style.set(this.resultsTab.controlButton.domNode, "display", "none");
                            }
                        }
                        if (this.errorsTab) {
                            if (this.item.errors && this.item.errors.length > 0) {
                                dojo_style.set(this.errorsTab.controlButton.domNode, "display", "");
                                this.errorsTab.createRendering(item);
                            } else {
                                dojo_style.set(this.errorsTab.controlButton.domNode, "display", "none");
                            }
                        }
                        if (this.taskInstancesTab) {
                            if (this.item.isTaskRecurring && this.item.isTaskRecurring()) {
                                dojo_style.set(this.taskInstancesTab.controlButton.domNode, "display", "");
                            } else {
                                dojo_style.set(this.taskInstancesTab.controlButton.domNode, "display", "none");
                            }
                        }
                        if (!ignoreTabOpen) {
                            if (tabIdToOpen) {
                                var tab = this.getTab(tabIdToOpen);
                                if (tab && this.taskPreviewTabContainer.selectedChildWidget != tab) {
                                    this.taskPreviewTabContainer.selectChild(tab);
                                } else {
                                    this.taskPreviewTabContainer.selectChild(this.detailsTab);
                                }
                            } else {
                                this.taskPreviewTabContainer.selectChild(this.detailsTab);
                            }
                        }
                        this.taskPreviewTabContainer.resize();
                        if (onComplete) {
                            onComplete(this.item);
                        }
                    }));
                }
            }
        }, tabHasChild:function (child) {
            var children = this.taskPreviewTabContainer.getChildren();
            for (var i in children) {
                if (children[i] == child) {
                    return true;
                }
            }
            return false;
        }, getTab:function (uuid) {
            var children = this.taskPreviewTabContainer.getChildren();
            for (var i in children) {
                if (children[i].UUID == uuid) {
                    return children[i];
                }
            }
            return null;
        }, addTab:function (contentPane) {
            this.taskPreviewTabContainer.addChild(contentPane);
        }, getDetails:function (item, onComplete) {
            if (item instanceof ecm_model_AsyncTask) {
                if (!item.detailsLoaded) {
                    this.item.getDetails(dojo_lang.hitch(this, function () {
                        this.item.onChange([this.item]);
                        if (onComplete) {
                            onComplete(this.item);
                        }
                    }));
                } else {
                    if (onComplete) {
                        onComplete(this.item);
                    }
                }
            } else {
                if (onComplete) {
                    onComplete(this.item);
                }
            }
        }});
    });
}, "url:ier/widget/templates/ObjectSelector.html":"<div class=\"ierObjectSelector noFocus dijitInline\" data-dojo-attach-point=\"containerNode\"  \r\n\tdata-dojo-attach-event=\"onFocus: _onFocusContainer\">\r\n\t<div class=\"dijitInline\" data-dojo-attach-point=\"_selectedObjectsContainer\" tabindex=\"0\" aria-label=\"${label}\">\r\n\t\t<input id=\"${labelId}\" type=\"text\" style=\"display:none\">\r\n\t\t<input tabIndex=\"-1\" type=\"hidden\" class=\"dijitOffScreen\" data-dojo-attach-point=\"valueNode\"/>\r\n\t\t\r\n\t\t<button class=\"selectButton\" type=\"button\"\r\n\t\t\tdata-dojo-attach-point=\"_selectButton,focusNode\" \r\n\t\t\taria-labelledby=\"${labelId}\" aria-label=\"${label}\"\r\n\t\t\tdata-dojo-type=\"ecm.widget.Button\"\r\n\t\t\tdata-dojo-attach-event=\"onClick: _onSelectObject\">${selectButtonLabel}</button>\r\n\t</div>\r\n</div>", "ier/model/actions/DeclareAction":function () {
    define("ier/model/actions/DeclareAction", ["dojo/_base/declare", "ecm/model/Action"], function (dojo_declare, ecm_model_action) {
        return dojo_declare("ier.model.actions.DeclareAction", [ecm_model_action], {canPerformAction:function (repository, itemList, listType, teamspace, resultSet) {
            var canPerform = this.inherited(arguments);
            if (canPerform) {
                if (itemList) {
                    if (itemList.length && itemList.length > 1) {
                        canPerform = false;
                    }
                    var item = itemList[0];
                    if (item && item.isFolder && item.isFolder()) {
                        canPerform = false;
                    }
                }
            }
            return canPerform;
        }});
    });
}, "ier/widget/dialog/ActionDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/PropertyDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.ActionDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, postCreate:function () {
            this.inherited(arguments);
            this.set("title", ier_messages.addActionDialog_title);
            this.setIntroText(ier_messages.addActionDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl());
            this.setResizable(true);
            this.addChildPane(this._propertiesPane);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, true);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this.connect(this._propertiesPane, "onCompleteRendering", function () {
                this._propertiesPane.resizeCommonProperties();
                this.resize();
            });
        }, show:function (repository, item) {
            this.inherited("show", []);
            this.item = item;
            if (!item) {
                this.set("title", this._ierMessages.addActionDialog_editTitle);
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this._applyButton.domNode.style.display = "none";
            }
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            this._propertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_DispositionAction, defaultNameProperty:ier_constants.Property_ActionName, entityType:ier_constants.EntityType_DispositionAction, hideContentClassSelector:true, item:this.item, isReadOnly:true});
        }, validateInput:function () {
            return false;
        }, _save:function (close) {
            var properties = this._propertiesPane.getProperties();
            this.repository.addAction(properties, dojo_lang.hitch(this, function () {
                if (close) {
                    this.hide();
                }
            }));
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "url:ier/widget/tasks/templates/TaskPane.html":"<div class=\"taskPane\" style=\"width: 100%; height: 100%;\" dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"container\" style=\"padding-top: 10px;\">\r\n\t</div>\r\n</div>", "ier/widget/MultipleFoldersSelector":function () {
    require({cache:{"url:ier/widget/templates/MultipleFoldersSelector.html":"<div data-dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"_selectedFoldersSection\" class=\"dijitInline\"></div>\r\n\t<button data-dojo-attach-point=\"button\" data-dojo-type=\"dijit/form/Button\" type=\"button\">${messages.baseDialog_select}</button>\r\n</div>"}});
    define("ier/widget/MultipleFoldersSelector", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/_base/array", "dojo/aspect", "dojo/dom-class", "dojo/dom-style", "dojo/string", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/ContentPane", "dijit/popup", "dijit/focus", "ecm/model/SelectedFolder", "ecm/widget/DropDownDialog", "ecm/widget/CompositeButton", "ier/widget/MultipleFoldersDropDown", "ier/messages", "ier/util/util", "dojo/text!./templates/MultipleFoldersSelector.html", "dijit/form/Button"], function (dojo_declare, dojo_lang, connect, array, dojo_aspect, domClass, domStyle, dojo_string, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_layout_ContentPane, dijit_popup, dijit_focus, SelectedFolder, DropDownDialog, CompositeButton, MultipleFoldersDropDown, ier_messages, ier_util, template) {
        return dojo_declare("ier.widget.MultipleFoldersSelector", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {templateString:template, widgetsInTemplate:true, repository:null, _selectedItems:null, messages:ier_messages, disabled:false, constructor:function () {
            this._selectedItems = {};
        }, postCreate:function () {
            this.button.set("disabled", this.disabled);
            this.connect(this.button, "onClick", function () {
                dijit_popup.open({parent:this, popup:this.multiFoldersSelectorDialog, around:this.button.domNode, onCancel:dojo_lang.hitch(this, function () {
                    dijit_popup.close(this.multiFoldersSelectorDialog);
                    this.button.focus();
                })});
            });
            this.connect(ecm.model.desktop, "onDisplayStatusDialog", dojo_lang.hitch(this, function () {
                this._pagingInProgress = true;
            }));
            this.connect(ecm.model.desktop, "onHideStatusDialog", dojo_lang.hitch(this, function () {
                this._pagingInProgress = false;
            }));
        }, createRendering:function (repository) {
            this.repository = repository;
            this.multiFoldersSelectorDropDown = new MultipleFoldersDropDown({repository:this.repository});
            this.multiFoldersSelectorDialog = new DropDownDialog({style:"height: 100%;", onMouseLeave:dojo_lang.hitch(this, function (evt) {
                if (!this._pagingInProgress) {
                    this.multiFoldersSelectorDialog.onCancel();
                }
            }), onOpen:dojo_lang.hitch(this, function (evt) {
                this.multiFoldersSelectorDropDown.resize();
                this.multiFoldersSelectorDropDown.focus();
            }), onClickCancel:dojo_lang.hitch(this, function (evt) {
                this.multiFoldersSelectorDialog.onCancel();
            }), onClickApply:dojo_lang.hitch(this, function (evt) {
                this.multiFoldersSelectorDialog.onCancel();
            }), onClickOK:dojo_lang.hitch(this, function (evt) {
                this.multiFoldersSelectorDialog.onCancel();
            })});
            this.multiFoldersSelectorDialog.set("content", this.multiFoldersSelectorDropDown);
            this.connect(this.multiFoldersSelectorDropDown, "onFolderSelected", function (item) {
                this.addSelectedFolder(item);
            });
        }, addSelectedFolder:function (item) {
            if (item && item.isSelectable != false && this._selectedItems[item.id] == null) {
                item.isSelectable = false;
                this._triggerTreeItemOnChange(item);
                var folderButton = null;
                var selectedFolder = new SelectedFolder(item, false, this.repository, true);
                folderButton = new CompositeButton({item:item, iconClass:ier_util.getIconClass(item), iconAltText:item.name, label:item.name, tooltip:selectedFolder.path, actionIconClass:"removeIcon", actionAltText:dojo_string.substitute(ier_messages.objectSelector_remove, [item.name]), onActionButtonClick:dojo_lang.hitch(this, function () {
                    this.removeSelectedFolder(folderButton.item);
                    folderButton.destroy();
                }), onTitleClick:dojo_lang.hitch(this, function () {
                    ecm.model.desktop.getActionsHandler()["actionIERProperties"](this.repository, [item]);
                }), style:"margin-right:3px; margin-bottom: 3px;", "class":"ierObjectSelector noFocus dijitInline"});
                this._selectedFoldersSection.appendChild(folderButton.domNode);
                this.multiFoldersSelectorDropDown.addUnselectableFolder(item);
                this._selectedItems[item.id] = item;
                this.onFolderAdded(item);
                this.onChange(item);
                this.multiFoldersSelectorDialog.onCancel();
            }
        }, removeSelectedFolder:function (item) {
            if (item && this._selectedItems[item.id] != null) {
                this.multiFoldersSelectorDropDown.removeUnselectableFolder(item);
                item.isSelectable = true;
                this._selectedItems[item.id] = null;
                delete this._selectedItems[item.id];
                this.onFolderRemoved(item);
                this.onChange(item);
                this._triggerTreeItemOnChange(item);
            }
        }, _triggerTreeItemOnChange:function (item) {
        }, destroy:function () {
            if (this.multiFoldersSelectorDialog) {
                this.multiFoldersSelectorDialog.destroy();
            }
            if (this.multiFoldersSelectorDropDown) {
                this.multiFoldersSelectorDropDown.destroy();
            }
            this.inherited(arguments);
        }, _getDisabledAttr:function () {
            return this.disabled;
        }, _setDisabledAttr:function (disabled) {
            this.button.set("disabled", disabled);
        }, onFolderAdded:function (item) {
        }, onFolderRemoved:function (item) {
        }, onChange:function (item) {
        }, getSelectedItems:function () {
            return this._selectedItems;
        }, _setValueAttr:function (value) {
            var ids = value.split(",");
            for (var i in ids) {
                var id = ids[i];
                this.repository.retrieveItem(id, dojo_lang.hitch(this, function (itemRetrieved) {
                    this.addSelectedFolder(itemRetrieved);
                }));
            }
        }, getSelectedNames:function () {
            var items = [];
            for (var i in this._selectedItems) {
                var item = this._selectedItems[i];
                items.push(item.name);
            }
            return ier_util.arrayToString(items);
        }, _getValueAttr:function () {
            var items = [];
            for (var i in this._selectedItems) {
                var item = this._selectedItems[i];
                items.push(ier_util.getGuidId(item.id));
            }
            return ier_util.arrayToString(items);
        }});
    });
}, "ier/model/RecentQuickSearch":function () {
    define("ier/model/RecentQuickSearch", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/_ModelObject"], function (dojo_declare, dojo_lang, ecm_model_ModelObject) {
        return dojo_declare("ier.model.RecentQuickSearch", [ecm_model_ModelObject], {data:null, searchQueryString:null, repository:null, constructor:function (arguments) {
            this.itemsClicked = [];
        }, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, addClickedItem:function (docId, onComplete) {
            var item = this.getItemClicked(docId);
            if (!item) {
                this.repository.retrieveItem(docId, dojo_lang.hitch(this, function (item) {
                    item.idPrefix = this.searchQueryString;
                    this.itemsClicked.push(item);
                    if (onComplete) {
                        onComplete(item);
                    }
                }));
            } else {
                if (onComplete) {
                    onComplete(item);
                }
            }
        }, getItemClicked:function (id) {
            for (var i in this.itemsClicked) {
                var item = this.itemsClicked[i];
                if (item.id == id) {
                    return item;
                }
            }
        }, getItemsClicked:function () {
            return this.itemsClicked;
        }, hasChildren:function () {
            return (this.itemsClicked.length > 0);
        }});
    });
}, "url:ier/widget/panes/templates/LegacyDispositionSchedulePane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\" data-dojo-attach-point=\"containerNode\">\t\r\n\t<div data-dojo-attach-point=\"_legacyScheduleSection\">\t\r\n\t\t<table class=\"propertyTable smallerIdentedPropertyTable\" style=\"margin-top:8px;\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_dispositionInstructionsLabel\" for=\"${id}_dispositionTextBox\">${messages.entityItemDispositionPane_dispositionInstructions}:</label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_dispositionObjectValueRow\">\r\n\t\t\t\t\t\t<div id=\"${id}_inheritedScheduleCheckBox\" data-dojo-type=\"dijit/form/CheckBox\" class=\"dijitInline\" data-dojo-attach-point=\"_inheritedScheduleCheckBox\" style=\"display:none\"></div>\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_inheritedScheduleCheckboxLabel\" for=\"${id}_inheritedScheduleCheckBox\" style=\"display:none; margin-right:5px;\">${messages.inherited}</label>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div id=\"${id}_dispositionTextBox\" class=\"folderTargetLocation\" data-dojo-attach-point=\"_dispositionTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"disabled:true\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button style=\"display:none\" data-dojo-attach-point=\"_dispositionInstructionsCreateButton\" data-dojo-attach-event=\"onClick: _onCreateSchedule\" data-dojo-type=\"dijit.form.Button\">\r\n\t\t\t\t\t\t\t${messages.entityItemDispositionPane_createSchedule}</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"_propagationSection\" style=\"display:none\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label></label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"_dispositionPropagationSelect\" data-dojo-type=\"ier/widget/DispositionPropagationSelector\"\r\n\t\t\t\t\t\t\tname=\"${id}_propagationSelect\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_dispositionAuthorityLabel\" for=\"${id}_dispositonSchedule\">${messages.entityItemDispositionPane_dispositionAuthority}:</label>\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"dispositionAuthorityHoverHelp\" data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.entityItemDispositionPane_dispositionAuthorityHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div id=\"${id}_dispositonSchedule\"\r\n\t\t\t\t\t\t\tclass=\"folderTargetLocation\" data-dojo-attach-point=\"_dispositionAuthorityTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-event=\"onChange:onInputChange\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>", "url:ier/widget/admin/templates/SystemPropertyPane.html":"<div class=\"ecmAdminTab\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\" class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_editButton\">${_messages.admin_edit}</button>\r\n\t\t<div data-dojo-type=\"dijit/Menu\" data-dojo-attach-point=\"_menu\" style=\"display: none;\">\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_editMenu\">${_messages.admin_edit}</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-attach-point=\"_gridContainer\" data-dojo-props=\"region: 'center'\" class=\"ecmContentList ierCenterPane\"></div>\r\n</div>\r\n", "url:ier/widget/dialog/templates/TaskErrorDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"ier/widget/tasks/TaskErrorPane\" class=\"ierDialogContent\" data-dojo-attach-point=\"_errorPane\" \r\n\t</div>\r\n</div>\r\n", "ier/model/IERDesktopMixin":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/model/IERRepositoryMixin", "ier/model/ReportResult", "ier/util/util", "ier/widget/admin/config"], function (dojo_declare, dojo_lang, ecm_model_desktop, ecm_model_Request, ier_constants, ier_model_IERRepositoryMixin, ier_model_ReportResult, ier_util, ier_widget_admin_config) {
        return dojo_declare("ier.model.IERDesktopMixin", null, {reportSettings:null, defensibleSweepSettings:null, constructor:function () {
            this.declaredClass = "ecm.model.Desktop";
            this.appLayoutName = "ier_widget_layout_IERAppLayout";
            this._currentFilePlan = null;
            this._currentFilePlanId = null;
            this.reportResults = [];
            this.reportSettings = {};
            this.defensibleSweepSettings = {};
        }, getCurrentFilePlan:function () {
            return this._currentFilePlan;
        }, getCurrentFilePlanId:function () {
            if (!this._currentFilePlanId) {
                return ier_constants.Id_FilePlanFolder;
            } else {
                return this._currentFilePlanId;
            }
        }, setCurrentFilePlan:function (filePlan) {
            if (filePlan) {
                this._currentFilePlan = filePlan;
                this._currentFilePlanId = filePlan.id;
            }
        }, clearIERSessionContent:function () {
            this._currentFilePlan = null;
            this._currentFilePlanId = null;
            this.reportResults = [];
            var repositories = this.getP8Repositories();
            if (repositories) {
                for (var i in repositories) {
                    var repository = repositories[i];
                    if (repository.isIERLoaded && repository.isIERLoaded == true) {
                        repository.isIERLoaded = false;
                    }
                }
            }
        }, getIERAppLayoutName:function () {
            return this.appLayoutName;
        }, getReportResults:function (callback) {
            var reportResults = [];
            var params = ier_util.getDefaultParams(ecm_model_desktop.getAuthenticatingRepository(), dojo_lang.hitch(this, function (response) {
                if (response.reportResults) {
                    for (var i in response.reportResults) {
                        reportResults.push(response.reportResults[i]);
                    }
                }
                if (callback) {
                    callback(reportResults);
                }
            }));
            params.requestParams[ier_constants.Param_UserId] = ecm_model_desktop.getAuthenticatingRepository().userId;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetReportResult, ier_constants.PostEncoding, params);
        }, refreshReportResults:function (callback) {
            this.reportResults = [];
            this.getReportResults(callback);
        }, getNonEnabledIERRepositoryIds:function () {
            var repositories = ecm_model_desktop.repositories;
            var nonEnabledIERRepositories = [];
            for (var i in repositories) {
                var repository = repositories[i];
                if (repository.connected && repository.type == "p8" && !repository.isIEREnabled) {
                    nonEnabledIERRepositories.push(repository.id);
                }
            }
            return nonEnabledIERRepositories;
        }, getIERRepositories:function () {
            var repositories = ecm_model_desktop.repositories;
            var result = [];
            for (var i in repositories) {
                var repository = repositories[i];
                if (repository.connected && repository.isIEREnabled()) {
                }
                result.push(repository);
            }
            return result;
        }, getP8Repositories:function () {
            var repositories = ecm_model_desktop.repositories;
            var result = [];
            for (var i in repositories) {
                var repository = repositories[i];
                if (repository.type == "p8") {
                    result.push(repository);
                }
            }
            return result;
        }, getRepositoryFromSymbolicAndConnection:function (objectStoreName, connectionUrl) {
            var repositories = ecm_model_desktop.repositories;
            for (var i in repositories) {
                var repo = repositories[i];
                if (repo.objectStoreName == objectStoreName && repo.serverName == connectionUrl) {
                    return repo;
                }
            }
            return ecm_model_desktop.getRepositoryOfObjectStore(objectStoreName);
        }, loadRepositories:function (repositoryIds, onComplete) {
            var params = null;
            if (repositoryIds.length == 1) {
                params = ier_util.getDefaultParams(repositoryIds[0]);
            } else {
                params = ier_util.getDefaultParams(repositoryIds[0]);
                params.requestParams[ier_constants.Param_RepositoryIds] = ier_util.arrayToString(repositoryIds);
            }
            params["requestCompleteCallback"] = dojo_lang.hitch(this, function (response) {
                var repositories = [];
                if (response.servers) {
                    for (var i in response.servers) {
                        var repositoryJSON = response.servers[i];
                        var repository = ecm_model_desktop.getRepository(repositoryJSON.repositoryId);
                        if (repository) {
                            repository.setIERRepositoryInfo(repositoryJSON);
                        } else {
                            repositories.push(repositoryJSON);
                        }
                    }
                    if (onComplete) {
                        onComplete(repositories);
                    }
                }
            });
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetRepositoryAttributes, ier_constants.PostEncoding, params);
        }, saveAdditionalAttributes:function (response) {
            this.reportSettings.cognosGatewayServerName = response.cognosGatewayServerName;
            this.reportSettings.cognosDispatchServletServerName = response.cognosDispatchServletServerName;
            this.reportSettings.cognosReportPath = response.cognosReportPath;
            this.reportSettings.cognosNamespace = response.cognosReportNamespace;
            this.defensibleSweepSettings.defensibleSweepThreadCount = response.defensibleSweepThreadCount;
            this.defensibleSweepSettings.defensibleSweepQueryPageSize = response.defensibleSweepQueryPageSize;
            this.defensibleSweepSettings.defensibleSweepUpdateBatchSize = response.defensibleSweepUpdateBatchSize;
            this.defensibleSweepSettings.defensibleSweepContentSizeLimit = response.defensibleSweepContentSizeLimit;
            this.defensibleSweepSettings.defensibleSweepLinkCacheSizeLimit = response.defensibleSweepLinkCacheSizeLimit;
            this.defensibleSweepSettings.defensibleSweepOnHoldContainerCacheSize = response.defensibleSweepOnHoldContainerCacheSize;
        }});
    });
}, "url:ier/widget/templates/ReportListing.html":"<div data-dojo-attach-point=\"containerNode\">\r\n</div>\r\n", "url:ier/widget/templates/TilesListItem.html":"<div class=\"ierTilesListItem\" data-dojo-attach-point=\"containerNode\" tabindex=\"0\"\r\n\t\tdata-dojo-attach-event=\"onclick: onListItemClick, onmouseover: _onFocus, onfocus: _onFocus, onmouseout: _onBlur, onblur: _onBlur, ondblclick: onListItemDoubleClick\" >\r\n\t<div data-dojo-attach-point=\"dataArea\">\r\n\t\t<div class=\"iconArea\" data-dojo-attach-point=\"iconArea\">\r\n\t\t</div>\r\n\t\t<div class=\"titleArea\" data-dojo-attach-point=\"titleArea\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/tasks/TasksListingPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/ContentPane", "ecm/model/Desktop", "ecm/model/AsyncTaskResultSet", "ecm/LoggerMixin", "ier/util/util", "ier/constants", "ier/messages", "ier/widget/listView/gridModules/RowContextMenu", "dojo/text!./templates/TasksListingPane.html", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_array, dojo_lang, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_layout_ContentPane, ecm_model_Desktop, ecm_model_AsyncTaskResultSet, ecm_LoggerMixin, ier_util, ier_constants, ier_messages, ier_widget_listView_RowContextMenu, templateString) {
        return dojo_declare("ier.widget.tasks.TasksListingPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, ier_messages:ier_messages, toolbarDef:"IERMultiStatusTaskToolbarMenuType", postCreate:function () {
            this.inherited(arguments);
            this.setupTaskGrid();
        }, getContentListGridModules:function () {
            var array = [];
            array.push(ier_widget_listView_RowContextMenu);
            return array;
        }, getContentListModules:function () {
        }, setupTaskGrid:function () {
            this.taskContentList.setContentListModules(this.getContentListModules());
            this.taskContentList.setGridExtensionModules(this.getContentListGridModules());
            this.taskContentList.multiSelect = true;
        }, reset:function () {
            this.categoryTask = null;
            if (this.taskContentList) {
                this.taskContentList.reset();
                this.setupTaskGrid();
            }
        }, retrieveTasks:function (onComplete) {
            var params = {};
            params[ier_constants.Param_UserId] = ecm.model.desktop.taskManager.showCurrentUserOnly ? ecm.model.desktop.getAuthenticatingRepository().userId : null;
            params[ier_constants.Param_TaskType] = ier_util.convertTaskType(this.categoryTask.taskType);
            params[ier_constants.Param_TaskStatus] = this.categoryTask.taskStatus && this.categoryTask.taskStatus == "all" ? "" : this.categoryTask.taskStatus;
            params[ier_constants.Param_IsRecurring] = this.categoryTask.isRecurring;
            params[ier_constants.Param_Parent] = this.categoryTask.parent;
            params[ier_constants.Param_NameFilter] = this.categoryTask.nameFilter;
            ecm_model_Desktop.taskManager.retrieveAsyncTasks(params, dojo_lang.hitch(this, function (response) {
                response.repository = ecm_model_Desktop.getAuthenticatingRepository();
                response.parentFolder = this.categoryTask;
                var resultSet = new ecm_model_AsyncTaskResultSet(response);
                resultSet.toolbarDef = this.toolbarDef;
                resultSet.userId = this.categoryTask.taskUserId;
                resultSet.taskType = ier_util.convertTaskType(this.categoryTask.taskType);
                resultSet.taskStatus = this.categoryTask.taskStatus;
                resultSet.isRecurring = this.categoryTask.isRecurring;
                resultSet.parentFilter = this.categoryTask.parent;
                resultSet.nameFilter = this.categoryTask.nameFilter;
                this.taskContentList.setResultSet(resultSet);
                this.setupTaskFilterConnections();
                this.onChangeResultSet(resultSet);
                this.categoryTask.contentListResultSet = resultSet;
                if (onComplete) {
                    onComplete(resultSet);
                }
            }));
        }, onChangeResultSet:function (resultSet) {
        }, refresh:function () {
            this.taskContentList.getResultSet().refresh();
        }, setupTaskFilterConnections:function () {
            if (this._clearTaskFilterHandler) {
                this.disconnect(this._clearTaskFilterHandler);
            }
            if (this._onTaskFilterSelectChangeHandler) {
                this.disconnect(this._onTaskFilterSelectChangeHandler);
            }
            if (this._onTaskFilterHandler) {
                this.disconnect(this._onTaskFilterHandler);
            }
            if (this._onUserCheckboxClickedHandler) {
                this.disconnect(this._onUserCheckboxClickedHandler);
            }
            if (this._onResultSetChangedHandler) {
                this.disconnect(this._onResultSetChangedHandler);
            }
            this.taskFilterModule = this.taskContentList.getContentListModule("taskFilter");
            this._onTaskFilterHandler = this.connect(this.taskFilterModule, "onTextFilter", function (value) {
                if (this.categoryTask.nameFilter != value) {
                    if (value != null || value != "") {
                        this.categoryTask.nameFilter = value;
                    } else {
                        this.categoryTask.nameFilter = null;
                    }
                    this.retrieveTasks();
                }
            });
            this._onTaskFilterSelectChangeHandler = this.connect(this.taskFilterModule, "onFilterSelectChange", function (value) {
                if (this.categoryTask) {
                    this.categoryTask.taskType = value;
                    this.retrieveTasks();
                }
            });
            this._onUserCheckboxClickedHandler = this.connect(this.taskFilterModule, "onUserCheckboxClicked", function (event) {
                if (event && event.currentTarget && event.currentTarget.checked == true) {
                    this.categoryTask.taskUserId = ecm_model_Desktop.getAuthenticatingRepository().userId;
                    ecm.model.desktop.taskManager.showCurrentUserOnly = true;
                } else {
                    this.categoryTask.taskUserId = null;
                    ecm.model.desktop.taskManager.showCurrentUserOnly = false;
                }
                this.retrieveTasks();
            });
            this._onResultSetChangedHandler = this.connect(this.taskCOntentList, "onSetResultSet", "onChangeResultSet");
        }});
    });
}, "ier/util/property":function () {
    define(["dojo/_base/declare", "ecm/LoggerMixin", "ier/constants"], function (dojo_declare, ecm_LoggerMixin, ier_constants) {
        var _PropertyUtil = dojo_declare("ier.util._PropertyUtil", [ecm_LoggerMixin], {DispositionGroupProperties:[ier_constants.Property_DispositionSchedule, ier_constants.Property_CutoffDate, ier_constants.Property_CurrentPhaseExecutionDate, ier_constants.Property_CurrentPhaseDecisionDate, ier_constants.Property_CurrentPhaseAction, ier_constants.Property_CurrentPhaseReviewDecision, ier_constants.Property_LastSweepDate], VitalRecordGroupProperties:[ier_constants.Property_VitalRecordDeclareDate, ier_constants.Property_VitalRecordDescription, ier_constants.Property_VitalRecordDisposalTrigger, ier_constants.Property_VitalRecordNextReviewDate, ier_constants.Property_VitalRecordReviewAction, ier_constants.Property_IsVitalRecord], PhysicalGroupProperties:[ier_constants.Property_Location, ier_constants.Property_HomeLocation, ier_constants.Property_ChargeOutTo, ier_constants.Property_ChargeOutStatus], BasicScheduleProperties:[ier_constants.Property_RMRetentionTriggerPropertyName, ier_constants.Property_RMRetentionPeriod], EntityItemNotDisplayedProperties:[ier_constants.Property_IsDeleted], RMSystemProperties:{"AccessionTo":true, "AssociatedCutOffDisposalTriggers":true, "AssociatedFolders":true, "AssociatedHybridRecordFolderHomeLocations":true, "AssociatedMarkerHomeLocations":true, "AssociatedPhase":true, "AssociatedPhases":true, "AssociatedPhyContainerHomeLocations":true, "AssociatedPhyRecordFolderHomeLocations":true, "AssociatedRCHomeLocations":true, "AssociatedRCLocations":true, "AssociatedRCVitalDisposalTriggers":true, "AssociatedRCVitalReview":true, "AssociatedRFLocations":true, "AssociatedRFVitalDisposalTriggers":true, "AssociatedRILocations":true, "AssociatedRIVitalDisposaltriggers":true, "AssociatedRIVitalReview":true, "AssociatedRecordCategoryActions":true, "AssociatedRecordFolderActions":true, "AssociatedRecordInfoActions":true, "AssociatedRecordPtr":true, "AssociatedRecords":true, "AssociatedVolumeActions":true, "AssociatedVolumeHomeLocations":true, "AssociatedVolumeLocations":true, "AssociatedVolumeVitalDisposalTriggers":true, "AssociatedVolumeVitalDisposalTriggers":true, "AssociatedVolumeVitalReview":true, "AssocitedRFVitalReview":true, "AuthorisingStatute":true, "CanDeclare":true, "ChargeOutStatus":true, "ChargeOutTo":true, "ClosedBy":true, "ConditionXML":true, "CurrentActionType":true, "CurrentPhaseAction":true, "CurrentPhaseDecisionDate":true, "CurrentPhaseExecutionDate":true, "CurrentPhaseExecutionStatus":true, "CurrentPhaseExportDestination":true, "CurrentPhaseExportFormat":true, "CurrentPhaseID":true, "CurrentPhaseReviewComments":true, "CurrentPhaseReviewDecision":true, "CutoffDate":true, "CutoffInheritedFrom":true, "DateClosed":true, "DateDeclared":true, "DateLastDeclaration":true, "DateOfLastReview":true, "DisposalAuthorizedBy":true, "DisposalDate":true, "DisposalInstruction":true, "DisposalPhases":true, "DisposalScheduleAllocationDate":true, "DisposalScheduleInheritedFrom":true, "GuideID":true, "Holds":true, "Inactive":true, "IntelligentRetentionNumber":true, "IsDeleted":true, "IsDynamicHold":true, "IsTriggerChanged":true, "IsFinalPhaseCompleted":true, "LastHoldSweepDate":true, "LastPatternIndex":true, "LastRetrievalofRecord":true, "LastReviewedBy":true, "LastRunDate":true, "LastSweepDate":true, "Level":true, "LinkedTo":true, "OOTBReportID":true, "OnHold":true, "ParentGUID":true, "PatternPtr":true, "PhaseDecisionDate":true, "PhaseExecutionDate":true, "PhasePtr":true, "PreventRMEntityDeletion":true, "RMExternallyManagedBy":true, "ReOpenedBy":true, "ReOpenedDate":true, "ReasonForClose":true, "ReasonForDelete":true, "ReasonForInactivate":true, "ReasonForOutcomeOfLastReview":true, "ReasonForReclassification":true, "RecalculatePhaseRetention":true, "ReceiptStatus":true, "RecordInformation":true, "RecordedDocuments":true, "ReviewComments":true, "ReviewDate":true, "ReviewDecision":true, "ReviewerDetails":true, "SupercededDate":true, "SweepAuditXML":true, "SweepState":true, "VitalRecordDeclareDate":true, "VitalRecordNextReviewDate":true, "VitalRecordReviewComments":true, "VitalRecordReviewDate":true, "VitalSweepDate":true, "VitalWorkflowStatus":true}, InternalEventTrigger:[ier_constants.Property_DispositionTriggerName, ier_constants.Property_RMEntityDescription, ier_constants.Property_Aggregation], ExternalEventTrigger:[ier_constants.Property_DispositionTriggerName, ier_constants.Property_RMEntityDescription, ier_constants.Property_ExternalEventOccurenceDate], RecurringEventTrigger:[ier_constants.Property_DispositionTriggerName, ier_constants.Property_RMEntityDescription, ier_constants.Property_DateTime, ier_constants.Property_Frequency], PredefinedDateEventTrigger:[ier_constants.Property_DispositionTriggerName, ier_constants.Property_RMEntityDescription, ier_constants.Property_DateTime], isPhysicalGroupProperty:function (propertyName) {
            for (var i in this.PhysicalGroupProperties) {
                var property = this.PhysicalGroupProperties[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isVitalRecordGroupProperty:function (propertyName) {
            for (var i in this.VitalRecordGroupProperties) {
                var property = this.VitalRecordGroupProperties[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isBasicScheduleGroupProperty:function (propertyName) {
            for (var i in this.BasicScheduleProperties) {
                var property = this.BasicScheduleProperties[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isDispositionGroupProperty:function (propertyName) {
            for (var i in this.DispositionGroupProperties) {
                var property = this.DispositionGroupProperties[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, getDispositionGroupProperties:function () {
            return this.DispositionGroupProperties;
        }, isEntityItemNotDisplayedProperty:function (propertyName) {
            for (var i in this.EntityItemNotDisplayedProperties) {
                var property = this.EntityItemNotDisplayedProperties[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isRMSystemProperty:function (propertyName) {
            return this.RMSystemProperties[propertyName] == true;
        }, isRecurringEventProperty:function (propertyName) {
            for (var i in this.RecurringEventTrigger) {
                var property = this.RecurringEventTrigger[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isExternalEventProperty:function (propertyName) {
            for (var i in this.ExternalEventTrigger) {
                var property = this.ExternalEventTrigger[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isInternalEventProperty:function (propertyName) {
            for (var i in this.InternalEventTrigger) {
                var property = this.InternalEventTrigger[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, isPredefinedDateEventProperty:function (propertyName) {
            for (var i in this.PredefinedDateEventTrigger) {
                var property = this.PredefinedDateEventTrigger[i];
                if (property == propertyName) {
                    return true;
                }
            }
            return false;
        }, hasDispositionGroupProperty:function (item) {
            switch (item && item.entityType) {
              case ier_constants.EntityType_RecordCategory:
              case ier_constants.EntityType_RecordFolder:
              case ier_constants.EntityType_Volume:
              case ier_constants.EntityType_ElectronicRecordFolder:
              case ier_constants.EntityType_HybridRecordFolder:
              case ier_constants.EntityType_PhysicalContainer:
              case ier_constants.EntityType_PhysicalRecordFolder:
              case ier_constants.EntityType_Record:
              case ier_constants.EntityType_ElectronicRecord:
              case ier_constants.EntityType_EmailRecord:
              case ier_constants.EntityType_PhysicalRecord:
              case ier_constants.EntityType_PDFRecord:
                return true;
              default:
                return false;
            }
        }, setPropertiesFromPropertyJSON:function (attributeDefs, propertyJSON) {
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                var property = this._getPropertyFromPropertyJSON(propertyJSON, attrDef.id);
                if (attrDef && property) {
                    attrDef.defaultValue = property.value;
                }
            }
        }, _getPropertyFromPropertyJSON:function (propertyJSON, attributeName) {
            for (var i in propertyJSON) {
                var property = propertyJSON[i];
                if (property.name == attributeName) {
                    return property;
                }
            }
        }});
        var propertyUtil = new _PropertyUtil();
        return propertyUtil;
    });
}, "ier/widget/admin/RepositorySecurityPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/dialog", "ier/model/admin/Config", "ier/widget/dialog/ObjectStoreSecurityDialog", "dojo/text!./templates/RepositorySecurityPane.html", "dijit/form/Button", "idx/layout/TitlePane", "ier/widget/panes/EntityItemObjectStoreSecurityPane"], function (declare, lang, dom_construct, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, ecm_widget_dialog_ConfirmationDialog, ecm_dialog_MessageDialog, constants, messages, ier_util_dialog, Config, ier_widget_dialog_ObjectStoreSecurityDialog, RepositorySecurityPane_html) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:RepositorySecurityPane_html, repository:null, config:null, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._runButton, "onClick", this._runSecurityScript);
            this.connect(this._entityItemObjectStoreSecurityPane, "onInputChange", this.onChange);
            this.connect(this._restoreDefaultsButton, "onClick", this._restoreDefaults);
            this._runButton.set("disabled", true);
            this._restoreDefaultsButton.set("disabled", true);
        }, setRepository:function (repository) {
            this.repository = repository;
            this._entityItemObjectStoreSecurityPane.createRendering(repository);
        }, _restoreDefaults:function () {
            this._entityItemObjectStoreSecurityPane.processPermissions();
            this._restoreDefaultsButton.set("disabled", true);
        }, _runSecurityScript:function () {
            if (!this.confirmRunSecurity) {
                this.confirmRunSecurity = new ecm_widget_dialog_ConfirmationDialog({text:messages.objectStoreSecurityDialog_confirmation, buttonLabel:messages.baseDialog_runButton, onExecute:lang.hitch(this, function () {
                    this._entityItemObjectStoreSecurityPane.saveSecurity(lang.hitch(this, function () {
                        var dialog = new ecm_dialog_MessageDialog({text:messages.admin_securityScriptSuccessful});
                        dialog.show();
                        ier_util_dialog.manage(dialog);
                        this._runButton.set("disabled", true);
                        this._restoreDefaultsButton.set("disabled", true);
                    }));
                })});
            }
            this.confirmRunSecurity.show();
        }, onChange:function (dirty) {
            if (this._validatePermissions()) {
                this._runButton.set("disabled", false);
            } else {
                this._runButton.set("disabled", true);
            }
            this._restoreDefaultsButton.set("disabled", false);
        }, onShow:function () {
            this.inherited(arguments);
            this._entityItemObjectStoreSecurityPane.resize();
        }, destroy:function () {
            if (this.confirmRunSecurity) {
                this.confirmRunSecurity.destroy();
            }
            this.inherited(arguments);
        }, _validatePermissions:function () {
            var permissions = this._entityItemObjectStoreSecurityPane.getPermissions();
            var permissionTypes = [];
            for (var i in permissions) {
                var permission = permissions[i];
                if (permission && permission.securityGroup) {
                    permissionTypes[permission.securityGroup] = true;
                }
            }
            if (this.repository.recordDatamodelType == "DoDClassified" && permissionTypes[0] != true) {
                return false;
            }
            if (permissionTypes[1] != true || permissionTypes[2] != true || permissionTypes[3] != true || permissionTypes[4] != true) {
                return false;
            }
            return true;
        }});
    });
}, "url:ier/widget/dialog/templates/DeclareRecordDialog.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<label id=\"${id}_generalTitlePaneLabel\" style=\"display:none\">${_ierMessages.baseDialog_general}</label>\t\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_recordDeclareGeneralPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/RecordDeclareGeneralPane\"></div>\r\n\t</div>\r\n\t<label id=\"${id}_propertyTitlePaneLabel\" style=\"display:none\">${_ierMessages.baseDialog_properties}</label>\t\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_recordDeclarePropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/RecordDeclarePropertiesPane\"></div>\r\n\t</div>\r\n</div>", "ier/model/IERRepositoryMixin":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/dialog/LoginDialog", "ier/constants", "ier/model/FilePlanRepositoryMixin", "ier/model/RecordEntryTemplate", "ier/util/dialog", "ier/util/util", "ier/model/SearchTemplate"], function (dojo_declare, dojo_lang, dojo_connect, ecm_model_desktop, ecm_model_Request, ecm_widget_dialog_LoginDialog, ier_constants, ier_model_FilePlanRepositoryMixin, ier_model_RecordEntryTemplate, ier_util_dialog, ier_util, SearchTemplate) {
        return dojo_declare("ier.model.IERRepositoryMixin", null, {currentUserDirectories:null, currentUser:null, defaultFilePlan:null, reportOutputSaveDirectory:null, defensibleSweepSettings:null, constructor:function (id, name, recordType) {
            this.declaredClass = "ecm.model.Repository";
            this.id = id;
            this.name = name;
            this.recordRepositoryType = recordType;
            this._recordEntryTemplates = [];
            this._contentRepositories = [];
            this.ierLoaded = false;
            this.isIERLoading = false;
            this.defensibleSweepSettings = {};
        }, loadIERRepository:function (onComplete, desktopId, onCancel) {
            var repository = this.getRepository(this.id);
            if (repository.connected && !repository.isIERLoaded()) {
                var recordType = repository.getRecordType();
                if (recordType && (recordType == ier_constants.RepositoryType_Plain || recordType == ier_constants.RepositoryType_Content)) {
                    this.ierLoaded = true;
                    if (onComplete) {
                        onComplete(repository);
                    }
                } else {
                    var repositoryAttributes = repository.attributes;
                    if (repositoryAttributes && repositoryAttributes.recordRepositoryType && repositoryAttributes.recordDatamodelType && repositoryAttributes.fileplans) {
                        this.setIERRepositoryInfo(repositoryAttributes);
                        if (onComplete) {
                            onComplete(repository);
                        }
                    } else {
                        if (!this.isIERLoading) {
                            this.isIERLoading = true;
                            ecm_model_desktop.loadRepositories([repository.id], dojo_lang.hitch(this, function (repositories) {
                                if (onComplete) {
                                    onComplete(repository);
                                }
                            }));
                        }
                    }
                }
            } else {
                if (!repository.connected) {
                    var loginDialog = new ecm_widget_dialog_LoginDialog();
                    if (desktopId) {
                        loginDialog.setDesktopId(desktopId);
                    }
                    var cancelHandler = null;
                    cancelHandler = dojo_connect.connect(loginDialog, "onCancel", dojo_lang.hitch(this, function () {
                        if (onCancel) {
                            onCancel();
                        }
                        dojo_connect.disconnect(cancelHandler);
                    }));
                    loginDialog.connectToRepository(repository, dojo_lang.hitch(this, function () {
                        this.loadIERRepository(onComplete);
                        dojo_connect.disconnect(cancelHandler);
                    }));
                    ier_util_dialog.manage(loginDialog);
                } else {
                    if (repository.isIERLoaded() && onComplete) {
                        onComplete(repository);
                    }
                }
            }
        }, setIERRepositoryInfo:function (repositoryJSON) {
            var repository = this.getRepository(this.id);
            if (repositoryJSON.additionalAttributes) {
                dojo_declare.safeMixin(repository, repositoryJSON.additionalAttributes);
            }
            if (repositoryJSON.securityRunDate) {
                repository.securityRunDate = repositoryJSON.securityRunDate;
            }
            repository.setRecordType(repositoryJSON.recordRepositoryType);
            repository.setRecordDatamodelType(repositoryJSON.recordDatamodelType);
            repository.defaultFilePlan = repositoryJSON.defaultFilePlan;
            repository.reportOutputSaveDirectory = repositoryJSON.reportOutputSaveDirectory;
            repository.defensibleSweepSettings.defensibleSweepAlwaysDeclareRecord = repositoryJSON.defensibleSweepAlwaysDeclareRecord;
            repository.defensibleSweepSettings.defensibleSweepAlwaysShowDeclareResult = repositoryJSON.defensibleSweepAlwaysShowDeclareResult;
            repository.defensibleSweepSettings.defensibleDisposalRecordContainerId = repositoryJSON.defensibleDisposalRecordContainerId;
            repository.defensibleSweepSettings.defensibleDisposalWorkflowId = repositoryJSON.defensibleDisposalWorkflowId;
            this._setupPrivileges(repository, repositoryJSON.privileges);
            this._mixinFilePlanRepository(repositoryJSON.fileplans);
            repository.ierLoaded = true;
            repository.isIERLoading = false;
            repository.onIERLoaded(repository);
        }, _setupPrivileges:function (repository, privilegesJSON) {
            if (privilegesJSON) {
                dojo_declare.safeMixin(repository.privileges, privilegesJSON);
            }
        }, _mixinFilePlanRepository:function (filePlansJSON) {
            var repository = this.getRepository(this.id);
            var recordType = repository.getRecordType();
            if (recordType != null) {
                if (recordType == ier_constants.RepositoryType_FilePlan || recordType == ier_constants.RepositoryType_Combined) {
                    var ierRepository = new ier_model_FilePlanRepositoryMixin(repository.id, repository.name, recordType, repository.getRecordDatamodelType(), repository, filePlansJSON);
                    dojo_declare.safeMixin(repository, ierRepository);
                }
            }
        }, isIERLoaded:function () {
            return this.ierLoaded;
        }, onIERLoaded:function (repository) {
        }, getRepositoryType:function () {
            return this.recordRepositoryType;
        }, isCombined:function () {
            return this.getRepositoryType() == "Combined";
        }, isContentRepository:function () {
            return (this.getRepositoryType() == "Combined" || this.getRepositoryType() == "Content");
        }, isFilePlanRepository:function () {
            return (this.getRepositoryType() == "Combined" || this.getRepositoryType() == "FilePlan");
        }, isPlainRepository:function () {
            return (this.getRepositoryType() == "Plain");
        }, getRepository:function () {
            return ecm_model_desktop.getRepository(this.id);
        }, retrieveRecordEntryTemplates:function (callback) {
            if (this._recordEntryTemplates && this._recordEntryTemplates.length == 0) {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    this._recordEntryTemplates = [];
                    this._recordEntryTemplates.push(new ier_model_RecordEntryTemplate(null, ""));
                    for (var i in response.datastore.items) {
                        var entryTemplateJSON = response.datastore.items[i];
                        var entryTemplate = new ier_model_RecordEntryTemplate({id:entryTemplateJSON.template_id, name:entryTemplateJSON.template_name, description:entryTemplateJSON.template_desc, repository:this});
                        this._recordEntryTemplates.push(entryTemplate);
                    }
                    if (callback) {
                        callback(this._recordEntryTemplates);
                    }
                }));
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetRecordEntryTemplates, ier_constants.PostEncoding, params);
            } else {
                if (callback) {
                    callback(this._recordEntryTemplates);
                }
            }
        }, retrieveAssociatedContentRepositories:function (callback) {
            if (this._contentRepositories == null || this._contentRepositories.length == 0) {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    this._contentRepositories = [];
                    for (var i in response.datastore.items) {
                        var contentRepositoryJSON = response.datastore.items[i];
                        this._contentRepositories.push({displayName:contentRepositoryJSON.displayName, value:contentRepositoryJSON.name, textSearchType:contentRepositoryJSON.CBRSearchType, textSearchOptimization:contentRepositoryJSON.CBRQueryOptimization, textSearchRankOverride:contentRepositoryJSON.CBRQueryRankOverride});
                    }
                    if (callback) {
                        callback(this._contentRepositories);
                    }
                }));
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetAssociatedContentRepositories, ier_constants.PostEncoding, params);
            } else {
                if (callback) {
                    callback(this._contentRepositories);
                }
            }
        }, retrieveIERSearchTemplates:function (callback, filter) {
            if (!filter) {
                filter = "ier";
            }
            if (this.templates && this.templatesFilter == filter) {
                if (callback) {
                    callback(this.templates);
                }
            } else {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    var repository = this.getRepository(this.id);
                    repository._retrieveIERSearchTemplatesCompleted(response, callback);
                }));
                var request = ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, "ierRetrieveIERSearchTemplates", ier_constants.PostEncoding, params);
                this.templatesFilter = filter;
            }
            return request;
        }, _retrieveIERSearchTemplatesCompleted:function (response, callback) {
            var items = response.datastore.items;
            this.templates = [];
            for (var i in items) {
                items[i].repository_id = response.repositoryId;
                var template = SearchTemplate.createFromJSON(items[i], this);
                this.templates.push(template);
            }
            if (callback) {
                callback(this.templates);
            }
        }, retrieveIERSearchTemplate:function (docId, vsId, version, callback, errorback) {
            var self = this;
            var requestParams = {repositoryId:this.id, docid:docId, template_name:"StoredSearch"};
            if (vsId) {
                requestParams.vsId = vsId;
            }
            if (version) {
                requestParams.version = version;
            }
            var request = ecm.model.Request.invokeService("getContentItems", this.type, requestParams, dojo_lang.hitch(this, function (response) {
                self._retrieveIERSearchTemplateCompleted(response, callback);
            }), false, false, errorback);
            return request;
        }, _retrieveIERSearchTemplateCompleted:function (response, callback) {
            var item = response.rows[0];
            var template = SearchTemplate.createFromJSON(item, this);
            if (callback) {
                callback(template);
            }
        }, retrieveObjectStorePermissions:function (callback) {
            if (this.objectStorePermissions) {
                if (callback) {
                    callback(this.objectStorePermissions);
                }
            } else {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    this.objectStorePermissions = ecm.model.Permission.createFromJSON(response.acl);
                    if (callback) {
                        callback(this.objectStorePermissions);
                    }
                }));
                params.requestParams[ier_constants.Param_FilePlanRepositoryId] = this.id;
                ecm.model.Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetObjectStoreSecurity, ier_constants.PostEncoding, params);
            }
        }, retrievePermissions:function (callback) {
            if (this.permissions) {
                if (callback) {
                    callback(this.permissions);
                }
            } else {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    this.permissions = ecm.model.Permission.createFromJSON(response.acl);
                    if (response.modifyPermissions) {
                        this["modifyPermissions"] = response.modifyPermissions || false;
                    }
                    if (callback) {
                        callback(this.permissions);
                    }
                }));
                params.requestParams[ier_constants.Param_FilePlanRepositoryId] = this.id;
                ecm.model.Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetRepositoryPermissions, ier_constants.PostEncoding, params);
            }
        }, getCurrentUser:function (callback) {
            if (this.currentUser) {
                if (callback) {
                    callback(this.currentUser);
                }
            } else {
                this.getUser(ecm_model_desktop.getAuthenticatingRepository().userId, dojo_lang.hitch(this, function (user) {
                    if (user) {
                        this.currentUser = user;
                        if (callback) {
                            callback(user);
                        }
                    }
                }));
            }
        }, getUser:function (userId, callback) {
            var repository = this.getRepository();
            if (this.currentUserDirectories) {
                repository.findUsers(dojo_lang.hitch(this, function (users) {
                    if (callback) {
                        callback(users[0]);
                    }
                }), directories[0], userId, null, null, "1", ier_constants.PrincipalSearchAttribute_ShortName);
            } else {
                repository.getDirectories(dojo_lang.hitch(this, function (directories) {
                    this.curentUserDirectories = directories;
                    if (directories && directories.length > 0) {
                        for (var i in directories) {
                            var directory = directories[i];
                            var user = null;
                            if (user == null) {
                                repository.findUsers(dojo_lang.hitch(this, function (users) {
                                    if (users && users[0]) {
                                        user = users[0];
                                    }
                                    if (callback) {
                                        callback(user);
                                    }
                                }), directory, userId, null, null, "1", ier_constants.PrincipalSearchAttribute_ShortName);
                            }
                        }
                    }
                }));
            }
        }, isRecordsManagerOrAdministrator:function () {
            return (this.attributes && this.attributes.isRecordsAdministratorAndManager == true);
        }, onDisconnected:function (repository) {
            this._recordEntryTemplates = [];
            this._contentRepositories = [];
            for (var property in this) {
                if (ier_util.startsWith(property, "privIER")) {
                    delete this[property];
                }
            }
            this.ierLoaded = false;
            if (this.onIERLogOff) {
                this.onIERLogOff();
            }
        }});
    });
}, "ier/widget/layout/CommonActionsHandler":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/json", "dojo/string", "dojo/dom-construct", "dijit/Dialog", "dijit/form/RadioButton", "dijit/form/Button", "ecm/model/ContentItem", "ecm/model/Favorite", "ecm/model/Request", "ecm/widget/dialog/EditPropertiesDialog", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/layout/CommonActionsHandler", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/dialog", "ier/util/util", "ier/widget/admin/config", "ier/widget/dialog/AboutDialog", "ier/widget/dialog/ActionDialog", "ier/widget/dialog/DispositionScheduleDialog", "ier/widget/dialog/AddFilePlanDialog", "ier/widget/dialog/EventTriggerDialog", "ier/widget/dialog/AddHoldDialog", "ier/widget/dialog/AddLocationDialog", "ier/widget/dialog/AddNamingPatternDialog", "ier/widget/dialog/AddRecordCategoryDialog", "ier/widget/dialog/AddRecordFolderDialog", "ier/widget/dialog/AddRecordVolumeDialog", "ier/widget/dialog/CloseRecordContainerDialog", "ier/widget/dialog/CopyRecordDialog", "ier/widget/dialog/LinkRecordDialog", "ier/widget/dialog/DeclareRecordDialog", "ier/widget/dialog/DocumentInfoDialog", "ier/widget/dialog/FilePlanPropertiesDialog", "ier/widget/dialog/FileRecordDialog", "ier/widget/dialog/HoldDialog", "ier/widget/dialog/ViewEntitiesOnHoldDialog", "ier/widget/dialog/LocationDialog", "ier/widget/dialog/MoveRecordDialog", "ier/widget/dialog/NamingPatternDialog", "ier/widget/dialog/PlaceOnHoldDialog", "ier/widget/dialog/RemoveHoldDialog", "ier/widget/dialog/RelocateRecordContainerDialog", "ier/widget/dialog/RecordPropertiesDialog", "ier/widget/dialog/RecordCategoryPropertiesDialog", "ier/widget/dialog/RecordFolderPropertiesDialog", "ier/widget/dialog/RecordVolumePropertiesDialog", "ier/widget/dialog/AddReportDefinitionDialog", "ier/widget/dialog/ReportDefinitionDialog", "ier/widget/dialog/ScheduleReportWizardDialog", "ier/widget/dialog/ReScheduleReportWizardDialog", "ier/widget/dialog/ScheduleDDContainerConversionWizard", "ier/widget/dialog/ScheduleDDSweepReportTaskWizard", "ier/model/DefensibleDisposalSchedule", "ier/widget/dialog/TaskErrorDialog", "ier/widget/dialog/TaskInformationDialog"], function (dojo_declare, dojo_lang, dojo_array, dojo_json, dojo_string, dojo_construct, Dialog, RadioButton, Button, ecm_model_ContentItem, ecm_model_Favorite, ecm_model_Request, ecm_widget_dialog_EditPropertiesDialog, ecm_widget_dialog_ConfirmationDialog, ecm_widget_layout_CommonActionsHandler, ecm_dialog_MessageDialog, ier_constants, ier_messages, ier_util_dialog, ier_util, ier_admin_config, ier_dialog_AboutDialog, ier_dialog_ActionDialog, ier_dialog_DispositionScheduleDialog, ier_dialog_AddFilePlanDialog, ier_dialog_EventTriggerDialog, ier_dialog_AddHoldDialog, ier_dialog_AddLocationDialog, ier_dialog_AddNamingPatternDialog, ier_dialog_AddRecordCategoryDialog, ier_dialog_AddRecordFolderDialog, ier_dialog_AddRecordVolumeDialog, ier_dialog_CloseRecordContainerDialog, ier_dialog_CopyRecordDialog, ier_dialog_LinkRecordDialog, ier_dialog_DeclareRecordDialog, ier_dialog_DocumentInfoDialog, ier_dialog_FilePlanPropertiesDialog, ier_dialog_FileRecordDialog, ier_dialog_HoldDialog, ier_dialog_ViewEntitiesOnHoldDialog, ier_dialog_LocationDialog, ier_dialog_MoveRecordDialog, ier_dialog_NamingPatternDialog, ier_dialog_PlaceOnHoldDialog, ier_dialog_RemoveHoldDialog, ier_dialog_RelocateRecordContainerDialog, ier_dialog_RecordPropertiesDialog, ier_dialog_RecordCategoryPropertiesDialog, ier_dialog_RecordFolderPropertiesDialog, ier_dialog_RecordVolumePropertiesDialog, ier_dialog_AddReportDefinitionDialog, ier_dialog_ReportDefinitionDialog, ier_widget_ScheduleReportWizardDialog, ier_widget_ReScheduleReportWizardDialog, ScheduleDDContainerConversionWizard, ScheduleDDSweepReportTaskWizard, DefensibleDisposalSchedule, TaskErrorDialog, TaskInformationDialog) {
        return dojo_declare("ier.widget.layout.CommonActionsHandler", [ecm_widget_layout_CommonActionsHandler], {actionIERAbout:function (repository, items) {
            var aboutDialog = new ier_dialog_AboutDialog();
            aboutDialog.startup();
            aboutDialog.show();
            ier_util_dialog.manage(aboutDialog);
        }, actionHelp:function (repository, items) {
            if (ecm.model.desktop.layout == "ier.widget.layout.IERMainLayout") {
                var left = 100;
                var top = 100;
                var width = 860;
                var height = 600;
                var url = ecm.model.desktop.helpUrl + "index.jsp?content=" + ecm.model.desktop.helpContext;
                window.open(url, "_blank", "status=yes,location=no,scrollbars=no,menubar=no,toolbar=no,personalbar=no,resizable=yes,left=" + left + ",top=" + top + ",width=" + width + ",height=" + height + "\"", true);
            } else {
                this.inherited(arguments);
            }
        }, actionIERRefresh:function (repository, parentFolder, isConfigure, resultSet) {
            if (resultSet && resultSet instanceof ecm.model.AsyncTaskResultSet) {
                if (parentFolder) {
                    ecm.model.desktop.onChange(parentFolder);
                    parentFolder.contentListResultSet = null;
                }
                resultSet.refresh();
                return;
            }
            if (parentFolder) {
                if (parentFolder instanceof Array && parentFolder.length > 0) {
                    parentFolder[0].refresh();
                } else {
                    parentFolder.refresh();
                }
            } else {
                if (isConfigure) {
                    if (repository) {
                        repository.onConfigure(repository);
                    }
                } else {
                    if (repository) {
                        repository.refresh();
                    } else {
                        ecm.model.desktop.refresh();
                    }
                }
            }
        }, actionIERProperties:function (repository, items) {
            var item = items && items[0];
            if (item && (item.getEntityType || item.entityType)) {
                var dialog = null;
                var entityType = (item.getEntityType) ? item.getEntityType() : item.entityType;
                switch (entityType) {
                  case ier_constants.EntityType_DispositionAction:
                    dialog = new ier_dialog_ActionDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_Hold:
                    dialog = new ier_dialog_HoldDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_Location:
                    dialog = new ier_dialog_LocationDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_DispositionTrigger:
                    dialog = new ier_dialog_EventTriggerDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_NamingPattern:
                    dialog = new ier_dialog_NamingPatternDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_DispositionSchedule:
                    dialog = new ier_dialog_DispositionScheduleDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_RecordCategory:
                    dialog = new ier_dialog_RecordCategoryPropertiesDialog();
                    dialog.startup();
                    dialog.show(repository, item.parent, item);
                    break;
                  case ier_constants.EntityType_ElectronicRecordFolder:
                  case ier_constants.EntityType_HybridRecordFolder:
                  case ier_constants.EntityType_PhysicalRecordFolder:
                  case ier_constants.EntityType_PhysicalContainer:
                    dialog = new ier_dialog_RecordFolderPropertiesDialog();
                    dialog.startup();
                    dialog.show(repository, item.parent, item);
                    break;
                  case ier_constants.EntityType_Volume:
                    dialog = new ier_dialog_RecordVolumePropertiesDialog();
                    dialog.startup();
                    dialog.show(repository, item.parent, item);
                    break;
                  case ier_constants.EntityType_Record:
                  case ier_constants.EntityType_ElectronicRecord:
                  case ier_constants.EntityType_EmailRecord:
                  case ier_constants.EntityType_PhysicalRecord:
                  case ier_constants.EntityType_PDFRecord:
                    dialog = new ier_dialog_RecordPropertiesDialog();
                    dialog.startup();
                    dialog.show(repository, item);
                    break;
                  case ier_constants.EntityType_FilePlan:
                    dialog = new ier_dialog_FilePlanPropertiesDialog();
                    dialog.startup();
                    dialog.show(repository, item, true);
                    break;
                  case ier_constants.EntityType_ReportDefinition:
                    dialog = new ier_dialog_ReportDefinitionDialog();
                    dialog.startup();
                    dialog.show(repository, item, false);
                    break;
                  default:
                    break;
                }
                if (dialog) {
                    ier_util_dialog.manage(dialog);
                }
            }
        }, actionIERAddFilePlan:function (repository, parentFolders) {
            var addFilePlanDialog = new ier_dialog_AddFilePlanDialog();
            addFilePlanDialog.startup();
            addFilePlanDialog.show(repository);
            ier_util_dialog.manage(addFilePlanDialog);
        }, actionIEREditFilePlan:function (repository, items) {
            var item = items && items[0];
            if (item) {
                var dialog = new ier_dialog_FilePlanPropertiesDialog();
                dialog.startup();
                dialog.show(repository, item);
                ier_util_dialog.manage(dialog);
            }
        }, actionIERAddRecordCategory:function (repository, parentFolders) {
            var addCategoryDialog = new ier_dialog_AddRecordCategoryDialog();
            addCategoryDialog.startup();
            addCategoryDialog.show(repository, parentFolders[0]);
            ier_util_dialog.manage(addCategoryDialog);
        }, actionIERAddRecordFolder:function (repository, parentFolders) {
            var dialog = new ier_dialog_AddRecordFolderDialog();
            dialog.startup();
            dialog.show(repository, parentFolders[0]);
            ier_util_dialog.manage(dialog);
        }, actionIERAddRecordVolume:function (repository, parentFolders) {
            var dialog = new ier_dialog_AddRecordVolumeDialog();
            dialog.startup();
            dialog.show(repository, parentFolders[0]);
            ier_util_dialog.manage(dialog);
        }, actionIERAddEventTrigger:function (repository, parentFolders) {
            var dialog = new ier_dialog_EventTriggerDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERClose:function (repository, items, callback, teamspace, resultSet, parameterMap, action) {
            var closeRecordContainerDialog = new ier_dialog_CloseRecordContainerDialog();
            closeRecordContainerDialog.startup();
            var widget = parameterMap ? parameterMap.widget : null;
            var shouldRefreshParent = widget instanceof ier.widget.FolderTree ? true : false;
            closeRecordContainerDialog.show(repository, items, shouldRefreshParent);
            ier_util_dialog.manage(closeRecordContainerDialog);
        }, actionIERCreateLink:function (repository, items) {
            var linkRecordDialog = new ier_dialog_LinkRecordDialog();
            linkRecordDialog.startup();
            linkRecordDialog.show(repository, items);
            ier_util_dialog.manage(linkRecordDialog);
        }, actionIERReopen:function (repository, items, callback, teamspace, resultSet, parameterMap, action) {
            var widget = parameterMap ? parameterMap.widget : null;
            var shouldRefreshParent = widget instanceof ier.widget.FolderTree ? true : false;
            if (items) {
                if (items instanceof Array) {
                    for (var i in items) {
                        items[i].reopen(null, shouldRefreshParent);
                    }
                } else {
                    items.reopen(null, shouldRefreshParent);
                }
            }
        }, actionIERDelete:function (repository, items) {
            var message = ier_messages.delete_single_confirmation_question;
            if (items.length > 1) {
                message = dojo_string.substitute(ier_messages.delete_multiple_confirmation_question, [items.length]);
            }
            var confirmDelete = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.delete_confirmation_button, onExecute:function () {
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    var successItemIds = response ? response.success : null;
                    var successItems = [];
                    for (var i in items) {
                        var p8Id = items[i].id.split(",")[2];
                        if (successItems && successItemIds[p8Id]) {
                            items[i].deleted = true;
                            successItems.push(items[i]);
                        }
                    }
                    repository.onChange(successItems);
                    ecm.model.desktop.removeFavorites(dojo_array.map(successItems, ecm_model_Favorite.createFromItem));
                }));
                params.requestParams[ier_constants.Param_NumberOfDocuments] = items.length;
                for (var i in items) {
                    params.requestParams[ier_constants.Param_DocId + i] = items[i].id;
                    var type = (items[i].template == ier_constants.ClassName_ReportDefinition) ? items[i].entityType : items[i].getEntityType();
                    params.requestParams[ier_constants.Param_EntityType + i] = type;
                }
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_Delete, ier_constants.PostEncoding, params);
            }});
            confirmDelete.startup();
            confirmDelete.show();
            ier_util_dialog.manage(confirmDelete);
        }, actionIERRunReport:function (repository, items) {
            if (repository && items) {
                if (items[0].id) {
                    var itemId = (items[0].id.indexOf(",") == -1) ? items[0].id : items[0].id.split(",")[2];
                    ier_util.runReport(repository, itemId);
                }
            }
        }, actionIERUndeclare:function (repository, items) {
            var message = ier_messages.undeclare_single_confirmation_question;
            if (items.length > 1) {
                message = dojo_string.substitute(ier_messages.undeclare_multiple_confirmation_question, [items.length]);
            }
            var confirmUndeclare = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.undeclare_confirmation_button, onExecute:function () {
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    for (var i in items) {
                        items[i].deleted = true;
                    }
                    repository.onChange(items);
                    ecm.model.desktop.removeFavorites(dojo_array.map(items, ecm_model_Favorite.createFromItem));
                }));
                params.requestParams[ier_constants.Param_NumberOfDocuments] = items.length;
                for (var i in items) {
                    params.requestParams[ier_constants.Param_DocId + i] = items[i].id;
                }
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_Undeclare, ier_constants.PostEncoding, params);
            }});
            confirmUndeclare.startup();
            confirmUndeclare.show();
            ier_util_dialog.manage(confirmUndeclare);
        }, actionIERRelocate:function (repository, items) {
            var relocateRecordContainerDialog = new ier_dialog_RelocateRecordContainerDialog();
            relocateRecordContainerDialog.startup();
            relocateRecordContainerDialog.show(repository, items);
            ier_util_dialog.manage(relocateRecordContainerDialog);
        }, actionIERFile:function (repository, items) {
            var fileRecordDialog = new ier_dialog_FileRecordDialog();
            fileRecordDialog.startup();
            fileRecordDialog.show(repository, items);
            ier_util_dialog.manage(fileRecordDialog);
        }, actionIERCopy:function (repository, items) {
            var item = items && items[0];
            if (item) {
                var entityType = (item.getEntityType) ? item.getEntityType() : item.entityType;
                switch (entityType) {
                  case ier_constants.EntityType_ReportDefinition:
                    dialog = new ier_dialog_ReportDefinitionDialog();
                    dialog.startup();
                    dialog.show(repository, item, true);
                    ier_util_dialog.manage(dialog);
                    break;
                  default:
                    var copyRecordDialog = new ier_dialog_CopyRecordDialog();
                    copyRecordDialog.startup();
                    copyRecordDialog.show(repository, items);
                    ier_util_dialog.manage(copyRecordDialog);
                    break;
                }
            }
        }, actionIERPlaceOnHold:function (repository, items) {
            var dialog = new ier_dialog_PlaceOnHoldDialog();
            dialog.startup();
            dialog.show(repository, items);
            ier_util_dialog.manage(dialog);
        }, actionIERRemoveHold:function (repository, items) {
            var dialog = new ier_dialog_RemoveHoldDialog();
            dialog.startup();
            dialog.show(repository, items);
            ier_util_dialog.manage(dialog);
        }, actionIERRemoveHoldOnViewEntities:function (repository, items) {
            var message = ier_messages.remove_hold_single_confirmation_question;
            if (items.length > 1) {
                message = dojo_string.substitute(ier_messages.remove_hold_multiple_confirmation_question, [items.length]);
            }
            var confirmRemoveHold = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.remove_hold_confirmation_button, onExecute:function () {
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    dojo_lang.isFunction(ecm.model.desktop.ierHoldIsRemoved) && ecm.model.desktop.ierHoldIsRemoved(items);
                }));
                var holdables = dojo_array.map(items, function (item) {
                    return {id:item.id, entityType:item.getEntityType()};
                });
                params.requestParams[ier_constants.Param_Holdables] = dojo_json.toJson(holdables);
                var hold = {id:items[0].removeHold};
                params.requestParams[ier_constants.Param_Holds] = dojo_json.toJson([hold]);
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_RemoveHold, ier_constants.PostEncoding, params);
            }});
            confirmRemoveHold.startup();
            confirmRemoveHold.show();
            ier_util_dialog.manage(confirmRemoveHold);
        }, actionIERMove:function (repository, items) {
            var moveRecordDialog = new ier_dialog_MoveRecordDialog();
            moveRecordDialog.startup();
            moveRecordDialog.show(repository, items);
            ier_util_dialog.manage(moveRecordDialog);
        }, actionIERAddHold:function (repository) {
            var dialog = new ier_dialog_AddHoldDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERViewEntitiesOnHoldDialog:function (repository, items) {
            var dialog = new ier_dialog_ViewEntitiesOnHoldDialog();
            dialog.startup();
            dialog.show(repository, items);
            ier_util_dialog.manage(dialog);
        }, actionIERInitiateRemoveHoldRequest:function (repository, items) {
            var message = ier_messages.initiate_removeHold_request_confirmation_question;
            var confirmdialog = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.initiate_removeHold_request_confirmation_button, onExecute:function () {
                var item = items[0];
                var holdId = item.id;
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    item.retrieveAttributes(dojo_lang.hitch(this, function () {
                        item.refresh();
                    }), false, true);
                }));
                params.requestParams[ier_constants.Param_HoldId] = holdId;
                params.requestParams[ier_constants.Param_Dynamic_Hold_Task] = "initiate_remove_hold_request";
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_DynamicHoldRequstService, ier_constants.PostEncoding, params);
            }});
            confirmdialog.startup();
            confirmdialog.show();
            ier_util_dialog.manage(confirmdialog);
        }, actionIERCancelRemoveHoldRequest:function (repository, items) {
            var message = ier_messages.cancel_removeHold_request_confirmation_question;
            var confirmdialog = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.cancel_removeHold_request_confirmation_button, onExecute:function () {
                var item = items[0];
                var holdId = item.id;
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    item.retrieveAttributes(dojo_lang.hitch(this, function () {
                        item.refresh();
                    }), false, true);
                }));
                params.requestParams[ier_constants.Param_HoldId] = holdId;
                params.requestParams[ier_constants.Param_Dynamic_Hold_Task] = "cancel_remove_hold_request";
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_DynamicHoldRequstService, ier_constants.PostEncoding, params);
            }});
            confirmdialog.startup();
            confirmdialog.show();
            ier_util_dialog.manage(confirmdialog);
        }, actionIERActivateHoldSweepProcessing:function (repository, items) {
            var message = ier_messages.activate_sweep_hold_processing_confirmation_question;
            var confirmdialog = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.activate_sweep_hold_processing_confirmation_button, onExecute:function () {
                var item = items[0];
                var holdId = item.id;
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    item.retrieveAttributes(dojo_lang.hitch(this, function () {
                        item.refresh();
                    }), false, true);
                }));
                params.requestParams[ier_constants.Param_HoldId] = holdId;
                params.requestParams[ier_constants.Param_Dynamic_Hold_Task] = "activate_sweep_hold_processing";
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_DynamicHoldRequstService, ier_constants.PostEncoding, params);
            }});
            confirmdialog.startup();
            confirmdialog.show();
            ier_util_dialog.manage(confirmdialog);
        }, actionIERAddLocation:function (repository) {
            var dialog = new ier_dialog_AddLocationDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERAddNamingPattern:function (repository) {
            var dialog = new ier_dialog_AddNamingPatternDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERAddDispositionSchedule:function (repository) {
            var dialog = new ier_dialog_AddDispositionScheduleDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERAddReportDefinition:function (repository) {
            var dialog = new ier_dialog_AddReportDefinitionDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionIERAddDispositionAction:function (repository) {
            var dialog = new ier_dialog_AddActionDialog();
            dialog.startup();
            dialog.show(repository);
            ier_util_dialog.manage(dialog);
        }, actionOpenICNDocumentProperty:function (doc) {
            var docObjectStoreId = doc.documentObjectStoreId;
            var docId = doc.docId;
            var connectionURL = doc.ceEJBURL;
            var docRepo = ier_util.getRepository(docObjectStoreId, connectionURL);
            if (docRepo != null) {
                docRepo.retrieveItem(docId, dojo_lang.hitch(this, function (itemRetrieved) {
                    var dialog = new ecm_widget_dialog_EditPropertiesDialog();
                    dialog.startup();
                    dialog.show(itemRetrieved);
                    ier_util_dialog.manage(dialog);
                }));
            }
        }, actionIERViewDocumentInfo:function (repository, items) {
            var item = items[0];
            var recordId = item.id;
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (response != null && !response.error) {
                    var documents = response.documents;
                    if (documents.length == 1) {
                        var doc = documents[0];
                        this.actionOpenICNDocumentProperty(doc);
                    } else {
                        this._actionSelectOneOfDocumentDialog(false, documents, recordId);
                    }
                } else {
                    var errorType = response.error;
                    if (errorType != null && errorType == "noDocument") {
                        var message = ier_messages.noDocumentRecord;
                        this._messageDialog && this._messageDialog.destroy();
                        this._messageDialog = new ecm_dialog_MessageDialog({text:message});
                        this._messageDialog.startup();
                        this._messageDialog.show();
                        ier_util_dialog.manage(this._messageDialog);
                    }
                }
            }));
            params.requestParams[ier_constants.Param_RecordId] = recordId;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetDocumentInfo, ier_constants.PostEncoding, params);
        }, _actionSelectOneOfDocumentDialog:function (viewContent, documents, recordId) {
            var dialogRoot = dojo_construct.create("div", {className:"selectDocDialog"});
            var check = true;
            for (var i = 0; i < documents.length; i++) {
                doc = documents[i];
                var radioDiv = dojo_construct.create("div", {className:"selectDocRadio"}, dialogRoot);
                var idDoc = doc.docId + "_radio_document";
                new RadioButton({checked:check, name:recordId + "_selectDocument", value:i.toString()}, idDoc).placeAt(radioDiv);
                check = false;
                dojo_construct.create("label", {"for":idDoc, innerHTML:doc.docName}, radioDiv);
            }
            var buttonArea = dojo_construct.create("div", {className:"selectDocDialogButtonArea"}, dialogRoot);
            var okButton = new Button({label:"OK"}).placeAt(buttonArea);
            var cancelButton = new Button({label:"Cancel"}).placeAt(buttonArea);
            okButton.on("click", dojo_lang.hitch(this, function (e) {
                var radioList = document.getElementsByName(recordId + "_selectDocument");
                var checkedId = null;
                for (var i = 0; i < radioList.length; i++) {
                    if (radioList[i].checked) {
                        checkedId = radioList[i].value;
                        break;
                    }
                }
                checkedId && viewContent ? this.actionOpenICNRecordContent(documents[checkedId - 0]) : this.actionOpenICNDocumentProperty(documents[checkedId - 0]);
                this._docSelectdialog.hide();
            }));
            cancelButton.on("click", dojo_lang.hitch(this, function (e) {
                this._docSelectdialog.hide();
            }));
            this._docSelectdialog && this._docSelectdialog.destroy();
            this._docSelectdialog = new Dialog({title:ier_messages.selectDocument, content:dialogRoot});
            this._docSelectdialog.show();
            ier_util_dialog.manage(this._docSelectdialog);
        }, actionOpenICNRecordContent:function (doc) {
            var docObjectStoreId = doc.documentObjectStoreId;
            var docId = doc.docId;
            var connectionURL = doc.ceEJBURL;
            var docRepo = ier_util.getRepository(docObjectStoreId, connectionURL);
            if (docRepo != null) {
                docRepo.retrieveItem(docId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this.actionView(docRepo, [itemRetrieved]);
                }));
            }
        }, actionIEROpenRecordContent:function (repository, items) {
            var item = items[0];
            var recordId = item.id;
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (response != null && !response.error) {
                    var documents = response.documents;
                    if (documents.length == 1) {
                        var doc = documents[0];
                        this.actionOpenICNRecordContent(doc);
                    } else {
                        this._actionSelectOneOfDocumentDialog(true, documents, recordId);
                    }
                } else {
                    var errorType = response.error;
                    if (errorType != null && errorType == "noDocument") {
                        var message = ier_messages.noDocumentRecord;
                        if (this._messageDialog) {
                            this._messageDialog.destroy();
                        }
                        this._messageDialog = new ecm_dialog_MessageDialog({text:message});
                        this._messageDialog.startup();
                        this._messageDialog.show();
                        ier_util_dialog.manage(this._messageDialog);
                    }
                }
            }));
            params.requestParams[ier_constants.Param_RecordId] = recordId;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetDocumentInfo, ier_constants.PostEncoding, params);
        }, actionTaskDelete:function (repository, items, callback, teamspace, resultSet, parameterMap) {
            if (items) {
                var message = ier_messages.delete_single_confirmation_question;
                if (items.length > 1) {
                    message = dojo_string.substitute(ier_messages.delete_multiple_confirmation_question, [items.length]);
                }
                var confirmDelete = new ecm_widget_dialog_ConfirmationDialog({text:message, buttonLabel:ier_messages.delete_confirmation_button, onExecute:function () {
                    for (var i in items) {
                        var item = items[i];
                        if (item instanceof ecm.model.AsyncTask) {
                            item.deleteTask();
                        }
                    }
                }});
                confirmDelete.startup();
                confirmDelete.show();
                ier_util_dialog.manage(confirmDelete);
            }
        }, actionTaskRefresh:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask) {
                    item.detailsLoaded = false;
                    item.recurringTaskInstances = null;
                    item.getDetails(dojo_lang.hitch(this, function () {
                        item.onChange([item]);
                    }));
                }
            }
        }, actionTaskDisable:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask && item.isTaskRecurring()) {
                    item.getDetails(dojo_lang.hitch(this, function () {
                        if (item.attributes[ier_constants.Attribute_Status] == ier_constants.TaskStatus_Scheduled) {
                            item.pause();
                        } else {
                            var messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.taskPane_unableToDisable});
                            messageDialog.startup();
                            messageDialog.show();
                            ier_util_dialog.manage(messageDialog);
                        }
                        item.onChange([item]);
                    }), true);
                }
            }
        }, actionTaskEnable:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask && item.isTaskRecurring()) {
                    item.getDetails(dojo_lang.hitch(this, function () {
                        if (item.attributes[ier_constants.Attribute_Status] == ier_constants.TaskStatus_Paused) {
                            item.reschedule(dojo_lang.hitch(this, function () {
                                item.refresh();
                                if (callback) {
                                    callback();
                                }
                            }));
                        } else {
                            var messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.taskPane_unableToEnable});
                            messageDialog.startup();
                            messageDialog.show();
                            ier_util_dialog.manage(messageDialog);
                        }
                        item.onChange([item]);
                    }), true);
                }
            }
        }, actionTaskModify:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask || item instanceof ecm.model.AsyncTaskInstance) {
                    if (item.attributes.type == ier_constants.TaskType_ReportClass) {
                        item.getDetails(dojo_lang.hitch(this, function () {
                            var reportDialog = new ier_widget_ReScheduleReportWizardDialog({data:item.taskRequest, task:item});
                            reportDialog.startup();
                            reportDialog.show();
                            ier_util_dialog.manage(reportDialog);
                            item.onChange([item]);
                        }));
                    } else {
                        if (item.attributes.type == ier_constants.TaskType_DDConversionClass) {
                            item.getDetails(dojo_lang.hitch(this, function () {
                                var dialog = new ScheduleDDContainerConversionWizard({task:item});
                                dialog.set("taskSchedule", ier_util.createTaskSchedule(item));
                                var retentionPeriod = item.taskRequest.specificTaskRequest[ier_constants.Param_RetentionPeriod];
                                if (!retentionPeriod) {
                                    retentionPeriod = item.taskRequest.specificTaskRequest[ier_constants.Param_RetentionPeriodYears] + "-" + item.taskRequest.specificTaskRequest[ier_constants.Param_RetentionPeriodMonths] + "-" + item.taskRequest.specificTaskRequest[ier_constants.Param_RetentionPeriodDays];
                                }
                                var defensibleDisposalSchedule = new DefensibleDisposalSchedule({"retentionTriggerPropertyName":item.taskRequest.specificTaskRequest[ier_constants.Param_RetentionTriggerPropertyName], "retentionPeriod":retentionPeriod});
                                var p8repositoryId = item.taskRequest.specificTaskRequest[ier_constants.Param_P8RepositoryId];
                                var connectionURL = item.taskRequest.specificTaskRequest["ceEJBURL"];
                                var containerId = item.taskRequest.specificTaskRequest[ier_constants.Param_ContainerId];
                                var repository = ier_util.getRepository(p8repositoryId, connectionURL);
                                try {
                                    repository.retrieveItem(containerId, dojo_lang.hitch(this, function (itemRetrieved) {
                                        dialog.startup();
                                        dialog.show(repository, itemRetrieved);
                                        ier_util_dialog.manage(dialog);
                                        dialog.set("schedule", defensibleDisposalSchedule);
                                    }));
                                }
                                catch (e) {
                                    dialog.startup();
                                    dialog.show(repository);
                                    ier_util_dialog.manage(dialog);
                                    dialog.set("schedule", defensibleDisposalSchedule);
                                }
                                item.onChange([item]);
                            }));
                        } else {
                            if (item.attributes.type == ier_constants.TaskType_DDReportSweepClass) {
                                item.getDetails(dojo_lang.hitch(this, function () {
                                    var dialog = new ScheduleDDSweepReportTaskWizard({task:item});
                                    var p8repositoryId = item.taskRequest.specificTaskRequest[ier_constants.Param_P8RepositoryId];
                                    var connectionURL = item.taskRequest.specificTaskRequest["ceEJBURL"];
                                    var repository = ier_util.getRepository(p8repositoryId, connectionURL);
                                    var properties = {repository:repository, containerIds:item.taskRequest.specificTaskRequest[ier_constants.Param_ContainerId], advancedDays:item.taskRequest.specificTaskRequest["advancedDays"], reportOnly:item.taskRequest.specificTaskRequest["reportOnly"], connectionPoint:item.taskRequest.specificTaskRequest["connectionPointName"], needApproval:item.taskRequest.specificTaskRequest["needApproval"], containerToDeclareRecordId:item.taskRequest.specificTaskRequest["containerToDeclareRecordTo"], defensibleDisposalWorkflowId:item.taskRequest.specificTaskRequest["defensibleDisposalWorkflowId"]};
                                    dialog.startup();
                                    dialog.show(repository);
                                    dialog.set("properties", properties);
                                    dialog.set("schedule", ier_util.createTaskSchedule(item));
                                    ier_util_dialog.manage(dialog);
                                    item.onChange([item]);
                                }));
                            }
                        }
                    }
                }
            }
        }, actionTaskDownload:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask || item instanceof ecm.model.AsyncTaskInstance) {
                    if (item instanceof ecm.model.AsyncTask) {
                        item.getDetails(dojo_lang.hitch(this, function () {
                            this._actionTaskDownload(item, callback);
                            item.onChange([item]);
                        }));
                    } else {
                        this._actionTaskDownload(item, callback);
                    }
                }
            }
        }, _actionTaskDownload:function (item, callback) {
            if (item.results && item.results.reportResultDocumentId) {
                var recordRepository = ier_util.getRepository(item.results.reportResultRepositorySymbolicName, item.taskRequest[ier_constants.Param_CE_EJB_URL]);
                if (recordRepository == null) {
                    var dialog = new ecm_dialog_MessageDialog({text:dojo_string.substitute(ier_messages.fileplanRepositoryNotAvailable, [item.results.reportResultRepositorySymbolicName])});
                    dialog.startup();
                    dialog.show();
                    ier_util_dialog.manage(dialog);
                } else {
                    recordRepository.retrieveItem(item.results.reportResultDocumentId, dojo_lang.hitch(this, function (itemRetrieved) {
                        ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                            if (actionsHandler) {
                                actionsHandler["actionDownload"](recordRepository, [itemRetrieved], callback, null, itemRetrieved.resultSet);
                            }
                        }));
                    }));
                }
            }
        }, actionTaskOpen:function (repository, itemList, callback, teamspace, resultSet, parameterMap, noRefresh) {
            if (itemList) {
                var item = itemList[0];
                if (item instanceof ecm.model.AsyncTask || item instanceof ecm.model.AsyncTaskInstance) {
                    if (this._itemInProgress != item) {
                        this._itemInProgress = item;
                        if (item instanceof ecm.model.AsyncTask && item.isTaskRecurring()) {
                            item.retrieveAsyncTaskInstances(dojo_lang.hitch(this, function (resultSet) {
                                this._itemInProgress = null;
                                if (callback) {
                                    callback(item, resultSet);
                                } else {
                                    ecm.model.desktop.taskManager.onAsyncTaskItemOpened(item, resultSet);
                                }
                            }));
                        } else {
                            this._itemInProgress = null;
                            if (item) {
                                if (item instanceof ecm.model.AsyncTask) {
                                    item.getDetails(dojo_lang.hitch(this, function () {
                                        this._openTask(item, callback);
                                        if (!noRefresh) {
                                            item.onChange([item]);
                                        }
                                    }));
                                } else {
                                    this._openTask(item, callback);
                                }
                            } else {
                                if (callback) {
                                    callback(item, resultSet);
                                } else {
                                    ecm.model.desktop.taskManager.onAsyncTaskItemOpened(item, resultSet);
                                }
                            }
                        }
                    }
                }
            }
        }, _openTask:function (item, callback) {
            var handlerClass = item.attributes[ier_constants.Attribute_Type];
            if (handlerClass == ier_constants.TaskType_ReportClass && item.results && item.results.reportResultDocumentId) {
                var recordRepository = ier_util.getRepository(item.results.reportResultRepositorySymbolicName, item.results.reportResultRepositoryServer);
                recordRepository.retrieveItem(item.results.reportResultDocumentId, dojo_lang.hitch(this, function (itemRetrieved) {
                    ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                        if (actionsHandler) {
                            actionsHandler["actionDownloadAll"](recordRepository, [itemRetrieved], callback);
                        }
                    }));
                }));
            } else {
                if (handlerClass == ier_constants.TaskType_DDConversionClass && item.results) {
                    var repository = ier_util.getRepository(item.results.ier_p8RepositoryId, item.results.ceEJBURL);
                    repository.retrieveItem(item.results[ier_constants.Param_ContainerId], dojo_lang.hitch(this, function (itemRetrieved) {
                        this.actionIERProperties(repository, [itemRetrieved]);
                    }));
                } else {
                    if (handlerClass == ier_constants.TaskType_DDReportSweepClass && item.results) {
                        var dialog = new TaskInformationDialog({item:item});
                        dialog.show();
                        ier_util_dialog.manage(dialog);
                    } else {
                        if (item.errors && item.errors.length) {
                            var dialog = new TaskErrorDialog({item:item});
                            dialog.show();
                            ier_util_dialog.manage(dialog);
                        }
                    }
                }
            }
        }, actionIERScheduleDispositionSweep:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
        }, actionIERScheduleHoldSweep:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
        }, actionIERScheduleReport:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            var reportDialog = new ier_widget_ScheduleReportWizardDialog();
            reportDialog.startup();
            reportDialog.show();
            ier_util_dialog.manage(reportDialog);
        }, actionOpen:function (item, callback) {
            if (item) {
                if (item instanceof ier.model.CategoryTask) {
                    ecm.model.desktop.taskManager.onAsyncTaskItemOpened(item);
                } else {
                    this.inherited(arguments);
                }
            } else {
                this.inherited(arguments);
            }
        }, actionRecordProperties:function (repository, itemList, callback, teamspace, resultSet, parameterMap) {
            if (repository && itemList && itemList.length > 0) {
                var item = itemList[0];
                if (item) {
                    var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                        if (response.recordId && response.fileplanObjectStore) {
                            var recordRepository = ecm.model.desktop.getRepositoryOfObjectStore(response.fileplanObjectStore);
                            if (recordRepository == null) {
                                var dialog = new ecm_dialog_MessageDialog({text:dojo_string.substitute(ier_messages.fileplanRepositoryNotAvailable, [response.fileplanObjectStore])});
                                dialog.startup();
                                dialog.show();
                                ier_util_dialog.manage(dialog);
                            } else {
                                var recordPropertiesDialog = new ier_dialog_RecordPropertiesDialog({isReadOnly:true, showOnlyProperties:true});
                                recordRepository.retrieveItem(response.recordId, dojo_lang.hitch(this, function (itemRetrieved) {
                                    recordPropertiesDialog.startup();
                                    recordPropertiesDialog.show(recordRepository, itemRetrieved);
                                    ier_util_dialog.manage(recordPropertiesDialog);
                                }));
                            }
                        }
                    }));
                    params.requestParams[ier_constants.Param_DocId] = item.id;
                    ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetRecordFromDeclaredDocument, ier_constants.PostEncoding, params);
                }
            }
        }, actionIERDeclare:function (repository, items, callback, workspace, resultSet, parameterMap, actionJS) {
            if (isCompatitibleIERVersion(dojo_lang.hitch(this, function () {
                var parentFolder = null;
                if (items && items.length > 0) {
                    if (!items[0].isFolder()) {
                        parentFolder = items[0].parent;
                    } else {
                        parentFolder = items[0];
                    }
                }
                var declareDialog = new ier.widget.dialog.DeclareRecordDialog();
                declareDialog.startup();
                declareDialog.show(repository, items, parentFolder);
                ier_util_dialog.manage(declareDialog);
            }))) {
            }
        }, actionConvertToDDContainer:function (repository, items, callback, workspace, resultSet, parameterMap, actionJS) {
            var dialog = new ScheduleDDContainerConversionWizard();
            var item = items && items[0] ? items[0] : null;
            dialog.startup();
            dialog.show(repository, item);
            ier_util_dialog.manage(dialog);
        }, actionScheduleDDSweepReportTask:function (repository, items, callback, workspace, resultSet, parameterMap, actionJS) {
            var dialog = new ScheduleDDSweepReportTaskWizard();
            var item = items && items[0] ? items[0] : null;
            dialog.show(repository, item);
            ier_util_dialog.manage(dialog);
        }, actionIERInitiateDisposition:function (repository, items, callback, workspace, resultSet, parameterMap, actionJS) {
            var ids = [];
            var entityTypes = [];
            for (var i in items) {
                var item = items[i];
                if (item instanceof ier.model._BaseEntityObject) {
                    ids.push(ier_util.getGuidId(item.id));
                    entityTypes.push(item.getEntityType());
                }
            }
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (response.message) {
                    var messageDialog = new ecm_dialog_MessageDialog({text:response.message, style:"width: 50%;"});
                    messageDialog.startup();
                    messageDialog.show();
                    ier_util_dialog.manage(messageDialog);
                }
                dojo_array.forEach(items, function (item) {
                    item.retrieveAttributes(null, true, true);
                });
            }));
            params.requestParams[ier_constants.Param_NumberOfDocuments] = items.length;
            params.requestParams[ier_constants.Param_Id] = ier_util.arrayToString(ids);
            params.requestParams[ier_constants.Param_EntityType] = ier_util.arrayToString(entityTypes);
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, "ierInitiateDispositionService", ier_constants.PostEncoding, params);
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemDetailPane.html":"<div class=\"ierEntityitemDetailsPane\" style=\"margin-top: 10px;\">\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\"\r\n\t\ttitle=\"${messages.system_properties_title}\"\r\n\t\tdata-dojo-props=\"open: true\"\r\n\t\tdata-dojo-attach-point=\"_systemPropPane\">\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_disposition}\"\r\n\t\tdata-dojo-props=\"open: true\"\r\n\t\tdata-dojo-attach-point=\"_dispositionPane\">\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_vital}\"\r\n\t\tdata-dojo-props=\"open: true\"\r\n\t\tdata-dojo-attach-point=\"_vitalPane\">\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_physical}\"\r\n\t\tdata-dojo-props=\"open: true\"\r\n\t\tdata-dojo-attach-point=\"_physicalPane\">\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\"\r\n\t\ttitle=\"${_messages.entityItemDetailPane_label_additionalRecordDetails}\"\r\n\t\tdata-dojo-props=\"open: false\"\r\n\t\tdata-dojo-attach-point=\"_additionalPane\">\r\n\t</div>\r\n</div>", "ier/widget/panes/ReportDefinitionQueryPane":function () {
    require({cache:{"url:ier/widget/panes/templates/ReportDefinitionQueryPane.html":"<div class=\"ierEntityItemPropertiesPane\">\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t<table data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-attach-point=\"_paraGrid\" data-dojo-props=\"autoWidth:true\" style=\"display:none;\"><thead><tr>\r\n\t\t<th field=\"propertyName\" width=\"16em\">${ier_messages.reportDefinitionDialog_SelectedProperty}</th>\r\n\t\t<th field=\"symName\" width=\"16em\">${ier_messages.reportDefinitionDialog_SQLPropertyName}</th>\r\n\t\t<th field=\"isReq\" width=\"6em\" editable=\"true\" cellType=\"dojox.grid.cells.Bool\">${ier_messages.reportDefinitionDialog_Required}</th>\r\n\t\t</tr></thead></table> \r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"commonSQLPane\" style=\"display:none; margin-top:20px\">\r\n\t\t<label data-dojo-attach-point=\"_sqlAreaTitle\" for=\"${id}_sqlArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t<textarea id=\"${id}_sqlArea\" data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t<br><textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlArea2\" rows=\"6\" cols=\"80\" style=\"width:auto\" style=\"display:none\"></textarea>\r\n\t</div>\r\n\t\t\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\" data-dojo-attach-point=\"rmentitySQLPane\" style=\"display:none; margin-top:20px\">\t\t\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_Record}\" data-dojo-attach-point=\"_recordTitlePane\" class=\"ierPropertiesTitlePane\"  data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_RecordCategory}\" data-dojo-attach-point=\"_recordCategoryTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordCateogryArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordCateogryArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_RecordFolder}\" data-dojo-attach-point=\"_recordFolderTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordFolderArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordFolderArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_Volume}\" data-dojo-attach-point=\"_volumeTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlVolArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlVolArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t</div>\r\n</div>"}});
    define("ier/widget/panes/ReportDefinitionQueryPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/event", "dojo/keys", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/data/ItemFileWriteStore", "idx/data/JsonStore", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialogPane", "ier/util/dialog", "dojo/text!./templates/ReportDefinitionQueryPane.html", "dijit/layout/ContentPane", "dojox/grid/DataGrid", "dojox/grid/cells/_base", "dijit/form/SimpleTextarea"], function (dojo_declare, dojo_lang, dojo_array, dojo_connect, dojo_event, dojo_keys, domClass, geometry, domStyle, ItemFileWriteStore, idx_data_JsonStore, ier_constants, ier_messages, ier_util, ier_widget_IERBaseDialogPane, ier_util_dialog, templateString) {
        return dojo_declare("ier.widget.panes.ReportDefinitionQueryPane", [ier_widget_IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, _paras:[], ier_messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.title = ier_messages.reportDefinitionDialog_ReportSQL;
            dojo_connect.connect(this, "onKeyDown", function (evt) {
                if (evt.keyCode == dojo_keys.ENTER) {
                    evt.stopPropagation();
                }
            });
            this.setTitlePaneFocusNodeHeight();
        }, createRendering:function (repository, reportDefinition) {
            this.repository = repository;
            domStyle.set(this._paraGrid.domNode, "display", "");
            domStyle.set(this.commonSQLPane.domNode, "display", "");
            domStyle.set(this._sqlArea2.domNode, "display", "none");
            var selectedItems = [];
            if (reportDefinition) {
                var params = reportDefinition.getParameters();
                if (params) {
                    dojo_array.forEach(params, function (param) {
                        selectedItems.push({label:param.displayname, value:param.symname, isreq:param.isreq});
                    });
                }
            }
            this.setGridItems(selectedItems);
            if (reportDefinition) {
                var queries = reportDefinition.getQueries();
                if (queries && queries.length > 0) {
                    for (var i = 0; i < queries.length; i++) {
                        var query = queries[i];
                        if (query.entity_type == ier_constants.ClassName_RecordCategory) {
                            this._sqlRecordCateogryArea.set("value", query.sql[0]);
                        } else {
                            if (query.entity_type == ier_constants.ClassName_RecordFolder) {
                                this._sqlRecordFolderArea.set("value", query.sql[0]);
                            } else {
                                if (query.entity_type == "Record") {
                                    this._sqlRecordArea.set("value", query.sql[0]);
                                } else {
                                    if (query.entity_type == ier_constants.ClassName_Volume) {
                                        this._sqlVolArea.set("value", query.sql[0]);
                                    } else {
                                        this._sqlArea.set("value", query.sql[0]);
                                        if (query.sql && query.sql.length > 1) {
                                            domStyle.set(this._sqlArea2.domNode, "display", "");
                                            this._sqlArea2.set("value", query.sql[1]);
                                            this._sqlAreaTitle.innerHTML = ier_messages.reportDefinitionDialog_SQLQueryStatements + ":";
                                        } else {
                                            domStyle.set(this._sqlArea2.domNode, "display", "none");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.onCompleteRendering();
        }, setGridItems:function (items) {
            var gridItems = [];
            if (this._paraGrid.store) {
                this._paraGrid.store.fetch({onComplete:dojo_lang.hitch(this, "_fetchStoreData")});
            }
            if (items) {
                for (var i = 0; i < items.length; i++) {
                    var isreq = (items[i].isreq) ? items[i].isreq : false;
                    for (var j = 0; j < this._paras.length; j++) {
                        if (items[i].value == this._paras[j].name) {
                            isreq = this._paras[j].isreq;
                        }
                    }
                    if (items[i].value == ier_constants.Property_HoldName) {
                        items[i].value = ier_constants.ReportEntry_hold_name;
                    }
                    gridItems.push({propertyName:items[i].label, symName:items[i].value, isReq:isreq});
                }
            }
            this._availableItemsStore = new idx_data_JsonStore({data:gridItems});
            this._paraGrid.setStore(this._availableItemsStore);
            var _hasEntityTypeProperty = dojo_array.some(gridItems, function (item) {
                return (item.symName == ier_constants.ReportEntry_rm_entity_type);
            });
            domStyle.set(this.commonSQLPane.domNode, "display", (_hasEntityTypeProperty ? "none" : ""));
            domStyle.set(this.rmentitySQLPane.domNode, "display", (_hasEntityTypeProperty ? "" : "none"));
        }, _fetchStoreData:function (items) {
            this._paras = [];
            dojo.forEach(items, dojo_lang.hitch(this, function (item, index) {
                var propertyName = item.propertyName[0];
                var symName = item.symName[0];
                var isReq = item.isReq[0];
                if (symName == ier_constants.ReportEntry_rm_entity_type) {
                    var entityTypes = [];
                    var sqlRec = this._sqlRecordArea.get("value").trim();
                    var sqlCate = this._sqlRecordCateogryArea.get("value").trim();
                    var sqlFolder = this._sqlRecordFolderArea.get("value").trim();
                    var sqlVol = this._sqlVolArea.get("value").trim();
                    if (sqlRec.length > 0) {
                        entityTypes.push({name:"Record", label:ier_messages.reportDefinitionDialog_Record});
                    }
                    if (sqlCate.length > 0) {
                        entityTypes.push({name:ier_constants.ClassName_RecordCategory, label:ier_messages.reportDefinitionDialog_RecordCategory});
                    }
                    if (sqlFolder.length > 0) {
                        entityTypes.push({name:ier_constants.ClassName_RecordFolder, label:ier_messages.reportDefinitionDialog_RecordFolder});
                    }
                    if (sqlVol.length > 0) {
                        entityTypes.push({name:ier_constants.ClassName_Volume, label:ier_messages.reportDefinitionDialog_Volume});
                    }
                    this._paras.push({label:propertyName, name:symName, isreq:isReq, value:entityTypes});
                } else {
                    this._paras.push({label:propertyName, name:symName, isreq:isReq});
                }
            }));
        }, getQueries:function () {
            this._paraGrid.store.fetch({onComplete:dojo_lang.hitch(this, "_fetchStoreData")});
            var _hasEntityTypeProperty = dojo_array.some(this._paras, function (item) {
                return (item.name == ier_constants.ReportEntry_rm_entity_type);
            });
            var sqls = [];
            if (_hasEntityTypeProperty) {
                var sqlRec = this._sqlRecordArea.get("value").trim();
                var sqlCate = this._sqlRecordCateogryArea.get("value").trim();
                var sqlFolder = this._sqlRecordFolderArea.get("value").trim();
                var sqlVol = this._sqlVolArea.get("value").trim();
                if (sqlRec.length > 0) {
                    sqls.push({sql:[sqlRec], entity:"Record"});
                }
                if (sqlCate.length > 0) {
                    sqls.push({sql:[sqlCate], entity:ier_constants.ClassName_RecordCategory});
                }
                if (sqlFolder.length > 0) {
                    sqls.push({sql:[sqlFolder], entity:ier_constants.ClassName_RecordFolder});
                }
                if (sqlVol.length > 0) {
                    sqls.push({sql:[sqlVol], entity:ier_constants.ClassName_Volume});
                }
            } else {
                var sqlstmt2 = this._getSecondSQL();
                if (sqlstmt2 != null && sqlstmt2.length > 0) {
                    sqls.push({sql:[this._sqlArea.get("value").trim(), sqlstmt2], entity:""});
                } else {
                    sqls.push({sql:[this._sqlArea.get("value").trim()], entity:""});
                }
            }
            var queries = {parameters:this._paras, sqlstmts:sqls};
            return queries;
        }, _getSecondSQL:function () {
            var area2Display = domStyle.get(this._sqlArea2.domNode, "display");
            if (area2Display == null || area2Display == "none") {
                return null;
            }
            var sql2 = this._sqlArea2.get("value");
            if (sql2) {
                sql2 = sql2.trim();
            }
            return sql2;
        }, _validateInput:function () {
            var _valid = false;
            if (this._paraGrid.store) {
                this._paraGrid.store.fetch({onComplete:dojo_lang.hitch(this, "_fetchStoreData")});
            }
            var _hasEntityTypeProperty = false;
            if (this._paras) {
                _hasEntityTypeProperty = dojo_array.some(this._paras, function (item) {
                    return (item.name == ier_constants.ReportEntry_rm_entity_type);
                });
            }
            if (_hasEntityTypeProperty) {
                var sqlRec = this._sqlRecordArea.get("value").trim();
                var sqlCate = this._sqlRecordCateogryArea.get("value").trim();
                var sqlFolder = this._sqlRecordFolderArea.get("value").trim();
                var sqlVol = this._sqlVolArea.get("value").trim();
                _valid = ((sqlRec != null && sqlRec.length > 0) || (sqlCate != null && sqlCate.length > 0) || (sqlFolder != null && sqlFolder.length > 0) || (sqlVol != null && sqlVol.length > 0));
            } else {
                var sqlCommon = this._sqlArea.get("value").trim();
                var sqlCommon2 = this._getSecondSQL();
                _valid = ((sqlCommon != null && sqlCommon.length > 0) || (sqlCommon2 != null && sqlCommon2.length > 0));
            }
            if (!_valid) {
                if (_hasEntityTypeProperty) {
                    ier_util_dialog.showMessage(ier_messages.reportDefDialog_noSQLError1);
                } else {
                    ier_util_dialog.showMessage(ier_messages.reportDefDialog_noSQLError2);
                }
            }
            return _valid;
        }, setTitlePaneFocusNodeHeight:function () {
            if (this._recordTitlePane.focusNode) {
                var _h = domStyle.get(this._recordTitlePane.focusNode, "height");
                if (_h == 0) {
                    domStyle.set(this._recordTitlePane.focusNode, "height", "15px");
                }
            }
            if (this._recordCategoryTitlePane.focusNode) {
                var _h = domStyle.get(this._recordCategoryTitlePane.focusNode, "height");
                if (_h == 0) {
                    domStyle.set(this._recordCategoryTitlePane.focusNode, "height", "15px");
                }
            }
            if (this._recordFolderTitlePane.focusNode) {
                var _h = domStyle.get(this._recordFolderTitlePane.focusNode, "height");
                if (_h == 0) {
                    domStyle.set(this._recordFolderTitlePane.focusNode, "height", "15px");
                }
            }
            if (this._volumeTitlePane.focusNode) {
                var _h = domStyle.get(this._volumeTitlePane.focusNode, "height");
                if (_h == 0) {
                    domStyle.set(this._volumeTitlePane.focusNode, "height", "15px");
                }
            }
        }, resize:function (changeSize) {
            var size = geometry.getContentBox(this.domNode);
            this._paraGrid.resize({w:300, h:144});
        }, onCompleteRendering:function () {
        }});
    });
}, "ier/widget/dialog/AddHoldDialog":function () {
    define(["dojo/_base/declare", "dojo/aspect", "dojo/dom-class", "dojo/dom-geometry", "ier/widget/dialog/HoldDialog", "dojo/text!./templates/AddHoldDialogContent.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "idx/layout/TitlePane"], function (declare, aspect, domClass, domGeom, HoldDialog, AddHoldDialogContent_html) {
        return declare(HoldDialog, {contentString:AddHoldDialogContent_html, postCreate:function () {
            this.inherited(arguments);
            var _this = this;
            this.own(this._propertyTitlePane.watch("open", function (prop, old, current) {
                _this.defer(_this.resize, _this._propertyTitlePane.duration * 2);
            }), this._conditionTitlePane.watch("open", function (prop, old, current) {
                _this.defer(function () {
                    if (current) {
                        var selectedNode = _this._conditionPane._conditionTabContainer.selectedChildWidget.domNode;
                        domClass.replace(selectedNode, "dijitVisible", "dijitHidden");
                    }
                    _this.resize();
                }, _this._conditionTitlePane.duration * 2);
            }));
        }, resize:function () {
            this.inherited(arguments);
            var contentAreaSize = domGeom.getMarginBox(this.contentArea);
            var propertyTitlePaneSize = {h:(this._propertyTitlePane.open ? 213 : 53)};
            var conditionHeight = contentAreaSize.h - propertyTitlePaneSize.h;
            this._conditionTitlePane.resize({h:Math.max(0, conditionHeight - 10)});
            this._conditionPane._conditionTabContainer.resize({h:Math.max(0, conditionHeight - 73)});
        }, });
    });
}, "ier/util/util":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/date/stamp", "dojo/string", "dojo/io-query", "ecm/widget/dialog/MessageDialog", "ecm/LoggerMixin", "ecm/Messages", "ecm/model/ContentItem", "ecm/model/Desktop", "ecm/model/Message", "ecm/model/Repository", "ecm/model/Request", "ier/constants", "ier/util/dialog", "ier/messages"], function (dojo_declare, dojo_lang, dojo_date_stamp, dojo_string, dojo_ioQuery, ecm_dialog_MessageDialog, ecm_LoggerMixin, ecm_messages, ecm_model_ContentItem, ecm_model_desktop, ecm_model_Message, ecm_model_Repository, Request, ier_constants, ier_util_dialog, ier_messages) {
        var _Util = dojo_declare("ier.util._Util", [ecm_LoggerMixin], {getIconClass:function (item) {
            var iconCss;
            if (item.isIERFavorite && item.item) {
                item = item.item;
            }
            var properties = item;
            var attributes = item.attributes;
            var className = properties.template;
            var entityType = item instanceof ier.model._BaseEntityObject ? item.getEntityType() : null;
            if (className == ier_constants.ClassName_RecordsManagementFolder) {
                iconCss = "folderIcon";
            } else {
                if (className == ier_constants.ClassName_FilePlan || entityType == ier_constants.EntityType_FilePlan) {
                    iconCss = "filePlanIcon";
                } else {
                    if (entityType == ier_constants.EntityType_RecordCategory || className == ier_constants.ClassName_RecordCategory) {
                        iconCss = "recordCategoryIcon";
                    } else {
                        if (entityType == ier_constants.EntityType_ElectronicRecordFolder || className == ier_constants.ClassName_ElectronicRecordFolder) {
                            iconCss = "recordElectronicFolderIcon";
                        } else {
                            if (entityType == ier_constants.EntityType_HybridRecordFolder || className == ier_constants.ClassName_HybridRecordFolder) {
                                iconCss = "recordHybridFolderIcon";
                            } else {
                                if (entityType == ier_constants.EntityType_PhysicalRecordFolder || className == ier_constants.ClassName_PhysicalRecordFolder) {
                                    iconCss = "recordPhysicalFolderIcon";
                                } else {
                                    if (entityType == ier_constants.EntityType_PhysicalContainer || className == ier_constants.ClassName_PhysicalContainer) {
                                        iconCss = "recordBoxIcon";
                                    } else {
                                        if (entityType == ier_constants.EntityType_Volume || className == ier_constants.ClassName_Volume) {
                                            iconCss = "volumeIcon";
                                        } else {
                                            if (entityType == ier_constants.EntityType_Record || entityType == ier_constants.EntityType_ElectronicRecord || className == ier_constants.ClassName_ElectronicRecord) {
                                                iconCss = "electronicRecordIcon";
                                            } else {
                                                if (entityType == ier_constants.EntityType_PhysicalRecord || className == ier_constants.ClassName_PhysicalRecord) {
                                                    iconCss = "physicalRecordIcon";
                                                } else {
                                                    if (entityType == ier_constants.EntityType_EmailRecord || className == ier_constants.ClassName_EmailRecord) {
                                                        iconCss = "emailRecordIcon";
                                                    } else {
                                                        if (entityType == ier_constants.EntityType_DispositionSchedule || className == ier_constants.ClassName_DispositionSchedule) {
                                                            iconCss = "dispositionScheduleIcon";
                                                        } else {
                                                            if (entityType == ier_constants.EntityType_Location || className == ier_constants.ClassName_Location) {
                                                                iconCss = "locationIcon";
                                                            } else {
                                                                if (entityType == ier_constants.EntityType_RecordType || className == ier_constants.ClassName_RecordType) {
                                                                    iconCss = "recordTypeIcon";
                                                                } else {
                                                                    if (entityType == ier_constants.EntityType_TransferMapping || className == ier_constants.ClassName_TransferMapping) {
                                                                        iconCss = "transferMappingIcon";
                                                                    } else {
                                                                        if (entityType == ier_constants.EntityType_DispositionAction || className == ier_constants.ClassName_DispositionAction) {
                                                                            var actionType = attributes[ier_constants.Property_ActionType];
                                                                            if (actionType == null) {
                                                                                iconCss = "dispositionActionIcon";
                                                                            } else {
                                                                                if (actionType == ier_constants.ActionType_Review) {
                                                                                    iconCss = "dispositionActionReviewIcon";
                                                                                } else {
                                                                                    if (actionType == ier_constants.ActionType_Export) {
                                                                                        iconCss = "dispositionActionExportIcon";
                                                                                    } else {
                                                                                        if (actionType == ier_constants.ActionType_Transfer) {
                                                                                            iconCss = "dispositionActionTransferIcon";
                                                                                        } else {
                                                                                            if (actionType == ier_constants.ActionType_Destroy) {
                                                                                                iconCss = "dispositionActionDestroyIcon";
                                                                                            } else {
                                                                                                if (actionType == ier_constants.ActionType_Export) {
                                                                                                    iconCss = "dispositionActionExportIcon";
                                                                                                } else {
                                                                                                    if (actionType == ier_constants.ActionType_InterimTransfer) {
                                                                                                        iconCss = "dispositionActionInterimTransferIcon";
                                                                                                    } else {
                                                                                                        if (actionType == ier_constants.ActionType_Cutoff) {
                                                                                                            iconCss = "dispositionActionCutoffIcon";
                                                                                                        } else {
                                                                                                            if (actionType == ier_constants.ActionType_VitalReview) {
                                                                                                                iconCss = "dispositionActionVitalReviewIcon";
                                                                                                            } else {
                                                                                                                if (actionType == ier_constants.ActionType_AutoDestroy) {
                                                                                                                    iconCss = "dispositionActionAutoDestroyIcon";
                                                                                                                } else {
                                                                                                                    iconCss = "dispositionActionIcon";
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (entityType == ier_constants.EntityType_DispositionTrigger || className == ier_constants.ClassName_DispositionTrigger) {
                                                                                var eventType = attributes[ier_constants.Property_EventType];
                                                                                if (eventType == null) {
                                                                                    iconCss = "dispositionTriggerIcon";
                                                                                } else {
                                                                                    if (eventType == ier_constants.EventType_PredefinedDateTrigger) {
                                                                                        iconCss = "dispositionTriggerPredefinedDateIcon";
                                                                                    } else {
                                                                                        if (eventType == ier_constants.EventType_ExternalEventTrigger) {
                                                                                            iconCss = "dispositionTriggerExternalEventIcon";
                                                                                        } else {
                                                                                            if (eventType == ier_constants.EventType_InternalEventTrigger) {
                                                                                                iconCss = "dispositionTriggerEventInternalIcon";
                                                                                            } else {
                                                                                                if (eventType == ier_constants.EventType_RecurringEventTrigger) {
                                                                                                    iconCss = "dispositionTriggerEventRecurringIcon";
                                                                                                } else {
                                                                                                    iconCss = "dispositionTriggerIcon";
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (entityType == ier_constants.EntityType_NamingPattern || className == ier_constants.ClassName_NamingPattern) {
                                                                                    iconCss = "namingPatternIcon";
                                                                                } else {
                                                                                    if (entityType == ier_constants.EntityType_Hold || className == ier_constants.ClassName_Hold) {
                                                                                        if (item.isDynamicHold()) {
                                                                                            iconCss = "dynamicHoldIcon";
                                                                                        } else {
                                                                                            iconCss = "onHoldIcon";
                                                                                        }
                                                                                    } else {
                                                                                        if (className == ier_constants.ClassName_WorkflowDefinition) {
                                                                                            iconCss = "workflowDefinitionIcon";
                                                                                        } else {
                                                                                            if (className == ier_constants.ClassName_ReportDefinition) {
                                                                                                iconCss = "reportIcon";
                                                                                            } else {
                                                                                                iconCss = null;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return iconCss;
        }, getMimetypeTooltip:function (item) {
            var tooltip;
            var properties = item;
            var attributes = item.attributes;
            var className = properties.template;
            var entityType = item instanceof ier.model._BaseEntityObject ? item.getEntityType() : null;
            if (className == ier_constants.ClassName_FilePlan || entityType == ier_constants.EntityType_FilePlan) {
                tooltip = ier_messages.fileplan;
            } else {
                if (entityType == ier_constants.EntityType_RecordCategory || className == ier_constants.ClassName_RecordCategory) {
                    tooltip = ier_messages.recordCategory;
                } else {
                    if (entityType == ier_constants.EntityType_ElectronicRecordFolder || className == ier_constants.ClassName_ElectronicRecordFolder) {
                        tooltip = ier_messages.electronicRecordFolder;
                    } else {
                        if (entityType == ier_constants.EntityType_HybridRecordFolder || className == ier_constants.ClassName_HybridRecordFolder) {
                            tooltip = ier_messages.hybridRecordFolder;
                        } else {
                            if (entityType == ier_constants.EntityType_PhysicalRecordFolder || className == ier_constants.ClassName_PhysicalRecordFolder) {
                                tooltip = ier_messages.physicalRecordFolder;
                            } else {
                                if (entityType == ier_constants.EntityType_PhysicalContainer || className == ier_constants.ClassName_PhysicalContainer) {
                                    tooltip = ier_messages.box;
                                } else {
                                    if (entityType == ier_constants.EntityType_Volume || className == ier_constants.ClassName_Volume) {
                                        tooltip = ier_messages.recordVolume;
                                    } else {
                                        if (entityType == ier_constants.EntityType_Record || entityType == ier_constants.EntityType_ElectronicRecord || className == ier_constants.ClassName_ElectronicRecord) {
                                            tooltip = ier_messages.electronicRecord;
                                        } else {
                                            if (entityType == ier_constants.EntityType_PhysicalRecord || className == ier_constants.ClassName_PhysicalRecord) {
                                                tooltip = ier_messages.physicalRecord;
                                            } else {
                                                if (entityType == ier_constants.EntityType_EmailRecord || className == ier_constants.ClassName_EmailRecord) {
                                                    tooltip = ier_messages.emailRecord;
                                                } else {
                                                    if (entityType == ier_constants.EntityType_DispositionSchedule || className == ier_constants.ClassName_DispositionSchedule) {
                                                        tooltip = ier_messages.dispositionSchedule;
                                                    } else {
                                                        if (entityType == ier_constants.EntityType_Location || className == ier_constants.ClassName_Location) {
                                                            tooltip = ier_messages.location;
                                                        } else {
                                                            if (entityType == ier_constants.EntityType_RecordType || className == ier_constants.ClassName_RecordType) {
                                                                tooltip = ier_messages.recordType;
                                                            } else {
                                                                if (entityType == ier_constants.EntityType_TransferMapping || className == ier_constants.ClassName_TransferMapping) {
                                                                    tooltip = ier_messages.transferMapping;
                                                                } else {
                                                                    if (entityType == ier_constants.EntityType_DispositionAction || className == ier_constants.ClassName_DispositionAction) {
                                                                        var actionType = attributes[ier_constants.Property_ActionType];
                                                                        if (actionType == null) {
                                                                            tooltip = null;
                                                                        } else {
                                                                            if (actionType == ier_constants.ActionType_Review) {
                                                                                tooltip = ier_messages.reviewAction;
                                                                            } else {
                                                                                if (actionType == ier_constants.ActionType_Export) {
                                                                                    tooltip = ier_messages.exportAction;
                                                                                } else {
                                                                                    if (actionType == ier_constants.ActionType_Transfer) {
                                                                                        tooltip = ier_messages.transferAction;
                                                                                    } else {
                                                                                        if (actionType == ier_constants.ActionType_Destroy) {
                                                                                            tooltip = ier_messages.destroyAction;
                                                                                        } else {
                                                                                            if (actionType == ier_constants.ActionType_Export) {
                                                                                                tooltip = ier_messages.exportAction;
                                                                                            } else {
                                                                                                if (actionType == ier_constants.ActionType_InterimTransfer) {
                                                                                                    tooltip = ier_messages.interimTransferAction;
                                                                                                } else {
                                                                                                    if (actionType == ier_constants.ActionType_Cutoff) {
                                                                                                        tooltip = ier_messages.cutoffAction;
                                                                                                    } else {
                                                                                                        if (actionType == ier_constants.ActionType_VitalReview) {
                                                                                                            tooltip = ier_messages.vitalReviewAction;
                                                                                                        } else {
                                                                                                            if (actionType == ier_constants.ActionType_AutoDestroy) {
                                                                                                                tooltip = ier_messages.autoDestroyAction;
                                                                                                            } else {
                                                                                                                tooltip = null;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if (entityType == ier_constants.EntityType_DispositionTrigger || className == ier_constants.ClassName_DispositionTrigger) {
                                                                            var eventType = attributes[ier_constants.Property_EventType];
                                                                            if (eventType == null) {
                                                                                tooltip = ier_messages.dispositionTrigger;
                                                                            } else {
                                                                                if (eventType == ier_constants.EventType_PredefinedDateTrigger) {
                                                                                    tooltip = ier_messages.predefinedDateTrigger;
                                                                                } else {
                                                                                    if (eventType == ier_constants.EventType_ExternalEventTrigger) {
                                                                                        tooltip = ier_messages.externalEventTrigger;
                                                                                    } else {
                                                                                        if (eventType == ier_constants.EventType_InternalEventTrigger) {
                                                                                            tooltip = ier_messages.internalEventTrigger;
                                                                                        } else {
                                                                                            if (eventType == ier_constants.EventType_RecurringEventTrigger) {
                                                                                                tooltip = ier_messages.recurringEventTrigger;
                                                                                            } else {
                                                                                                tooltip = ier_messages.dispositionTrigger;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (entityType == ier_constants.EntityType_NamingPattern || className == ier_constants.ClassName_NamingPattern) {
                                                                                tooltip = ier_messages.namingPattern;
                                                                            } else {
                                                                                if (entityType == ier_constants.EntityType_Hold || className == ier_constants.ClassName_Hold) {
                                                                                    if (item.isDynamicHold()) {
                                                                                        tooltip = ier_messages.dynamicHold;
                                                                                    } else {
                                                                                        tooltip = ier_messages.hold;
                                                                                    }
                                                                                } else {
                                                                                    if (className == ier_constants.ClassName_WorkflowDefinition) {
                                                                                        tooltip = ier_messages.workflowDefinition;
                                                                                    } else {
                                                                                        if (className == ier_constants.ClassName_ReportDefinition) {
                                                                                            tooltip = ier_messages.reportDefinition;
                                                                                        } else {
                                                                                            tooltip = null;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return tooltip;
        }, arrayToString:function (values) {
            var result = "";
            for (var i = 0; i < values.length; i++) {
                var value = values[i];
                if (i > 0) {
                    result += ",";
                }
                result += value;
            }
            return result;
        }, getDefaultParams:function (repositoryOrRepositoryId, onFinish) {
            var params = new Object();
            var requestParams = new Object();
            if (repositoryOrRepositoryId) {
                var repositoryId = repositoryOrRepositoryId instanceof ecm_model_Repository ? repositoryOrRepositoryId.id : repositoryOrRepositoryId;
                requestParams[ier_constants.Param_RepositoryId] = repositoryId;
            }
            requestParams[ier_constants.Param_Desktop] = ecm_model_desktop.id;
            params["requestParams"] = requestParams;
            if (onFinish) {
                params["requestCompleteCallback"] = onFinish;
            }
            return params;
        }, createBaseEntityItem:function (response, repository, resultSet, parent) {
            return ecm_model_ContentItem.createFromJSON(response.rows[0], repository, resultSet, parent);
        }, getGuidId:function (docId) {
            var ids = docId.split(",");
            if (ids.length == 3) {
                return docId.split(",")[2];
            } else {
                return docId;
            }
        }, getHelpUrl:function (forPage) {
            return forPage ? ecm.model.desktop.helpUrl + "index.jsp?content=" + ier_constants.HelpContextUrl + forPage : this.helpUrl;
        }, getISODateString:function (d) {
            return dojo_date_stamp.toISOString(d);
        }, cloneAttributes:function (attributeDefs) {
            var copyAttributes = [];
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                copyAttributes.push(attrDef.clone());
            }
            return copyAttributes;
        }, getAttributeDefinition:function (attributeDefs, id) {
            for (var i in attributeDefs) {
                if (attributeDefs[i].id == id) {
                    return attributeDefs[i];
                }
            }
            return null;
        }, compactString:function (string) {
            if (string) {
                string = string.trim().replace(/[\n\r]/g, " ");
            }
            return string;
        }, createIERErrorMessage:function (messagePrefix, inserts, isBackgroundRequest) {
            inserts = inserts || [];
            var messageText = ier_messages[messagePrefix] ? dojo_string.substitute(ier_messages[messagePrefix], inserts) : messagePrefix;
            var messageExplanation = ier_messages[messagePrefix + "_explanation"] ? dojo_string.substitute(ier_messages[messagePrefix + "_explanation"], inserts) : "";
            var messageUserResponse = ier_messages[messagePrefix + "_userResponse"] ? dojo_string.substitute(ier_messages[messagePrefix + "_userResponse"], inserts) : "";
            var messageAdminResponse = ier_messages[messagePrefix + "_adminResponse"] ? dojo_string.substitute(ier_messages[messagePrefix + "_adminResponse"], inserts) : "";
            var message = new ecm.model.Message({level:4, text:messageText, explanation:messageExplanation, userResponse:messageUserResponse, adminResponse:messageAdminResponse});
            return message;
        }, isCompatibleIERVersion:function () {
            if (ecm.messages.product_version.indexOf("2.0.0") == 0 || ecm.messages.product_version.indexOf("2.0.1") == 0) {
                ecm_model_desktop.addMessage(this.createIERErrorMessage("error_incompatitableVersion"));
                return false;
            }
            return true;
        }, runReport:function (repository, itemId) {
            var scriptUrl = ecm.model.Request.getPluginResourceUrl("IERApplicationPlugin", "ier/widget/layout/ReportLayout.js");
            var params = [{name:"layout", value:scriptUrl}, {name:"repository", value:repository.id}, {name:"itemId", value:itemId}, {name:"useLastCache", value:true}];
            var reqParam = "";
            var questionMarkFound = true;
            if (location.href.indexOf("?") == -1) {
                reqParam = "?";
                questionMarkFound = false;
            }
            for (var i in params) {
                if (!questionMarkFound) {
                    questionMarkFound = true;
                    reqParam += params[i].name + "=" + params[i].value;
                } else {
                    reqParam += "&" + params[i].name + "=" + params[i].value;
                }
            }
            var width = 920;
            var height = 650;
            var xpos = Math.round((window.screen.availWidth - width) / 2);
            var ypos = Math.round((window.screen.availHeight - height) / 2);
            var windowname = "";
            if (params[2].value) {
                windowname = params[2].value[0].replace(/[-{}]/g, "A");
            }
            var newwin = window.open(location.href + reqParam, ier_constants.ReportWindowNamePrefix + windowname, "titlebar=yes,toolbar=no,resizable=yes,status=no,menubar=no,width=" + width + ",height=" + height + ",left=" + xpos + ",top=" + ypos);
            if (window.focus) {
                newwin.focus();
            }
        }, getReportMessages:function (key, message) {
            if (key) {
                key = key.replace(/\./g, "_");
                var messageText = ier_messages[key];
                return messageText ? messageText : message;
            } else {
                return message;
            }
        }, startsWith:function (originalString, snippet) {
            return (originalString.subString && originalString.substring(0, snippet.length) === snippet);
        }, convertTaskType:function (type) {
            if (type == ier_constants.TaskType_Report) {
                return ier_constants.TaskType_ReportClass;
            } else {
                if (type == ier_constants.TaskType_DispositionSweep) {
                    return ier_constants.TaskType_DispositionSweepClass;
                } else {
                    if (type == ier_constants.TaskType_HoldSweep) {
                        return ier_constants.TaskType_HoldSweepClass;
                    } else {
                        if (type == ier_constants.TaskType_DefensibleDisposal) {
                            return ier_constants.TaskType_DDConversionClass + "," + ier_constants.TaskType_DDReportSweepClass;
                        } else {
                            return type;
                        }
                    }
                }
            }
        }, getStatusDisplayValue:function (status) {
            if (status == ier_constants.TaskStatus_Completed) {
                return ier_messages.taskPane_completedStatus;
            } else {
                if (status == ier_constants.TaskStatus_Scheduled) {
                    return ier_messages.taskPane_scheduledStatus;
                } else {
                    if (status == ier_constants.TaskStatus_Failed) {
                        return ier_messages.taskPane_failedStatus;
                    } else {
                        if (status == ier_constants.TaskStatus_Paused) {
                            return ier_messages.taskPane_disabledStatus;
                        } else {
                            return ier_messages.taskPane_inProgressStatus;
                        }
                    }
                }
            }
        }, getTypeDisplayValue:function (handlerClassName) {
            if (handlerClassName == ier_constants.TaskType_ReportClass) {
                return ier_messages.reports;
            } else {
                if (handlerClassName == ier_constants.TaskType_DDConversionClass || handlerClassName == ier_constants.TaskType_DDReportSweepClass) {
                    return ier_messages.defensibleDisposal;
                } else {
                    return handlerClassName;
                }
            }
        }, getTypeDisplayIcon:function (handlerClassName) {
            if (handlerClassName == ier_constants.TaskType_ReportClass) {
                return "taskReportIcon";
            } else {
                if (handlerClassName == ier_constants.TaskType_DDConversionClass || handlerClassName == ier_constants.TaskType_DDReportSweepClass) {
                    return "taskBasicScheduleIcon";
                } else {
                    if (handlerClassName == ier_constants.TaskType_HoldSweepClass) {
                        return "taskHoldIcon";
                    }
                }
            }
        }, createIERErrorMessage:function (messagePrefix, inserts, isBackgroundRequest) {
            inserts = inserts || [];
            var messageText = ier_messages[messagePrefix] ? dojo_string.substitute(ier_messages[messagePrefix], inserts) : messagePrefix;
            var messageExplanation = ier_messages[messagePrefix + "_explanation"] ? dojo_string.substitute(ier_messages[messagePrefix + "_explanation"], inserts) : "";
            var messageUserResponse = ier_messages[messagePrefix + "_userResponse"] ? dojo_string.substitute(ier_messages[messagePrefix + "_userResponse"], inserts) : "";
            var messageAdminResponse = ier_messages[messagePrefix + "_adminResponse"] ? dojo_string.substitute(ier_messages[messagePrefix + "_adminResponse"], inserts) : "";
            var message = new ecm.model.Message("", "", 4, messageText, messageExplanation, messageUserResponse, messageAdminResponse, null, isBackgroundRequest);
            return message;
        }, replaceModule:function (modules, name, module) {
            var r = false;
            if (modules && name) {
                for (var i = 0; i < modules.length; i++) {
                    var m = modules[i];
                    if (m) {
                        var p = m.moduleClass && m.moduleClass.prototype || m.prototype;
                        var n = p && p.name;
                        if (n == name) {
                            modules[i] = module;
                            r = true;
                        } else {
                            if (n == "bar") {
                                r = this.replaceModule(m.top, name, module) || this.replaceModule(m.bottom, name, module);
                            } else {
                                if (dojo_lang.isArray(m)) {
                                    r = this.replaceModule(m, name, module);
                                }
                            }
                        }
                        if (r) {
                            break;
                        }
                    }
                }
            }
            return r;
        }, createTaskSchedule:function (task) {
            var schedule = {recurring:task.taskRequest.specificTaskRequest[ier_constants.Param_IsRecurring], interval:task.taskRequest.specificTaskRequest[ier_constants.Param_RepeatCycle], startTime:task.taskRequest.specificTaskRequest[ier_constants.Param_StartTime], endTime:task.taskRequest.specificTaskRequest[ier_constants.Param_EndTime], description:task.taskRequest.specificTaskRequest[ier_constants.Param_Description2], name:task.taskRequest.specificTaskRequest[ier_constants.Param_Name2], username:task.taskRequest[ier_constants.Param_UserId], password:task.taskRequest[ier_constants.Param_Password], email:task.taskRequest[ier_constants.Param_EmailAddress], };
            return schedule;
        }, setTaskSchedulerPane:function (asyncTaskSchedulerPane, schedule, allowNameAndDescription) {
            if (!allowNameAndDescription) {
                asyncTaskSchedulerPane.nameTextBox.set("disabled", true);
                asyncTaskSchedulerPane.descriptionTextBox.set("disabled", true);
            }
            asyncTaskSchedulerPane.set("schedule", schedule);
            asyncTaskSchedulerPane.startTimeDateTimeTextBox.set("disabled", true);
            asyncTaskSchedulerPane.enableRecurrenceRadioButton.set("disabled", true);
            asyncTaskSchedulerPane.disableRecurrenceRadioButton.set("disabled", true);
            asyncTaskSchedulerPane.intervalNumberSpinner.set("disabled", true);
            asyncTaskSchedulerPane.intervalSelect.set("disabled", true);
            asyncTaskSchedulerPane.startImmediatelyCheckbox.set("disabled", true);
            if (schedule.username) {
                asyncTaskSchedulerPane.usernameTextBox.set("value", schedule.username);
            }
        }, getClassName:function (property) {
            var className = null;
            if (property == ier_constants.Property_Location || property == ier_constants.Property_HomeLocation) {
                className = ier_constants.ClassName_Location;
            } else {
                if (property == ier_constants.Property_AssociatedRecordType) {
                    className = ier_constants.ClassName_RecordType;
                } else {
                    if (property == ier_constants.Property_AssociatedWorkflow) {
                        className = ier_constants.ClassName_WorkflowDefinition;
                    } else {
                        if (property == ier_constants.Property_NamingPattern) {
                            className = ier_constants.ClassName_NamingPattern;
                        } else {
                            if (property == ier_constants.Property_DispositionSchedule) {
                                className = ier_constants.ClassName_DispositionSchedule;
                            }
                        }
                    }
                }
            }
            return className;
        }, getRootDownloadLinkURL:function (repository) {
            var queryParams = {desktop:ecm.model.desktop.id, repositoryId:repository.id};
            var rootPath = ecm.model.desktop._cServicesUrl || "/navigator";
            var linkUrl = rootPath + "/bookmark.jsp?" + dojo_ioQuery.objectToQuery(queryParams);
            return (window.location.protocol + "//" + window.location.host + linkUrl);
        }, getRepository:function (p8RepositoryId, connectionURL) {
            var repository = ecm.model.desktop.getRepositoryFromSymbolicAndConnection(p8RepositoryId, connectionURL);
            if (repository == null) {
                var dialog = new ecm_dialog_MessageDialog({text:dojo_string.substitute(ier_messages.fileplanRepositoryNotAvailable, [p8RepositoryId])});
                dialog.startup();
                dialog.show();
                ier_util_dialog.manage(dialog);
            } else {
                return repository;
            }
        }, getRealItem:function (item) {
            if (item && item.isIERFavorite && item.item) {
                item = item.item;
            }
            return item;
        }, scheduleAsyncTask:function (schedule, handlerClassName, parameters, data, callback) {
            var params = {requestParams:{}, requestBody:{}};
            params.requestParams["isRecurring"] = schedule.recurring;
            params.requestParams["repeatCycle"] = schedule.interval;
            params.requestParams["startTime"] = schedule.startTime;
            params.requestParams["endTime"] = schedule.endTime;
            params.requestParams["description"] = schedule.description;
            params.requestParams["name"] = schedule.name;
            params.requestParams["handlerClassName"] = handlerClassName;
            dojo_lang.mixin(params.requestParams, parameters);
            if (!data) {
                data = {};
            }
            data["userId"] = schedule.username;
            data["password"] = schedule.password;
            data["emailAddress"] = schedule.email;
            params["requestBody"] = data;
            params.requestCompleteCallback = dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback();
                }
            });
            Request.postServiceAPI("scheduleAsyncTask", null, "text/json", params);
        }, });
        var util = new _Util();
        return util;
    });
}, "ier/widget/panes/ReportEntryFormPane":function () {
    define(["dojo/_base/declare", "dojo/dom-construct", "dojo/dom-class", "dojo/dom-style", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialogPane", "ier/widget/ReportEntryForm", "dojo/text!./templates/IERBaseDialogPane.html"], function (dojo_declare, dojo_construct, dojo_class, dojo_style, dojo_lang, ier_constants, ier_messages, ier_widget_dialog_IERBaseDialogPane, ier_widget_ReportEntryForm, templateString) {
        return dojo_declare("ier.widget.panes.ReportEntryFormPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, constants:ier_constants, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.title = ier_messages.scheduleReportDialog_setParametersForReport;
            this.disabled = true;
            this.reportEntryForm = new ier_widget_ReportEntryForm({showActionBar:false});
            this.connect(this.reportEntryForm, "onChange", function () {
                this.onInputChange();
            });
            this.connect(this.reportEntryForm, "onCompleteRendering", function (attributes, deferArray) {
                this.onCompleteRendering();
            });
            this.connect(this.reportEntryForm, "onRenderAttributes", function (attributes, deferArray) {
                this.onRenderAttributes(attributes, deferArray);
            });
        }, createRendering:function (repository, reportDefinition) {
            this.reportDefinition = reportDefinition;
            dojo_construct.place(this.reportEntryForm.domNode, this.containerNode, "first");
            dojo_style.set(this.reportEntryForm.mainStackContainer.domNode, "overflow-y", "auto");
            dojo_style.set(this.reportEntryForm.resultsPane.domNode, "display", "none");
            this.repository = repository;
            this.reportEntryForm.createRendering(this.repository, reportDefinition.id, reportDefinition, dojo_lang.hitch(this, function () {
                this.reportEntryForm.resize();
                this.resize();
            }));
        }, onCompleteRendering:function () {
        }, onRenderAttributes:function (attributes, deferArray) {
        }, getPropertiesJSON:function () {
            return this.reportEntryForm.getPropertiesJSON();
        }, validate:function () {
            if (this.reportEntryForm) {
                return this.reportEntryForm.validateInput();
            } else {
                return false;
            }
        }});
    });
}, "url:ier/widget/panes/templates/DefensibleDisposalDispositionPane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\" data-dojo-attach-point=\"containerNode\">\t\r\n\t<div data-dojo-attach-point=\"ddScheduleSection\">\r\n\t\t<table class=\"propertyTable smallerIdentedPropertyTable\" style=\"margin-top:8px;\" data-dojo-attach-point=\"ddScheduleSectionTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"rententionTriggerPropertyNameLabel\" for=\"${id}_retentionTriggerPropertyName\">${messages.retentionTriggerPropertyName}</label>\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"triggerPropertyNameHoverHelp\" data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.entityItemDispositionPane_retentionPropertyNameHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div name=\"${id}_retentionTriggerPropertyName\"\r\n\t\t\t\t\t\t\tid=\"${id}_retentionTriggerPropertyName\"\r\n\t\t\t\t\t\t\tclass=\"ierDropDownInput ierEntryTemplateSelector\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit/form/FilteringSelect\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-point=\"retentionTriggerPropertyNameSelect\"\r\n\t\t\t\t\t\t\tplaceholder=\"${messages.dispositionPane_selectRecordProperty}\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"required:true, labelType:'text', label:'label', searchAttr:'label', identifier:'value'\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"retentionPeriodLabel\">${messages.entityItemDispositionPane_retentionPeriod}</span>\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"retentionPeriodHoverHelp\" data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.entityItemDispositionPane_retentionPeriodHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\t\t\t\t\t\r\n\t\t\t\t\t\t<input data-dojo-props=\"required: true, intermediateChanges: true, value:0, constraints:{min:0,max:999,places:0}\" data-dojo-attach-point=\"retentionPeriod_years\" \r\n\t\t\t\t\t\t\tid=\"${id}_years_label\" size=\"5\" style=\"width:80px;\" data-dojo-type=\"dijit/form/NumberSpinner\" data-dojo-attach-event=\"onChange:onInputChange\" aria-label=\"${messages.dispositionPane_years}\" />\r\n\t\t\t\t\t\t<span style=\"padding-right: 5px;\" data-dojo-attach-point=\"retentionPeriodLabel_years\">${messages.dispositionPane_years}</span>\r\n\t\t\t\t\t\t<input data-dojo-props=\"required: true, intermediateChanges: true, value:0,constraints:{min:0,max:999,places:0}\" data-dojo-attach-point=\"retentionPeriod_months\" \r\n\t\t\t\t\t\t\tid=\"${id}_month_label\" size=\"5\" style=\"width:80px;\" data-dojo-type=\"dijit/form/NumberSpinner\" data-dojo-attach-event=\"onChange:onInputChange\" aria-label=\"${messages.dispositionPane_months}\" />\r\n\t\t\t\t\t\t<span style=\"padding-right: 5px;\" data-dojo-attach-point=\"retentionPeriodLabel_months\">${messages.dispositionPane_months}</span>\r\n\t\t\t\t\t\t<input data-dojo-props=\"required: true, intermediateChanges: true, value:0,constraints:{min:0,max:999,places:0}\" data-dojo-attach-point=\"retentionPeriod_days\" \r\n\t\t\t\t\t\t\tid=\"${id}_days_label\" size=\"5\" style=\"width:80px;\" data-dojo-type=\"dijit/form/NumberSpinner\" data-dojo-attach-event=\"onChange:onInputChange\" aria-label=\"${messages.dispositionPane_days}\" />\r\n\t\t\t\t\t\t<span style=\"padding-right: 5px; padding-right: 15px\" data-dojo-attach-point=\"retentionPeriodLabel_days\">${messages.dispositionPane_days}</span>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>", "url:ier/widget/admin/templates/SystemConfigPane.html":"<div>\r\n\t<div>\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_exportConfigSelect\">${_messages.admin_systemConfig_exportConfig}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_exportConfig_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<select data-dojo-type=\"ecm/widget/Select\" data-dojo-attach-point=\"_exportConfigSelect\" id=\"${id}_exportConfigSelect\" class=\"dijitSelectFixedWidth ierAdminSystemConfigSelect\">\r\n\t\t\t\t\t\t<option value=\"1\">${_messages.admin_systemConfig_separateContent}</option>\r\n\t\t\t\t\t\t<option value=\"2\">${_messages.admin_systemConfig_embeddedContent}</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_transferMappingSelector\">${_messages.admin_systemConfig_exportTransferMapping}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_exportTransferMapping_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td data-dojo-attach-point=\"_transferMappingCell\" class=\"propertyRowValue\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span>${_messages.admin_systemConfig_fposSetup}:</span>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_fposSetup_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<span data-dojo-attach-point=\"_fposSetupNode\"></span>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span>${_messages.admin_systemConfig_rmVersionInfo}:</span>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_rmVersionInfo_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<span data-dojo-attach-point=\"_versionInfoNode\"></span>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_batchSizeBox\">${_messages.admin_systemConfig_maximumBatchSize}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_maximumBatchSize_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<input data-dojo-type=\"ecm/widget/NumberTextBox\" data-dojo-attach-point=\"_batchSizeBox\" data-dojo-props=\"constraints: {min: 1, max: 500}, required: true, intermediateChanges: true\" id=\"${id}_batchSizeBox\"/>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_screeningWorkflowSelector\">${_messages.admin_systemConfig_screeningWorkflow}:</span>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_screeningWorkflow_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td data-dojo-attach-point=\"_screeningWorkflowCell\" class=\"propertyRowValue\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span>${_messages.admin_systemConfig_securityScriptRunDate}:</span>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_securityScriptRunDate_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<span data-dojo-attach-point=\"_runDateNode\"></span>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_patternSuffixSelect\">${_messages.admin_systemConfig_volumePatternSuffix}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_systemConfig_volumePatternSuffix_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<select data-dojo-type=\"ecm/widget/Select\" data-dojo-attach-point=\"_patternSuffixSelect\" id=\"${id}_patternSuffixSelect\" class=\"dijitSelectFixedWidth ierAdminSystemConfigSelect\">\r\n\t\t\t\t\t\t<option value=\"000\">000</option>\r\n\t\t\t\t\t\t<option value=\"0000\">0000</option>\r\n\t\t\t\t\t\t<option value=\"00000\">00000</option>\r\n\t\t\t\t\t\t<option value=\"000000\">000000</option>\r\n\t\t\t\t\t\t<option value=\"0000000\">0000000</option>\r\n\t\t\t\t\t\t<option value=\"00000000\">00000000</option>\r\n\t\t\t\t\t\t<option value=\"000000000\">000000000</option>\r\n\t\t\t\t\t\t<option value=\"0000000000\">0000000000</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n</div>\r\n", "ier/widget/panes/RecordDeclareGeneralPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/data/ItemFileWriteStore", "dojo/dom-style", "dojo/keys", "dojo/store/DataStore", "dojo/string", "dijit/Tooltip", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/RecordDeclareGeneralPane.html", "dijit/form/FilteringSelect", "ecm/widget/HoverHelp"], function (dojo_declare, dojo_lang, dojo_data_ItemFileWriteStore, dojo_style, dojo_keys, dojo_store_DataStore, dojo_string, dijit_Tooltip, ier_constants, ier_messages, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.RecordDeclareGeneralPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _entryTemplateSelectorToolTip:null, _entryTemplates:null, _declareDialog:null, postCreate:function () {
            this.inherited(arguments);
            var learnMoreLink = ier_constants.IER_RootHelpLink + "/topic/com.ibm.p8.fimo.user.doc/ae_help/workplace/fimo_wp_entrytemplate.htm";
            this._entryTemplateSelectorHoverHelp.message = ier_messages.declareRecordDialog_recordEntryTemplateHoverHelp + "  " + this.createHtmlLink(learnMoreLink, ier_messages.dialog_LearnMoreLink);
        }, createRendering:function (repository, declareDialog) {
            this.repository = repository;
            this._declareDialog = declareDialog;
            this.createRecordEntryTemplateSelectorTooltip();
        }, loadRecordEntryTemplates:function () {
            this._entryTemplateSelector.reset();
            this._entryTemplateSelector.store = null;
            this.repository.retrieveRecordEntryTemplates(dojo_lang.hitch(this, function (entryTemplates) {
                this._entryTemplates = entryTemplates;
                var templateItems = [];
                for (var i = 0; i < entryTemplates.length; i++) {
                    var name = entryTemplates[i].id == null ? "" : entryTemplates[i].name;
                    templateItems.push({label:name, value:String(i)});
                }
                var templateItemsStore = new dojo_store_DataStore({"store":new dojo_data_ItemFileWriteStore({data:{identifier:"value", label:"label", items:templateItems}})});
                this._entryTemplateSelector.store = templateItemsStore;
                this._entryTemplateSelector.set("disabled", false);
                if (this._entryTemplateSelector.getValue()) {
                    this._entryTemplateSelector.filter(this._entryTemplateSelector.getValue());
                } else {
                    this._entryTemplateSelector.focus();
                    this._entryTemplateSelector.loadDropDown();
                }
            }));
        }, _onRecordEntryTemplateSelectorChange:function () {
            this.clearRecordEntryTemplateSelectorTooltip();
            this._declareDialog.clearMessage();
            var selectedEntryTemplate = null;
            if (this._entryTemplates) {
                var value = this._entryTemplateSelector.get("value");
                if (value) {
                    var i = Number(value);
                    if (i >= 0 && i < this._entryTemplates.length) {
                        selectedEntryTemplate = this._entryTemplates[i];
                    }
                }
            }
            if (!selectedEntryTemplate || selectedEntryTemplate.id == null) {
                this._entryTemplate = null;
                var propertiesPane = this._declareDialog._recordDeclarePropertiesPane;
                dojo_style.set(propertiesPane.getRepositorySelectorRow(), "display", "");
                dojo_style.set(propertiesPane.getCommonPropertiesDiv(), "display", "none");
                dojo_style.set(propertiesPane.getFolderSelectTableRow(), "display", "");
                dojo_style.set(propertiesPane.getRecordClassSelectorTableRow(), "display", "");
                propertiesPane.resetPropertiesPane();
            } else {
                if (selectedEntryTemplate && (!this._entryTemplate || (selectedEntryTemplate.id != this._entryTemplate.id))) {
                    this._entryTemplate = selectedEntryTemplate;
                    if (selectedEntryTemplate.isRetrieved()) {
                        var targetRepository = this._declareDialog._recordDeclarePropertiesPane.getTargetFilePlanRepository(selectedEntryTemplate.getTargetObjectStoreP8Id());
                        this.applyEntryTemplate(targetRepository);
                    } else {
                        selectedEntryTemplate.retrieveEntryTemplate(dojo_lang.hitch(this, function (entryTemplate) {
                            this._entryTemplate = entryTemplate;
                            var propertiesPane = this._declareDialog._recordDeclarePropertiesPane;
                            var targetRepository = propertiesPane.getTargetFilePlanRepository(this._entryTemplate.getTargetObjectStoreP8Id());
                            if (!targetRepository) {
                                this._declareDialog.setMessage(dojo_string.substitute(ier_messages.declareRecordDialog_entryTemplateRepositoryNotFound, [this._entryTemplate.getTargetRecordObjectStoreDisplayName()]), "warning");
                            } else {
                                if (!targetRepository.isIERLoaded()) {
                                    targetRepository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                                        this.applyEntryTemplate(repository);
                                    }));
                                } else {
                                    this.applyEntryTemplate(targetRepository);
                                }
                            }
                        }));
                    }
                }
            }
            this.onInputChange(this._entryTemplateSelector);
        }, _onRecordEntryTemplateSelectorInvoked:function (evt) {
            if (!evt.keyCode || (evt.keyCode == dojo_keys.ENTER || evt.keyCode == dojo_keys.SPACE || evt.keycode == dojo_keys.DOWN_ARROW)) {
                if (!this._entryTemplates) {
                    this.loadRecordEntryTemplates();
                }
            }
        }, applyEntryTemplate:function (targetRepository) {
            this.setRecordEntryTemplateSelectorTooltip(this._entryTemplate);
            var propertiesPane = this._declareDialog._recordDeclarePropertiesPane;
            var constrainToStartingFilePlanLocation = this._entryTemplate.getIsConstrainedToStartingFilePlanLocation();
            var showClassAndLocationSelectorsStep = this._entryTemplate.getShowClassAndLocationSelectorsStep();
            var showPropertiesStep = this._entryTemplate.getShowPropertiesStep();
            var showFilePlanLocationSelection = this._entryTemplate.getShowFilePlanLocationSelection();
            var primaryFilePlanLocationId = this._entryTemplate.getPrimaryFilePlanLocationId();
            var showRecordClassSelection = this._entryTemplate.getShowRecordClassSelection();
            var startingFilePlanLocation = this._entryTemplate.getStartingFilePlanLocationId();
            var filePlanLocations = this._entryTemplate.getFilePlanLocations();
            if (this.isLogDebug()) {
                propertiesPane.resetValues();
            }
            propertiesPane.setIsFromEntryTemplate(true);
            propertiesPane.setFilePlanRepository(targetRepository);
            var selectedRecordClassId = this._entryTemplate.getSelectedRecordClassId();
            propertiesPane.setRecordClassLabel(this._entryTemplate.getSelectedRecordClassLabel());
            this._entryTemplateOnRenderHandler = this.connect(propertiesPane, "onRenderAttributes", function (attributes) {
                if (this._entryTemplate) {
                    this._entryTemplate.setRecordEntryTemplateAttributeDefs(targetRepository, attributes);
                }
                this.disconnect(this._entryTemplateOnRenderHandler);
            });
            if (startingFilePlanLocation && !constrainToStartingFilePlanLocation) {
                this._declareDialog.setMessage(ier_messages.declareRecordDialog_ignoreStartingFilePlanLocation, "warning");
            }
            var newFilePlanLocationRoot = (startingFilePlanLocation && constrainToStartingFilePlanLocation) ? startingFilePlanLocation : null;
            propertiesPane.renderFolderAndClassSelectors(targetRepository, newFilePlanLocationRoot, selectedRecordClassId, dojo_lang.hitch(this, function () {
                var folderSelector = propertiesPane.getFolderSelectorWidget();
                if (showFilePlanLocationSelection.hidden == true || showClassAndLocationSelectorsStep == false) {
                    dojo_style.set(propertiesPane.getFolderSelectTableRow(), "display", "none");
                } else {
                    if (showFilePlanLocationSelection.readOnly == true) {
                        folderSelector.setDisabled(true);
                        dojo_style.set(propertiesPane.getFolderSelectTableRow(), "display", "");
                    } else {
                        folderSelector.setDisabled(false);
                        dojo_style.set(propertiesPane.getFolderSelectTableRow(), "display", "");
                    }
                }
                if (primaryFilePlanLocationId != null) {
                    propertiesPane.setTargetLocation(targetRepository, primaryFilePlanLocationId);
                    if (filePlanLocations.length > 1) {
                        this._declareDialog.setMessage(ier_messages.declareRecordDialog_multipleFileplanLocationsIgnored, "warning");
                    }
                } else {
                    if (startingFilePlanLocation) {
                        propertiesPane.setTargetLocation(targetRepository, startingFilePlanLocation);
                    }
                }
            }));
            this._entryTemplateOnCompleteHandler = this.connect(propertiesPane, "onCompleteRendering", function (attributes) {
                this.disconnect(this._entryTemplateOnCompleteHandler);
            });
            dojo_style.set(propertiesPane.getRepositorySelectorRow(), "display", "none");
            if (showPropertiesStep == false) {
                dojo_style.set(propertiesPane.getCommonPropertiesDiv(), "display", "none");
            } else {
                dojo_style.set(propertiesPane.getCommonPropertiesDiv(), "display", "");
            }
            var recordClassSelector = propertiesPane.getRecordClassSelectorWidget();
            if (showRecordClassSelection.hidden == true || showClassAndLocationSelectorsStep == false) {
                dojo_style.set(propertiesPane.getRecordClassSelectorTableRow(), "display", "none");
            } else {
                if (showRecordClassSelection.readOnly == true) {
                    recordClassSelector.setDisabled(true);
                    dojo_style.set(propertiesPane.getRecordClassSelectorTableRow(), "display", "");
                } else {
                    recordClassSelector.setDisabled(false);
                    dojo_style.set(propertiesPane.getRecordClassSelectorTableRow(), "display", "");
                }
            }
        }, setRecordEntryTemplateSelectorTooltip:function (entryTemplate) {
            this.clearRecordEntryTemplateSelectorTooltip();
            this.entryTemplateToolTip = this._entryTemplateSelectorToolTip;
            if (entryTemplate && entryTemplate.getDescription()) {
                this._entryTemplateSelectorToolTip.setAttribute("label", entryTemplate.getDescription());
            }
        }, clearRecordEntryTemplateSelectorTooltip:function () {
            if (this._entryTemplateSelectorToolTip) {
                this._entryTemplateSelectorToolTip.close();
                this._entryTemplateSelectorToolTip.setAttribute("label", "");
            }
        }, createRecordEntryTemplateSelectorTooltip:function () {
            if (!this._entryTemplateSelectorToolTip) {
                this._entryTemplateSelectorToolTip = new dijit_Tooltip({position:["above", "below", "after", "before"]});
                this.connect(this._entryTemplateSelector, "_onFocus", function () {
                    if (this._entryTemplateSelectorToolTip.label.length > 0) {
                        this._entryTemplateSelectorToolTip.open(this._entryTemplateSelector.domNode);
                    }
                });
                this.connect(this._entryTemplateSelector, "_onBlur", function () {
                    this._entryTemplateSelectorToolTip.close();
                });
                this.connect(this._entryTemplateSelector, "onMouseOver", function () {
                    if (this._entryTemplateSelectorToolTip.label.length > 0) {
                        this._entryTemplateSelectorToolTip.open(this._entryTemplateSelector.domNode);
                    }
                });
                this.connect(this._entryTemplateSelector, "onMouseOut", function () {
                    this._entryTemplateSelectorToolTip.close();
                });
            }
        }, isValidationRequired:function () {
            return false;
        }, destroy:function () {
            if (this._entryTemplateSelectorToolTip) {
                this._entryTemplateSelectorToolTip.close();
                this._entryTemplateSelectorToolTip.destroy();
                this._entryTemplateSelectorToolTip = null;
            }
            this.inherited(arguments);
        }});
    });
}, "ier/widget/panes/EntityItemObjectStoreSecurityPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Request", "ier/constants", "ier/util/util", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemObjectStoreSecurityPane.html", "dijit/layout/ContentPane", "ier/widget/panes/ObjectStoreSecurityPane"], function (dojo_declare, dojo_lang, dojo_class, ecm_model_Request, ier_constants, ier_util, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemObjectStoreSecurityPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _permissions:null, _isReadOnly:false, postCreate:function () {
            this.inherited(arguments);
        }, createRendering:function (repository, isReadOnly) {
            this.repository = repository;
            this._isReadOnly = isReadOnly ? isReadOnly : false;
            this.connect(this._securityPane, "onChange", "onInputChange");
            this._retrievePermissions();
        }, hide:function () {
            dojo_class.add(this._securityPane.domNode, "dijitHidden");
        }, _retrievePermissions:function () {
            if (this._permissions) {
                this.processPermissions(this._permissions);
            } else {
                if (this.repository) {
                    this.repository.permissions = null;
                    this.repository.retrieveObjectStorePermissions(dojo_lang.hitch(this, this.processPermissions));
                }
            }
        }, processPermissions:function (permissions) {
            this._securityPane.reset();
            this._securityPane.setRepository(this.repository);
            if (permissions) {
                this._permissions = permissions;
            }
            this._renderPermissions(this._permissions, this._isReadOnly);
        }, _renderPermissions:function (permissions, isReadOnly) {
            this._securityPane.renderPermissions(permissions, isReadOnly);
        }, getPermissions:function () {
            return this._securityPane.getPermissions();
        }, saveSecurity:function (callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.repository.objectStorePermissions = null;
                if (callback) {
                    callback(response);
                }
            }));
            var data = new Object();
            data[ier_constants.Param_Permissions] = this.getPermissions();
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_ObjectStoreSecurity, ier_constants.PostEncoding, params);
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemLinksPane.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" class=\"ierEntityItemHoldPane\"\r\n\tdata-dojo-attach-point=\"containerNode\"\r\n\tdata-dojo-props=\"gutters:false\"\r\n\tstyle=\"width:100%; height: 100%;padding: 0px;\">\r\n\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" \r\n\t\tdata-dojo-props=\"region:'top'\" class=\"filterContainer\"\r\n\t\tstyle=\"padding-top: 10px; height: 25px;\">\r\n\t\t<div class=\"filterArea\" data-dojo-attach-point=\"filterArea\">\r\n\t\t\t<label for=\"${id}_searchFilterByName\">${_messages.entityItemLinksPane_label_SearchByLinkName}:</label>\r\n\t\t\t<div id=\"${id}_searchFilterByName\"\r\n\t\t\t\tdata-dojo-type=\"ier/widget/FilePlanSearchBar\" \r\n\t\t\t\tdata-dojo-attach-point=\"_filePlanSearchBar\" class=\"filter\"\r\n\t\t\t\tdata-dojo-attach-event=\"onSearchButtonClicked: _updateContentList\"\r\n\t\t\t\tplaceHolder=\"${_messages.objectSelector_search}\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\"\r\n\t\tdata-dojo-props=\"region:'center'\" style=\"height: 90%;\">\r\n\t\t<div data-dojo-type=\"ier/widget/listView/ContentList\"\r\n\t\t\ttitle=\"${_messages.links}\"\r\n\t\t\tdata-dojo-attach-point=\"_contentList\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/tasks/TaskNavigationTree":function () {
    define("ier/widget/tasks/TaskNavigationTree", ["dojo/_base/declare", "dojo/_base/event", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-class", "dojo/keys", "dojo/window", "dijit/registry", "ecm/widget/Tree", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/widget/ActionMenu", "ier/model/TaskTreeModel", "ier/constants"], function (dojo_declare, dojo_event, dojo_lang, dojo_construct, dojo_domGeom, dojo_class, dojo_keys, dojo_window, dijit_registry, ecm_widget_Tree, ecm_model_Desktop, ecm_model_AsyncTask, ecm_widget_ActionMenu, ier_model_TaskTreeModel, ier_constants) {
        return dojo_declare("ier.widget.tasks.TaskNavigationTree", [ecm_widget_Tree], {showMissingFolderMessage:false, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ecmFolderTree");
            this.connect(this.model, "onProcessingComplete", "_onProcessingComplete");
            this.connect(this, "onClick", "_onTreeClick");
        }, reload:function () {
            this.model.reload(this.model.rootObject);
        }, _onProcessingComplete:function (item) {
            var node = this.getNodesByItem(item)[0];
            if (node != null) {
                node.unmarkProcessing();
                node.state = "UNCHECKED";
                node._expandNodeDeferred = null;
            }
        }, selectItem:function (item) {
            this.set("selectedItems", [item]);
            var itemNodes = this.getNodesByItem(item);
            var node = itemNodes && itemNodes.length > 0 ? itemNodes[0] : null;
            if (node) {
                dojo_window.scrollIntoView(node.rowNode);
            }
            this.onClick(item, node);
        }, _onTreeClick:function (item, node, evt) {
            if (item.continuationData) {
                node.labelNode.innerHTML = "<span class='dijitContentPaneLoading'></span>";
                if (item.parent.moreLink) {
                    delete item.parent.moreLink;
                }
                var onComplete = dojo_lang.hitch(this, function () {
                    dojo_window.scrollIntoView(parent.lastChild);
                    this.onPagingComplete();
                });
                this.onPagingStart();
                this.model.fetchNextPage(item.pagedResultSet, item.parent, onComplete);
            } else {
                this.onItemSelected(item, node);
            }
        }, onOpenItem:function (item, resultSet) {
        }, onItemSelected:function (item, node) {
        }, onPagingStart:function () {
        }, onPagingComplete:function () {
        }, _onChangeItems:function (modelObjects) {
        }, _getTreeRowNode:function (inputNode) {
            var node = inputNode;
            while (node) {
                if (dojo_class.contains(node, "dijitTreeRow")) {
                    break;
                }
                node = node.parentElement;
            }
            return node ? node : inputNode;
        }, onRefresh:function (items) {
        }, getIconClass:function (item, opened) {
            var iconClass = null;
            if (item instanceof ecm_model_AsyncTask && item.isTaskRecurring()) {
                iconClass = "taskRecurringIcon";
            } else {
                iconClass = "tasksIcon";
                if (item.id == ier_constants.TaskCategories_InProgressTasks) {
                    return "taskStatusInProgressIcon";
                } else {
                    if (item.id == ier_constants.TaskCategories_CompletedTasks) {
                        return "taskStatusCompletedIcon";
                    } else {
                        if (item.id == ier_constants.TaskCategories_ScheduledTasks) {
                            return "taskStatusScheduledIcon";
                        } else {
                            if (item.id == ier_constants.TaskCategories_PausedTasks) {
                                return "taskStatusPausedIcon";
                            } else {
                                if (item.id == ier_constants.TaskCategories_FailedTasks) {
                                    return "taskStatusFailedIcon";
                                } else {
                                    if (item.id == ier_constants.TaskCategories_RecurringTasks) {
                                        return "taskRecurringIcon";
                                    } else {
                                        if (item.id == ier_constants.TaskCategories_ReportTasks) {
                                            return "taskReportIcon";
                                        } else {
                                            if (item.id == ier_constants.TaskCategories_DefensibleDisposalTasks) {
                                                return "taskBasicScheduleIcon";
                                            } else {
                                                if (item.isMoreLink) {
                                                    iconClass = "taskRecurringIcon";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return iconClass;
        }});
    });
}, "url:ier/widget/layout/templates/ReportPane.html":"<div class=\"ierFlyoutPane ierReportPane\" >\r\n\t<div data-dojo-type=\"dijit.layout.BorderContainer\" class=\"flyoutContainer\" data-dojo-props=\"gutters:false\" width=\"500px\">\r\n\t\t<div data-dojo-attach-point=\"topPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\" class=\"flyoutContainerTop\" style=\"padding-bottom:0px\">\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"bottomPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\" class=\"flyoutContainerBottom\" style=\"padding-top:0px\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "url:ier/widget/panes/templates/FilePlanRepositoryPane.html":"<div class=\"entityItemGeneralPane\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr data-dojo-attach-point=\"_entityItemSaveInRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t${_messages.baseDialog_repository}:\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div data-dojo-attach-point=\"_repositorySelectorArea\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n</div>\r\n", "ier/model/RecordCategory":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject", "ier/model/RecordContainerMixin", "ier/model/RecordCategoryContainerMixin", "ier/model/RecordFolderContainerMixin", "ier/model/RMContainerMixin", "ier/model/DefensibleDisposalSchedule"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RecordCategoryContainerMixin, ier_model_RecordFolderContainerMixin, ier_model_RMContainerMixin, DefensibleDisposalSchedule) {
        var RecordCategory = dojo_declare("ier.model.RecordCategory", [ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RecordCategoryContainerMixin, ier_model_RecordFolderContainerMixin, ier_model_RMContainerMixin], {constructor:function (arguments) {
        }, getDefensibleDisposalSchedule:function () {
            if (this.isDefensibleDisposal()) {
                if (!this.defensibleDisposalSchedule) {
                    this.defensibleDisposalSchedule = new DefensibleDisposalSchedule({"retentionTriggerPropertyName":this.attributes[ier_constants.Property_RMRetentionTriggerPropertyName], "retentionPeriod":this.attributes[ier_constants.Property_RMRetentionPeriod]});
                }
                return this.defensibleDisposalSchedule;
            }
        }, refresh:function () {
            this.defensibleDisposalSchedule = null;
            this.inherited(arguments);
        }});
        ier_model_BaseEntityObject.registerClass("RecordCategory", RecordCategory);
        return RecordCategory;
    });
}, "url:ier/widget/panes/templates/RelocateContainerGeneralPane.html":"<div class=\"relocateContainerGeneralPane\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t<tbody>   \r\n\t<tr data-dojo-attach-point=\"_reasonForRow\">\r\n\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t<label for=\"${id}_reasonForRelocate\">${_messages.relocateRecordContainerDialog_reasonForRelocatePrompt}:</label>\r\n\t\t</td>\r\n\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_reasonForCell\">\r\n\t\t\t<div id=\"${id}_reasonForRelocate\"\r\n\t\t\t\tdata-dojo-type=\"ecm.widget.ValidationTextBox\" \r\n\t\t\t\tdata-dojo-attach-point=\"_reasonForRelocate\"\r\n\t\t\t\tdata-dojo-attach-event=\"onKeyUp: _onNameChange\" style=\"width:300px;\">\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</td>\r\n\t\t</tr>\r\n\t\t\r\n\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t${_messages.relocateRecordContainerDialog_fileplanLocation}:\r\n\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" \r\n\t\t\t\tdata-dojo-attach-point=\"_folderSelectorHoverHelp\" \r\n\t\t\t\tmessage=\"${_messages.relocateRecordContainerDialog_fileplanLocationHoverHelp}\"></div>\r\n\t\t</td>\r\n\t\t<td class=\"propertyRowValue\">\r\n\t\t\t<div data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t</div>\r\n\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t</table>\r\n</div>", "url:ier/widget/dialog/templates/AboutDialogContent.html":"${_ierMessages.about_product_name_label} ${_ierMessages.product_name}<br>\r\n${_ierMessages.about_product_version_label} ${_ierMessages.product_version}<br>\r\n${_ierMessages.about_product_build_label} <span data-dojo-attach-point=\"buildLevel\"></span><br>\r\n${_ierMessages.about_product_build_date} <span data-dojo-attach-point=\"buildDate\"></span><br>\r\n<br>\r\n<small>\r\n${_ierMessages.about_product_license}\r\n</small>", "ier/widget/FolderSelector":function () {
    define(["dojo/_base/declare", "ecm/widget/FolderSelector", "ier/widget/FolderTree", "dojo/text!./templates/FolderSelector.html", "dijit/form/CheckBox"], function (dojo_declare, ecm_widget_FolderSelector, ier_widget_FolderTree, templateString) {
        return dojo_declare("ier.widget.FolderSelector", [ecm_widget_FolderSelector], {templateString:templateString, createFolderTree:function (params) {
            if (params) {
                return new ier_widget_FolderTree(params);
            } else {
                this._folderTree = new ier_widget_FolderTree({"dojoAttachPoint":"_folderTree", "showFoldersOnly":"true", "enableCtxMenu":"false", "enableDnd":"false", "class":"folderTree"});
            }
        }});
    });
}, "ier/widget/panes/RecordDeclarePropertiesPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-attr", "dojo/dom-style", "ecm/model/Desktop", "ecm/model/Repository", "ecm/model/Request", "ecm/widget/ContentClassSelector", "ecm/widget/FolderSelectorCallback", "ecm/widget/UnselectableFolder", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/dialog", "ier/util/util", "ier/widget/_FolderSelectorDropDown", "ier/widget/FilePlanRepositorySelector", "ier/widget/admin/config", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/RecordDeclarePropertiesPane.html", "dijit/form/TextBox", "ecm/widget/HoverHelp", "ier/widget/panes/CommonPropertiesPane"], function (dojo_declare, dojo_array, dojo_lang, dojo_attr, dojo_style, ecm_model_desktop, ecm_model_Repository, ecm_model_Request, ecm_widget_ContentClassSelector, ecm_widget_FolderSelectorCallback, ecm_widget_UnselectableFolder, ecm_widget_dialog_MessageDialog, ier_constants, ier_messages, ier_util_dialog, ier_util, ier_widget_FolderSelectorDropDown, ier_widget_FilePlanRepositorySelector, ier_widget_admin_config, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.RecordDeclarePropertiesPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _recordClass:null, _recordClassLabel:null, _fp_repository_location:null, _selectedDocumentTitle:null, _filePlanRepositorySelector:null, defaultDesktopId:ecm_model_desktop.getRequestParam("DeclareDesktop") ? ecm_model_desktop.getRequestParam("declareDesktop") : ier_constants.IERDesktop, _defaultFilePlanId:ier_constants.Id_FilePlanFolder, _filePlanRepository:null, _shouldMapProperties:true, _commonAttributes:null, _blankRepository:new ecm_model_Repository("blankRepository", "&nbsp;", "p8", false), _itemProperties:null, _originalDocument:null, _isEmailDocument:false, _nameFromNamingPattern:null, _namingPatternEnabled:true, _isFromEntryTemplate:false, shouldMapParentFolderProperties:true, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._commonProperties, "onChange", function () {
                this.onInputChange(this._commonProperties);
            });
            var learnMoreLink = this.getHelpUrl("frmovh12.htm");
            this._repositorySelectorHoverHelp.message = ier_messages.declareRecordDialog_repositoriesHoverHelp;
            this._folderSelectorHoverHelp.message = ier_messages.declareRecordDialog_fileplanLocationHoverHelp;
            this._contentClassSelectorHoverHelp.message = ier_messages.declareRecordDialog_recordClassHoverHelp + "  " + this.createHtmlLink(learnMoreLink, ier_messages.dialog_LearnMoreLink);
        }, setEnabledNamingPattern:function (enable) {
            this._namingPatternEnabled = enable;
        }, setRecordClass:function (classSymbolicName) {
            var contentClass = this._contentClassSelector.repository.getContentClass(classSymbolicName);
            if (contentClass.id == contentClass.name) {
                this._contentClassSelector.repository.retrieveContentClassList(dojo_lang.hitch(this, function (contentClassList) {
                    contentClass = contentClassList[0];
                    this._setRecordClass(contentClass);
                }), [classSymbolicName]);
            } else {
                this._setRecordClass(contentClass);
            }
        }, _setRecordClass:function (contentClass) {
            if (this._contentClassSelector.isItemAvailable(contentClass)) {
                this._contentClassSelector.setSelected(contentClass);
            } else {
                if (contentClass.id == contentClass.name && this._recordClassLabel) {
                    contentClass.name = this._recordClassLabel;
                }
                if (contentClass) {
                    this._contentClassSelector.setLabel(contentClass.name);
                    this._contentClassSelector.onContentClassSelected(contentClass);
                }
            }
        }, getRecordClassSymbolicName:function () {
            return this._recordClass.id;
        }, setRecordClassLabel:function (label) {
            this._recordClassLabel = label;
        }, getClassProperties:function () {
            var docProperties = [];
            docProperties = this._commonProperties.getPropertiesJSON(true);
            var attrDef;
            var defaultValue;
            for (var attrDefNdx in this._attributes) {
                attrDef = this._attributes[attrDefNdx];
                defaultValue = attrDef.defaultValue;
                if (attrDef.hidden && defaultValue && (defaultValue.length > 0)) {
                    docProperties.push({"name":attrDef.id, "value":defaultValue});
                }
            }
            return docProperties;
        }, setTargetLocation:function (repository, folderId) {
            repository.retrieveItem(folderId, dojo_lang.hitch(this, function (itemRetrieved) {
                this._folderSelector.setSelected(itemRetrieved);
            }));
        }, setPropertyValue:function (property, value) {
            return this._commonProperties.setPropertyValue(property, value);
        }, getFPRepositoryLocation:function () {
            return this._fp_repository_location;
        }, getFilePlanRepository:function () {
            return this._filePlanRepository;
        }, setFilePlanRepository:function (repository) {
            this._filePlanRepository = repository;
        }, getFolderSelectorWidget:function () {
            return this._folderSelector;
        }, getRecordClassSelectorWidget:function () {
            return this._contentClassSelector;
        }, getFolderSelectTableRow:function () {
            return this._folderSelectorRow;
        }, getCommonPropertiesDiv:function () {
            return this._commonPropertiesDiv;
        }, getRepositorySelectorRow:function () {
            return this._repositorySelectorRow;
        }, getRecordClassSelectorTableRow:function () {
            return this._contentClassSelectorRow;
        }, setAutoMapPropertyValues:function (autoMap) {
            this._shouldMapProperties = autoMap;
        }, onRenderAttributes:function (attributes) {
        }, onCompleteRendering:function () {
        }, setIsFromEntryTemplate:function (value) {
            this._isFromEntryTemplate = value;
        }, isPhysicalDocument:function () {
            var documentContent = this._originalDocument.attributes[ier_constants.Property_ContentElementPresent];
            if (documentContent && documentContent.length == 0) {
                return true;
            }
            if (documentContent && documentContent.length > 0 && documentContent[0] == ier_constants.Mimetype_ExternalDocument) {
                return true;
            }
            return false;
        }, resetPropertiesPane:function () {
            dojo_style.set(this._contentClassSelectorDisabled.domNode, "display", "");
            dojo_style.set(this._contentClassSelectorDisabledLabel, "display", "");
            dojo_style.set(this._fileplanLocationDisabledLabel, "display", "");
            dojo_style.set(this._folderSelectorDisabled.domNode, "display", "");
            if (this._contentClassSelector) {
                dojo_style.set(this._contentClassSelector.domNode, "display", "none");
                dojo_style.set(this._contentClassLabel, "display", "none");
                this._contentClassSelector.setDisabled(false);
            }
            if (this._folderSelector) {
                dojo_style.set(this._folderSelector.domNode, "display", "none");
                dojo_style.set(this._fileplanLocationLabel, "display", "none");
                this._folderSelector.setDisabled(false);
            }
            dojo_style.set(this._commonPropertiesDiv, "display", "none");
            this._filePlanRepositorySelector.setSelected("0");
            this.resetValues();
        }, resetValues:function () {
            this._fp_repository_location = null;
            this._namingPatternEnabled = true;
            this._contentClass = null;
            this._recordClassLabel = null;
            this._filePlanRepository = null;
            this._shouldMapProperties = true;
            this._commonAttributes = null;
            this._nameFromNamingPattern = null;
            this._isFromEntryTemplate = false;
        }, getTargetFilePlanRepository:function (p8RepositoryId) {
            var repositories = this.getFilePlanRepositories();
            for (var i in repositories) {
                var repository = repositories[i];
                var currentRepo_p8RepositoryId = repository.objectStoreName;
                if (currentRepo_p8RepositoryId == p8RepositoryId) {
                    return repository;
                }
            }
        }, createRendering:function (repository, items) {
            this.repository = repository;
            if (items.length == 1) {
                this._originalDocument = items[0];
                this._itemProperties = this._originalDocument.attributes;
                this._isEmailDocument = this._originalDocument.getContentClass().id == ier_constants.ClassName_Email;
            }
            this.originalDocumentTitle = this._originalDocument.name;
            this._filePlanRepositorySelector = new ier_widget_FilePlanRepositorySelector({});
            this.addChildWidget(this._filePlanRepositorySelector);
            this._repositorySelector.appendChild(this._filePlanRepositorySelector.domNode);
            this._commonProperties.setRepository(repository);
            this.connect(this._filePlanRepositorySelector, "onSelect", function (repositories) {
                var repository = repositories[0];
                if (repository.id == this._blankRepository.id) {
                    this.resetPropertiesPane();
                } else {
                    this.resetValues();
                    this._filePlanRepository = repository;
                    if (repository.isIERLoaded()) {
                        this.renderFolderAndClassSelectors(repository);
                    } else {
                        repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                            this.renderFolderAndClassSelectors(repository);
                        }), this.defaultDesktopId);
                    }
                }
                this.onInputChange(this._filePlanRepositorySelector);
            });
            this._filePlanRepositorySelector.setFilePlanRepositories(this.getFilePlanRepositories());
            if (this._filePlanRepositorySelector._dropdown && this._filePlanRepositorySelector._dropdown.focusNode) {
                dojo_attr.set(this._filePlanRepositorySelector._dropdown.focusNode, {"aria-required":true, "aria-invalid":false, "aria-label":ier_messages.declareRecordDialog_repositories, "aria-labelledby":this.id + "_repositoriesLabel"});
            }
        }, onFilePlanLocationChanged:function (filePlanContainerId) {
        }, _enableSelectors:function () {
            dojo_style.set(this._contentClassSelectorDisabled.domNode, "display", "none");
            dojo_style.set(this._contentClassSelectorDisabledLabel, "display", "none");
            dojo_style.set(this._fileplanLocationDisabledLabel, "display", "none");
            dojo_style.set(this._folderSelectorDisabled.domNode, "display", "none");
            if (this._contentClassSelector) {
                dojo_style.set(this._contentClassSelector.domNode, "display", "");
                dojo_style.set(this._contentClassLabel, "display", "");
            }
            if (this._folderSelector) {
                dojo_style.set(this._folderSelector.domNode, "display", "");
                dojo_style.set(this._fileplanLocationLabel, "display", "");
            }
            if (this._commonPropertiesDiv) {
                dojo_style.set(this._commonPropertiesDiv, "display", "");
            }
        }, renderFolderAndClassSelectors:function (repository, rootFolderId, recordClassSymbolicName, onFolderSelectorCompleted) {
            this.loaded = false;
            if (!repository.isFilePlanRepository()) {
                ier_util_dialog.showMessage(ier_messages.no_fileplans_available);
                return;
            }
            this._recordClassSymbolicName = recordClassSymbolicName;
            this._enableSelectors();
            if (this._folderSelector == null) {
                this._folderSelector = new ier_widget_FolderSelectorDropDown({preventSelectRoot:false});
                this.addChildWidget(this._folderSelector);
                this._folderSelectorCell.appendChild(this._folderSelector.domNode);
                this._fileplanLocationLabel.setAttribute("for", this._folderSelector.id);
                dojo_style.set(this._fileplanLocationDisabledLabel, "display", "none");
                dojo_style.set(this._fileplanLocationLabel, "display", "");
                this._setFolderSelectorPermissions(repository, dojo_lang.hitch(this, function () {
                    this._setFolderRoot(repository, rootFolderId, onFolderSelectorCompleted);
                    if (this._folderSelector._dropdown && this._folderSelector._dropdown.focusNode) {
                        dojo_attr.set(this._folderSelector._dropdown.focusNode, {"aria-required":true, "aria-invalid":false, "aria-label":ier_messages.declareRecordDialog_fileplanLocation, "aria-labelledby":this.id + "_fileplanLocationLabel"});
                    }
                }));
                this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                    var folder_id = folder.item.id;
                    var folder_p8Id = ier_util.getGuidId(folder_id);
                    if (this._fp_location != folder_id) {
                        this._fp_repository_location = folder_id;
                        if (this._namingPatternEnabled) {
                            if (folder_p8Id != ier_constants.Id_RecordsManagementFolder && folder_p8Id != ier_constants.Id_FilePlanFolder && folder_p8Id != ier_constants.Id_RootFolder) {
                                this._getNamingPatternName(this._filePlanRepository, dojo_lang.hitch(this, function (name) {
                                    if (this.loaded) {
                                        if (name) {
                                            this._renderAttributes(this._commonAttributes);
                                        } else {
                                            if (this.documentTitleSetFromNamingProperties) {
                                                this._renderAttributes(this._commonAttributes);
                                            }
                                        }
                                    }
                                }));
                            }
                        }
                        this.onFilePlanLocationChanged(this._fp_repository_location);
                        this.onInputChange(this._folderSelector);
                    }
                });
            } else {
                if (this._folderSelector.repository != repository) {
                    this._setFolderSelectorPermissions(repository, dojo_lang.hitch(this, function () {
                        this._setFolderRoot(repository, rootFolderId, onFolderSelectorCompleted);
                        if (this._folderSelector._dropdown && this._folderSelector._dropdown.focusNode) {
                            dojo_attr.set(this._folderSelector._dropdown.focusNode, {"aria-required":true, "aria-invalid":false, "aria-label":ier_messages.declareRecordDialog_fileplanLocation, "aria-labelledby":this.id + "_fileplanLocationLabel"});
                        }
                    }));
                } else {
                    this._setFolderRoot(repository, rootFolderId, onFolderSelectorCompleted);
                }
            }
            if (this._contentClassSelector == null || this._contentClassSelector.repository != repository) {
                this._isRecordClassLoaded = false;
                this._createContentClassSelector(repository, recordClassSymbolicName != null);
            } else {
                if (this._contentClassSelector.getRootClassId() != ier_constants.ClassName_Record) {
                    this._isRecordClassLoaded = false;
                    this._contentClassSelector.setRootClassId(ier_constants.ClassName_Record);
                } else {
                    if (this._recordClassSymbolicName) {
                        this.setRecordClass(this._recordClassSymbolicName);
                    } else {
                        this._setDefaultRecordClass();
                    }
                }
            }
        }, _setDefaultRecordClass:function () {
            if (this._isEmailDocument) {
                this.setRecordClass(ier_constants.ClassName_EmailRecord);
            } else {
                this.setRecordClass(this.isPhysicalDocument() ? ier_constants.ClassName_PhysicalRecord : ier_constants.ClassName_ElectronicRecord);
            }
        }, _setFolderRoot:function (repository, rootFolderId, onComplete) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this._folderSelector.setRoot(itemRetrieved);
                    setTimeout(dojo_lang.hitch(this, function () {
                        if (onComplete) {
                            onComplete();
                        }
                    }), 100);
                }));
            } else {
                this._folderSelector.setRoot(repository);
                setTimeout(dojo_lang.hitch(this, function () {
                    if (onComplete) {
                        onComplete();
                    }
                }), 100);
            }
        }, _setFolderSelectorPermissions:function (repository, onComplete) {
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback();
            folderSelectorCallback.isSelectableByPermission.permissionToCheck = ier_constants.Privilege_CanDeclareRecordToContainer;
            folderSelectorCallback.isSelectableByPermission.notSelectableTooltip = ier_messages.declareRecordDialog_notAllowedToDeclareToFolder;
            this._folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission);
            var repositoryType = repository.getRecordType();
            if (repositoryType && (repositoryType == ier_constants.RepositoryType_Combined || repositoryType == ier_constants.RepositoryType_FilePlan)) {
                repository.getFilePlans(dojo_lang.hitch(this, function (fileplans) {
                    var unselectableFolders = [];
                    var p8repositoryId = repository.attributes ? repository.attributes.p8RepositoryId : null;
                    if (p8repositoryId) {
                        var recordsManagmentFolderDocId = ClassName_RecordsManagementFolder + "," + p8repositoryId + "," + ier_constants.Id_RecordsManagementFolder;
                        unselectableFolders.push(new ecm_widget_UnselectableFolder(recordsManagmentFolderDocId, true, ier_messages.declareRecordDialog_notAllowedToDeclareToFolder));
                    }
                    for (var i in fileplans) {
                        var fileplan = fileplans[i];
                        unselectableFolders.push(new ecm_widget_UnselectableFolder(fileplan.id, true, ier_messages.declareRecordDialog_notAllowedToDeclareToFilePlans));
                    }
                    this._folderSelector.setUnselectableFolders(unselectableFolders);
                    if (onComplete) {
                        onComplete();
                    }
                }));
            }
        }, _createContentClassSelector:function (repository, isFromEntryTemplate) {
            if (this._contentClassSelector) {
                this._contentClassSelectorCell.removeChild(this._contentClassSelector.domNode);
                this._contentClassSelector.destroyRecursive();
            }
            if (this._onContentClassSelectedHandle) {
                this.disconnect(this._onContentClassSelectedHandle);
            }
            if (this._onContentClassLoadedHandle) {
                this.disconnect(this._onContentClassLoadedHandle);
            }
            var rootClassId = this._isEmailDocument ? ier_constants.ClassName_EmailRecord : ier_constants.ClassName_Record;
            this._contentClassSelector = new ecm_widget_ContentClassSelector({repository:repository, selectorStyle:"dropdown", rootClassId:rootClassId, hasAll:false, filterType:"", filterTemplateName:null, "class":"dijitInline", onlySelectable:true});
            if (this._contentClassSelector._dropdown && this._contentClassSelector._dropdown.focusNode) {
                dojo_attr.set(this._contentClassSelector._dropdown.focusNode, {"aria-required":true, "aria-invalid":false, "aria-label":ier_messages.declareRecordDialog_recordClass, "aria-labelledby":this.id + "_contentClassLabel"});
            }
            this._contentClassLabel.setAttribute("for", this._contentClassSelector.id);
            dojo_style.set(this._contentClassSelectorDisabledLabel, "display", "none");
            dojo_style.set(this._contentClassLabel, "display", "");
            this._onContentClassSelectedHandle = this.connect(this._contentClassSelector, "onContentClassSelected", function (recordClass) {
                if (recordClass && this._isRecordClassLoaded) {
                    this._recordClass = recordClass;
                    this._renderProperties(recordClass, repository);
                    this.onInputChange(this._contentClassSelector);
                }
            });
            this._onContentClassLoadedHandle = this.connect(this._contentClassSelector, "onLoaded", function () {
                this._isRecordClassLoaded = true;
                if (this._recordClassSymbolicName) {
                    this.setRecordClass(this._recordClassSymbolicName);
                } else {
                    this._setDefaultRecordClass();
                }
            });
            this.addChildWidget(this._contentClassSelector);
            this._contentClassSelectorCell.appendChild(this._contentClassSelector.domNode);
        }, getFilePlanRepositories:function () {
            if (this._filePlanRepositories == null) {
                this._filePlanRepositories = [];
                this._filePlanRepositories.push(this._blankRepository);
                var fp_repos = ecm_model_desktop.repositories;
                for (var i in fp_repos) {
                    var fp_repo = fp_repos[i];
                    if (fp_repo.serverName == this.repository.serverName) {
                        if (ier_widget_admin_config.isSavedFilePlanRepository(fp_repo.id)) {
                            this._filePlanRepositories.push(fp_repo);
                        }
                    }
                }
            }
            return this._filePlanRepositories;
        }, _getNamingPatternName:function (repository, onComplete) {
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                this._nameFromNamingPattern = response.nameFromNamingPattern;
                if (onComplete) {
                    onComplete(this._nameFromNamingPattern);
                }
            }));
            params.requestParams[ier_constants.Param_EntityId] = this._fp_repository_location;
            params.requestParams[ier_constants.Param_EntityType] = ier_constants.EntityType_Record;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetEntityNameFromNamingPattern, ier_constants.PostEncoding, params);
        }, _renderProperties:function (contentClass, repository) {
            this._commonProperties.clearRendering();
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributes) {
                var newAttributes = this.cloneAttributes(attributes);
                this._commonAttributes = newAttributes;
                this.onRenderAttributes(newAttributes);
                this._renderAttributes(newAttributes);
                this.onInputChange(this._commonAttributes);
                this.onCompleteRendering();
                this.loaded = true;
            }));
        }, _renderAttributes:function (attributes) {
            if (attributes) {
                var documentTitleAttribute = this._getAttributeDefinition(ier_constants.Property_DocumentTitle, attributes);
                if (this._nameFromNamingPattern) {
                    if (documentTitleAttribute) {
                        documentTitleAttribute.readOnly = true;
                        documentTitleAttribute.defaultValue = this._nameFromNamingPattern;
                        this.documentTitleSetFromNamingProperties = true;
                    }
                } else {
                    if (this.documentTitleSetFromNamingProperties && documentTitleAttribute && this.loaded) {
                        this.documentTitleSetFromNamingProperties = false;
                        documentTitleAttribute.readOnly = false;
                        documentTitleAttribute.defaultValue = "";
                    }
                }
                if (this._shouldMapProperties) {
                    if (this._recordClass.id == ier_constants.ClassName_EmailRecord && this._originalDocument.getContentClass().id == ier_constants.ClassName_Email) {
                        var toAttributeDef = this._getAttributeDefinition(ier_constants.Property_To, attributes);
                        toAttributeDef.defaultValue = ier_util.arrayToString(this._itemProperties[ier_constants.Property_To]);
                        var ccAttributeDef = this._getAttributeDefinition(ier_constants.Property_CC, attributes);
                        ccAttributeDef.defaultValue = ier_util.arrayToString(this._itemProperties[ier_constants.Property_CC]);
                        var sentOnAttributeDef = this._getAttributeDefinition(ier_constants.Property_SentOn, attributes);
                        sentOnAttributeDef.defaultValue = this._itemProperties[ier_constants.Property_SentOn];
                        var receivedOnAttributeDef = this._getAttributeDefinition(ier_constants.Property_ReceivedOn, attributes);
                        receivedOnAttributeDef.defaultValue = this._itemProperties[ier_constants.Property_ReceivedOn];
                    }
                }
                this._attributes = attributes;
                this._commonProperties.renderAttributes(attributes);
                if (this._shouldMapProperties) {
                    this._mapClassProperties();
                }
            }
        }, _mapClassProperties:function () {
            var documentTitleValue = this._commonProperties.getPropertyValue(ier_constants.Property_DocumentTitle);
            if (documentTitleValue == null || documentTitleValue.length == 0) {
                this.setDocumentTitle(this.originalDocumentTitle);
            }
            var documentClass = this._originalDocument.getContentClass().id;
            if (this._recordClass.id == ier_constants.ClassName_EmailRecord && documentClass == ier_constants.ClassName_Email) {
                this.setPropertyValue(ier_constants.Property_From, this._itemProperties[ier_constants.Property_From]);
                this.setPropertyValue(ier_constants.Property_Subject, this._itemProperties[ier_constants.Property_Subject]);
            }
        }, setDocumentTitle:function (name) {
            if (name) {
                this.setPropertyValue(ier_constants.Property_DocumentTitle, name);
            }
        }, validate:function () {
            if (this._recordClass == null || this._filePlanRepository == null || this._filePlanRepository.id == this._blankRepository.id || this._fp_repository_location == null) {
                return false;
            }
            var errorField = this._commonProperties.validate();
            return (errorField == null);
        }, resizeCommonProperties:function () {
            this._commonProperties.resize();
        }, destroy:function () {
            dojo_array.forEach(this._commonAttributes, function (widget) {
                if (widget) {
                    widget.destroyRecursive();
                }
            });
            if (this._contentClassSelector) {
                this._contentClassSelector.destroyRecursive();
            }
            if (this._filePlanRepositorySelector) {
                this._filePlanRepositorySelector.destroyRecursive();
            }
            if (this._folderSelector) {
                this._folderSelector.destroyRecursive();
            }
            this.inherited(arguments);
        }, _getAttributeDefinition:function (id, attributeDefs) {
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                if (attrDef.id == id) {
                    return attrDef;
                }
            }
        }, cloneAttributes:function (attributeDefs) {
            var copyAttributes = [];
            var itemAttributes = this._originalDocument.attributes;
            var attributesToAvoidMapping = [];
            var continueMapping = true;
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                var clonedAttributeDef = attrDef.clone();
                copyAttributes.push(clonedAttributeDef);
                continueMapping = true;
                if (itemAttributes != null) {
                    if (this.shouldMapParentFolderProperties) {
                        if (clonedAttributeDef.system == true || clonedAttributeDef.hidden == true || (clonedAttributeDef.defaultValue && clonedAttributeDef.defaultValue != "") || (clonedAttributeDef.value && clonedAttributeDef.value != "")) {
                            continueMapping = false;
                        } else {
                            for (var j in attributesToAvoidMapping) {
                                if (clonedAttributeDef.id == attributesToAvoidMapping[j]) {
                                    continueMapping = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (continueMapping && itemAttributes[clonedAttributeDef.id]) {
                        clonedAttributeDef.defaultValue = itemAttributes[clonedAttributeDef.id];
                    }
                }
            }
            return copyAttributes;
        }, _nop:null});
    });
}, "ier/widget/ListTypeSelector":function () {
    define(["dojo/_base/declare", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ecm/Messages", "dojo/text!./templates/ListTypeSelector.html", "dijit/form/Select"], function (dojo_declare, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ecm_messages, templateString) {
        return dojo_declare("ier.widget.ListTypeSelector", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, options:null, messages:null, constructor:function (options) {
            this.messages = ecm_messages;
            this.options = options;
        }, postCreate:function () {
            this.inherited(arguments);
            this.connect(this.listTypeSelection, "onChange", "onChange");
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                this._addSelectOption(option.text, option.value, option.isSelected);
            }
        }, _addSelectOption:function (text, value, isSelected) {
            if (this.listTypeSelection) {
                var option = document.createElement("option");
                option.value = value;
                option.label = text;
                if (isSelected) {
                    option.selected = isSelected;
                }
                this.listTypeSelection.addOption(option);
            }
        }, getSelection:function () {
            return this.listTypeSelection.get("value");
        }, onChange:function () {
        }, _nop:null});
    });
}, "ier/model/RecordCategoryContainerMixin":function () {
    define("ier/model/RecordCategoryContainerMixin", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util) {
        return dojo_declare("ier.model.RecordCategoryContainerMixin", null, {addRecordCategory:function (className, criterias, permissions, dispSchedule, additionalLegacyScheduleParameters, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    var recordCategory = ier_util.createBaseEntityItem(response.parent, this.repository, null, this.parent);
                    this.updatePropertiesAndAttributes(recordCategory, false);
                    this.repository.onItemsUpdated(this);
                    callback(recordCategory);
                }
            }));
            params.requestParams[ier_constants.Param_ParentFolderId] = this.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            if (dispSchedule) {
                if (dispSchedule instanceof ier.model.DefensibleDisposalSchedule) {
                    params.requestParams[ier_constants.Param_RetentionTriggerPropertyName] = dispSchedule.getRMRetentionTriggerPropertyName();
                    params.requestParams[ier_constants.Param_RetentionPeriodYears] = dispSchedule.getRMRetentionPeriod("years");
                    params.requestParams[ier_constants.Param_RetentionPeriodMonths] = dispSchedule.getRMRetentionPeriod("months");
                    params.requestParams[ier_constants.Param_RetentionPeriodDays] = dispSchedule.getRMRetentionPeriod("days");
                } else {
                    params.requestParams[ier_constants.Param_DispositionScheduleId] = dispSchedule.id;
                    dojo_lang.mixin(params.requestParams, additionalLegacyScheduleParameters);
                }
            }
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateRecordCategory, ier_constants.PostEncoding, params);
        }});
    });
}, "ier/widget/dialog/RecordContainerPropertiesDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "dojo/dom-style", "dojo/string", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/RecordContainerPropertiesDialogContent.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/panes/EntityItemDispositionPane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane", "ier/widget/panes/EntityItemDetailPane", "ier/widget/panes/EntityItemLinksPane", "ier/widget/panes/EntityItemHoldPane", "ier/widget/panes/EntityItemHistoryPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, dom_style, dojo_string, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.RecordContainerPropertiesDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _parentFolder:null, _updateOnClose:false, showDispositionPane:false, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemPropertiesPane);
            this.addChildPane(this._entityItemSecurityPane);
            if (this.showDispositionPane) {
                this.addChildPane(this._entityItemDispositionPane);
            }
            this.addChildPane(this._entityItemLinksPane);
            this.addChildPane(this._entityItemHoldPane);
            this.addChildPane(this._entityItemHistoryPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
            this.connect(this, "onCancel", dojo_lang.hitch(this, "_refreshOnClose"));
            this.connect(this, "_onClickApply", "_disableButton");
        }, setDialogMode:function (editable) {
            if (editable) {
                dom_style.set(this._saveButton.domNode, "display", "");
                dom_style.set(this._applyButton.domNode, "display", "");
                this.cancelButton.set("label", ier_messages.baseDialog_cancelButton);
            } else {
                dom_style.set(this._saveButton.domNode, "display", "none");
                dom_style.set(this._applyButton.domNode, "display", "none");
                this.cancelButton.set("label", ier_messages.baseDialog_closeButton);
            }
        }, hasEditablePane:function () {
            return (this.item.privModifyProperties || this.item.privModifyPermissions);
        }, show:function (repository, parentFolder, item) {
            this.inherited("show", arguments);
            this._parentFolder = parentFolder;
            this.item = item;
            if (!this.showDispositionPane) {
                dom_style.set(this._entityItemDispositionPane.controlButton.domNode, "display", "none");
            }
            var externallyManaged = this.item.attributes[ier_constants.Property_RMExternallyManagedBy];
            if (externallyManaged && externallyManaged.length > 0) {
                this.setMessage(dojo_string.substitute(ier_messages.externallyManaged, [externallyManaged]), "info");
            }
            this.setDialogMode(this.hasEditablePane());
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
                this.resize();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                    this.resize();
                }));
            }
        }, validateInput:function () {
            var childPanes = this.getChildPanes();
            for (var i in childPanes) {
                var childPane = childPanes[i];
                if (childPane.isValidationRequired()) {
                    var validate = childPane.validate();
                    if (!validate) {
                        this._disableButton();
                        return false;
                    }
                }
            }
            this._enableButton();
            return true;
        }, _renderDialog:function () {
        }, _initHoldPane:function () {
            this.connect(this._entityItemHoldPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemHoldPane.isLoaded()) {
                    this._entityItemHoldPane.createRendering(this.repository, this.item);
                }
            }));
        }, _initLinksPane:function () {
            this.connect(this._entityItemLinksPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemLinksPane.isLoaded()) {
                    this._entityItemLinksPane.createRendering(this.repository, this.item);
                }
            }));
        }, _initHistoryPane:function () {
            this.connect(this._entityItemHistoryPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemHistoryPane.isLoaded()) {
                    this._entityItemHistoryPane.createRendering(this.repository, this.item);
                }
            }));
        }, _onClickApply:function () {
            this._updateProperties(false);
        }, _onClickSave:function () {
            this._updateProperties(true);
        }, _refreshOnClose:function () {
            if (this._updateOnClose) {
                var parent = this.item.parent;
                if (parent) {
                    parent.refresh();
                }
                this._updateOnClose = false;
            }
        }, _updateProperties:function (closeOnComplete) {
            if (this.validateInput()) {
                var className = this._entityItemPropertiesPane.getContentClass().id;
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var dispSchedule = this._entityItemDispositionPane ? this._entityItemDispositionPane.getDispositionSchedule() : null;
                var legacyScheduleParams = this._entityItemDispositionPane.getLegacyDispositionScheduleProperties();
                this.item.updateRecordContainerProperties(className, properties, permissions, dispSchedule, legacyScheduleParams, closeOnComplete, closeOnComplete ? dojo_lang.hitch(this, function () {
                    this._updateOnClose = false;
                    this._updatePropertiesCompleted(className, properties, permissions, dispSchedule, legacyScheduleParams);
                    this.onCancel();
                }) : dojo_lang.hitch(this, function () {
                    this._updatePropertiesCompleted(className, properties, permissions, dispSchedule, legacyScheduleParams);
                    this._updateOnClose = true;
                }));
            }
        }, _updatePropertiesCompleted:function (className, properties, permissions, dispSchedule, legacyScheduleParams) {
            if (this.item && legacyScheduleParams == null) {
                if (this.item.getIERObjectItem(ier_constants.Property_DispositionSchedule) != null) {
                    this.item.attributeItems[ier_constants.Property_DispositionSchedule] = null;
                }
            }
        }, _enableButton:function () {
            this._saveButton.set("disabled", false);
            this._applyButton.set("disabled", false);
        }, _disableButton:function () {
            this._saveButton.set("disabled", true);
            this._applyButton.set("disabled", true);
        }});
    });
}, "ier/widget/panes/RelocateContainerGeneralPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/Messages", "ecm/model/Desktop", "ecm/widget/UnselectableFolder", "ecm/widget/FolderSelectorCallback", "ier/constants", "ier/messages", "ier/widget/_FolderSelectorDropDown", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/RelocateContainerGeneralPane.html", "dijit/form/ValidationTextBox", "ecm/widget/HoverHelp"], function (dojo_declare, dojo_lang, ecm_messages, ecm_model_desktop, ecm_widget_UnselectableFolder, ecm_widget_FolderSelectorCallback, ier_constants, ier_messages, ier_widget_FolderSelectorDropDown, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.RelocateContainerGeneralPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, _container:null, _fp_repository_location:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
        }, createRendering:function (repository, relocateDialog, items) {
            this._items = items;
            this._relocateDialog = relocateDialog;
            this._reasonForRelocate.set("missingMessage", ecm_messages.property_missingMessage);
            this._setReasonLength(repository);
            if (this._folderSelector) {
                this._folderSelector.destroy();
                this._folderSelector = null;
            }
            this._folderSelector = new ier_widget_FolderSelectorDropDown();
            this._folderSelector.selectRootInitially = false;
            this._folderSelector.preventSelectRoot = false;
            this.addChildWidget(this._folderSelectorCell);
            this._folderSelectorCell.appendChild(this._folderSelector.domNode);
            this._setFolderSelectorPermissions(repository, dojo_lang.hitch(this, function () {
                this._setFolderRoot(repository, ecm_model_desktop.getCurrentFilePlanId());
            }));
            this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                this._fp_repository_location = folder.item.id;
                this.onInputChange(this._folderSelector);
            });
        }, _setFolderRoot:function (repository, rootFolderId) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this._folderSelector.setRoot(itemRetrieved);
                }));
            } else {
                this._folderSelector.setRoot(repository);
            }
        }, _onNameChange:function () {
            this.onInputChange(this._reasonForRelocate);
        }, _setReasonLength:function (repository) {
            var contentClass = repository.getContentClass(ier_constants.ClassName_RecordCategory);
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                for (var i in attributeDefinitions) {
                    var attributeDefinition = attributeDefinitions[i];
                    if (attributeDefinition.id == ier_constants.Property_ReasonForReclassification) {
                        this._reasonForRelocate.set("maxLength", attributeDefinition.maxLength);
                        break;
                    }
                }
            }));
        }, getReasonForRelocate:function () {
            return this._reasonForRelocate.get("value");
        }, getTargetContainer:function () {
            return this._fp_repository_location;
        }, _setFolderSelectorPermissions:function (repository, onComplete) {
            var permission = null;
            if (this._items[i].getEntityType() == ier_constants.EntityType_RecordCategory) {
                permission = ier_constants.Privilege_AddRecordCategory;
            } else {
                permission = ier_constants.Privilege_AddRecordFolder;
            }
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback(permission, ier_messages.relocateRecordContainerDialog_notAllowedToRecloateToFolde);
            this._folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            var sourceContainer = this._items[0].parent.id;
            var unselectableFolders = [];
            var unselectableItem = new ecm_widget_UnselectableFolder(sourceContainer, true, ier_messages.relocateRecordContainerDialog_SourceAndTargetContainerMustBeDifferent);
            unselectableFolders.push(unselectableItem);
            var unselectableItem = new ecm_widget_UnselectableFolder(this._items[0].id, true, ier_messages.relocateRecordContainerDialog_ChildOfSourceCannotBeSelected);
            unselectableItem.allowSelectChildren = false;
            unselectableFolders.push(unselectableItem);
            this._folderSelector.setUnselectableFolders(unselectableFolders);
            if (onComplete) {
                onComplete();
            }
        }, validate:function () {
            if (this._reasonForRelocate.get("value").length == 0 || this._fp_repository_location == null) {
                return false;
            } else {
                return true;
            }
        }});
    });
}, "url:ier/widget/templates/DocumentSelector.html":"<div class=\"ierObjectSelector noFocus dijitInline\" data-dojo-attach-point=\"containerNode\"  \r\n\tdata-dojo-attach-event=\"onFocus: _onFocusContainer\">\r\n\t<div class=\"dijitInline\" data-dojo-attach-point=\"_selectedObjectsContainer\" tabindex=\"0\" aria-label=\"${label}\">\r\n\t\t<input id=\"${labelId}\" type=\"text\" style=\"display:none\">\r\n\t\t<input tabIndex=\"-1\" type=\"hidden\" class=\"dijitOffScreen\" data-dojo-attach-point=\"valueNode\"/>\r\n\t\t\r\n\t\t<button class=\"selectButton\" type=\"button\"\r\n\t\t\tdata-dojo-attach-point=\"_selectButton,focusNode\" \r\n\t\t\taria-labelledby=\"${labelId}\" aria-label=\"${label}\"\r\n\t\t\tdata-dojo-type=\"ecm.widget.Button\"\r\n\t\t\tdata-dojo-attach-event=\"onClick: _onSelectObject\">${selectButtonLabel}</button>\r\n\t</div>\r\n</div>", "url:ier/widget/dialog/templates/AddRecordVolumeDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemGeneralPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemGeneralPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\" open=\"false\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/model/TaskTreeModel":function () {
    define("ier/model/TaskTreeModel", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/_base/array", "dojo/aspect", "ecm/model/_ModelObject", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/model/AsyncTaskResultSet", "ier/messages", "ier/constants", "ier/model/CategoryTask"], function (dojo_declare, dojo_lang, dojo_connect, dojo_array, dojo_aspect, ecm_model_ModelObject, ecm_model_Desktop, ecm_model_AsyncTask, ecm_model_AsyncTaskResultSet, ier_messages, ier_constants, ier_model_CategoryTask) {
        var TaskTreeModel = dojo_declare("ier.model.TaskTreeModel", [ecm_model_ModelObject], {constructor:function () {
            this.id = "TaskNavigation";
            this.name = "TaskNavigation";
            this._loadedItems = {};
            this.rootObject = new ecm_model_ModelObject("rootTaskNavigation", "rootTaskNavigation");
            this._desktopChangeHandler = dojo_connect.connect(ecm_model_Desktop.taskManager, "onAsyncTaskItemAdded", this, "_onDesktopChanged");
            this._desktopChangeHandler = dojo_connect.connect(ecm_model_Desktop, "onChange", this, "_onDesktopChanged");
        }, _onDesktopChanged:function (modelObject) {
            if (modelObject == this.recurringCategoryTask) {
                if (this.recurringCategoryTask && this.recurringCategoryTask.opened == true) {
                    this.reload(this.recurringCategoryTask);
                }
            }
        }, reload:function (node) {
            this.getChildren(parent, dojo_lang.hitch(this, function (newChildren) {
                this.onChildrenChange(parent, newChildren);
                for (var i in newChildren) {
                    this.onChange(newChildren[i]);
                }
            }));
        }, _repostioryChanged:function (repository) {
            this._onDesktopChanged(repository);
        }, destroy:function () {
            this._desktopChangeHandler.remove();
        }, isLoaded:function (item) {
            return this._loadedItems[this.getIdentity(item)] ? true : false;
        }, getRoot:function (onItem) {
            onItem(this.rootObject);
        }, mayHaveChildren:function (item) {
            if (item && item.id == ier_constants.TaskCategories_RecurringTasks) {
                return true;
            } else {
                return false;
            }
        }, fetchNextPage:function (pagedResultSet, parentItem, onComplete) {
            this.onProcessingStarted(parentItem);
            pagedResultSet.retrieveNextPage(dojo_lang.hitch(this, function () {
                this.replaceChildren(parentItem, pagedResultSet);
                this.onProcessingComplete(parentItem);
                if (onComplete) {
                    onComplete();
                }
            }));
        }, replaceChildren:function (parentItem, results) {
            var childItems = [].concat(results.getItems());
            this._addPageForwardItem(childItems, results, parentItem);
            this.onChildrenChange(parentItem, childItems);
        }, getChildren:function (parentItem, onComplete) {
            this.onProcessingStarted(parentItem);
            if (parentItem == this.rootObject) {
                var childItems = [];
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_AllTasks, name:ier_messages.taskPane_allTasks}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_ScheduledTasks, name:ier_messages.taskPane_scheduledTasks, taskStatus:ier_constants.TaskStatus_Scheduled}));
                this.recurringCategoryTask = new ier_model_CategoryTask({id:ier_constants.TaskCategories_RecurringTasks, name:ier_messages.taskPane_recurringTasks, taskListingPaneClass:"ier/widget/tasks/RecurringTasksListingPane", isRecurring:true});
                childItems.push(this.recurringCategoryTask);
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_InProgressTasks, name:ier_messages.taskPane_inProgressTasks, taskStatus:ier_constants.TaskStatus_InProgress}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_PausedTasks, name:ier_messages.taskPane_disabledTasks, taskStatus:ier_constants.TaskStatus_Paused}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_CompletedTasks, name:ier_messages.taskPane_completedTasks, taskStatus:ier_constants.TaskStatus_Completed, taskListingPaneClass:"ier/widget/tasks/CompletedTasksListingPane"}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_FailedTasks, name:ier_messages.taskPane_failedTasks, taskStatus:ier_constants.TaskStatus_Failed}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_ReportTasks, name:ier_messages.taskPane_reportTasks, taskType:ier_constants.TaskType_Report, taskListingPaneClass:"ier/widget/tasks/ReportTasksListingPane"}));
                childItems.push(new ier_model_CategoryTask({id:ier_constants.TaskCategories_DefensibleDisposalTasks, name:ier_messages.taskPane_defensibleDisposalTasks, taskType:ier_constants.TaskType_DefensibleDisposal, taskListingPaneClass:"ier/widget/tasks/DefensibleDisposalTasksListingPane"}));
                this.rootObject.children = childItems;
                onComplete(childItems);
            }
            if (parentItem && parentItem.id == ier_constants.TaskCategories_RecurringTasks) {
                parentItem.opened = true;
                var params = {};
                params[ier_constants.Param_IsRecurring] = true;
                params[ier_constants.Param_Parent] = "IER";
                ecm.model.desktop.taskManager.retrieveAsyncTasks(params, dojo_lang.hitch(this, function (response) {
                    response.parentFolder = parentItem;
                    response.parent = parentItem;
                    response.isRecurring = true;
                    response.parentFilter = "IER";
                    var resultSet = new ecm_model_AsyncTaskResultSet(response);
                    var childItems = [].concat(resultSet.items);
                    this._addPageForwardItem(childItems, resultSet, parentItem);
                    this._loadedItems[this.getIdentity(parentItem)] = parentItem;
                    this.onProcessingComplete(parentItem);
                    onComplete(childItems);
                }));
            }
        }, _addCategoryItem:function (item) {
            item.isTaskRootNode = true;
            return item;
        }, _addPageForwardItem:function (children, resultSet, parentItem) {
            var continuable = resultSet.hasContinuation();
            if (continuable) {
                var id = "continuation_" + new Date().getTime();
                var moreLink = new ecm_model_ModelObject(id, ecm.messages.more_paging_link);
                moreLink.continuationData = resultSet.continuationData;
                moreLink.pagedResultSet = resultSet;
                moreLink.isMoreLink = true;
                children.push(moreLink);
                parentItem.moreLink = moreLink;
                moreLink.parent = parentItem;
            }
        }, isItem:function (something) {
            return true;
        }, fetchItemByIdentity:function () {
        }, getIdentity:function (item) {
            return item.id;
        }, getLabel:function (item) {
            return item.name;
        }, reload:function (parent) {
            this.onProcessingStarted(parent);
            this.getChildren(parent, dojo_lang.hitch(this, function (newChildren) {
                this.onChildrenChange(parent, newChildren);
                for (var i in newChildren) {
                    this.onChange(newChildren[i]);
                }
            }));
        }, onChange:function (item) {
        }, onChildrenChange:function (parent, newChildrenList) {
        }, onProcessingStarted:function (item) {
        }, onProcessingComplete:function (item) {
        }});
        return TaskTreeModel;
    });
}, "ier/model/ReportDefinition":function () {
    define("ier/model/ReportDefinition", ["dojo/_base/declare", "dojo/_base/lang", "ier/model/_BaseEntityObject", "ecm/model/Request", "ier/util/util", "ier/messages", "ier/constants"], function (dojo_declare, dojo_lang, ier_model_BaseEntityObject, ecm_model_Request, ier_util, ier_messages, ier_constants) {
        return dojo_declare("ier.model.ReportDefinition", [ier_model_BaseEntityObject], {description:null, descriptionkey:null, titlekey:null, entryHelp:null, entryHelpkey:null, queries:null, parameters:null, isLoaded:false, tableName:null, constructor:function () {
            this.queries = [];
            this.parameters = [];
        }, getDescription:function () {
            return this.description;
        }, setDescription:function (desp) {
            this.description = desp;
        }, setDescriptionLocalizationKey:function (key) {
            this.descriptionkey = key;
        }, getDescriptionLocalizationKey:function () {
            return this.descriptionkey;
        }, setTitleLocalizationKey:function (key) {
            this.titlekey = key;
        }, getTitleLocalizationKey:function () {
            return this.titlekey;
        }, setQueries:function (queries) {
            for (var i in queries) {
                var query = queries[i];
                this.queries.push({"sql":query.query_statement, "entity_type":query.query_entity_type});
            }
        }, getQueryNumber:function () {
            return this.queries.length;
        }, getQueries:function () {
            return this.queries;
        }, addParameter:function (symname, displayname, isReq, datatype, cardinality, values) {
            var pValues = [];
            if (values) {
                for (var i in values) {
                    var displayName = values[i].value;
                    if (values[i].value_id == "Record") {
                        displayName = ier_messages.reportDefinitionDialog_Record;
                    } else {
                        if (values[i].value_id == ier_constants.ClassName_RecordCategory) {
                            displayName = ier_messages.reportDefinitionDialog_RecordCategory;
                        } else {
                            if (values[i].value_id == ier_constants.ClassName_Volume) {
                                displayName = ier_messages.reportDefinitionDialog_Volume;
                            } else {
                                if (values[i].value_id == ier_constants.ClassName_RecordFolder) {
                                    displayName = ier_messages.reportDefinitionDialog_RecordFolder;
                                }
                            }
                        }
                    }
                    pValues.push({"value":values[i].value_id, "displayName":displayName, "key":values[i].value_key});
                }
            }
            if (cardinality) {
                if (cardinality == "Single") {
                    cardinality = "SINGLE";
                } else {
                    if (cardinality == "List") {
                        cardinality = "LIST";
                    }
                }
            }
            if (pValues.length > 0) {
                this.parameters.push({"symname":symname, "displayname":displayname, "datatype":datatype, "cardinality":cardinality, "isreq":isReq, "values":pValues});
            } else {
                this.parameters.push({"symname":symname, "displayname":displayname, "datatype":datatype, "cardinality":cardinality, "isreq":isReq});
            }
        }, getParameterNumber:function () {
            return this.parameters.length;
        }, getParameters:function () {
            return this.parameters;
        }, setEntryHelp:function (desp) {
            this.entryHelp = desp;
        }, setEntryHelpLocalizationKey:function (key) {
            this.entryHelpkey = key;
        }, getEntryHelp:function () {
            return this.entryHelp;
        }, getEntryHelpLocalizationKey:function () {
            return this.entryHelpkey;
        }, retrieveChoiceList:function (choiceListId, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.choiceListItems = [];
                for (var i in response.datastore.items) {
                    var itemJSON = response.datastore.items[i];
                    var item = {value:itemJSON.fixedValue, displayName:itemJSON.name};
                    this.choiceListItems.push(item);
                }
                if (callback) {
                    callback(this._choiceListItems);
                }
            }));
            params.requestParams[ier_constants.Param_Id] = choiceListId;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetChoiceList, ier_constants.PostEncoding, params);
        }, loadReportDefinition:function (callback) {
            if (!this.isLoaded) {
                var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    var reportDefinitionJSON = response.datastore.items[0];
                    this.tableName = reportDefinitionJSON.tableName;
                    if (reportDefinitionJSON.ier_reportdefinition_desc_key) {
                        this.setDescriptionLocalizationKey(reportDefinitionJSON.ier_reportdefinition_desc_key);
                    }
                    if (reportDefinitionJSON.ier_reportdefinition_title_key) {
                        this.setTitleLocalizationKey(reportDefinitionJSON.ier_reportdefinition_title_key);
                    }
                    if (reportDefinitionJSON.ier_reportdefinition_entryhelp_desc_key) {
                        this.setEntryHelpLocalizationKey(reportDefinitionJSON.ier_reportdefinition_entryhelp_desc_key);
                    }
                    if (reportDefinitionJSON.ier_reportdefinition_entryhelp) {
                        this.setEntryHelp(reportDefinitionJSON.ier_reportdefinition_entryhelp);
                    }
                    if (reportDefinitionJSON.ier_reportdefinition_queries) {
                        this.setQueries(reportDefinitionJSON.ier_reportdefinition_queries);
                    }
                    this.name = reportDefinitionJSON.template_name;
                    this.title = ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_title_key, reportDefinitionJSON.ier_reportTitle);
                    this.description = ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_desc_key, reportDefinitionJSON.template_desc);
                    this.entryHelp = ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_entryhelp_desc_key, reportDefinitionJSON.ier_reportdefinition_entryhelp);
                    if (reportDefinitionJSON.ier_reportdefinition_parameters) {
                        for (var i in reportDefinitionJSON.ier_reportdefinition_parameters) {
                            if (reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_symname == ier_constants.ReportEntry_hold_name) {
                                reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_symname = ier_constants.Property_HoldName;
                                reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_name = ier_messages.report_holdName;
                                reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_datatype = ier_constants.ReportEntry_Param_StringType;
                                reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_cardinality = "Single";
                            }
                            this.addParameter(reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_symname, reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_name, reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_is_required, reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_datatype, reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_cardinality, reportDefinitionJSON.ier_reportdefinition_parameters[i].parameter_values);
                        }
                    }
                    this.isLoaded = true;
                    if (callback) {
                        callback(this);
                    }
                }));
                params.requestParams[ier_constants.Param_ReportId] = this.id;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetReportDefintions, ier_constants.PostEncoding, params);
            } else {
                if (callback) {
                    callback(this);
                }
            }
        }});
    });
}, "ier/widget/search/SearchBuilder":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/aspect", "dojo/dom-class", "dojo/dom-construct", "dijit/form/Select", "ecm/model/SearchConfiguration", "ecm/widget/search/SearchBuilder", "ecm/widget/search/SearchInDropDown", "ier/constants", "ier/messages", "ier/model/SearchTemplate", "ier/util/util", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/DocInfo", "ier/widget/listView/modules/FilePlanToolbar"], function (array, declare, lang, aspect, dom_class, dom_construct, Select, SearchConfiguration, SearchBuilder, SearchInDropDown, constants, messages, SearchTemplate, util, RowContextMenu, DocInfo, FilePlanToolbar) {
        var type2Label = {};
        type2Label[constants.ClassName_Record] = messages.record;
        type2Label[constants.ClassName_RecordCategory] = messages.recordCategory;
        type2Label[constants.ClassName_RecordFolder] = messages.recordFolder;
        type2Label[constants.ClassName_Volume] = messages.volume;
        var type2NameProp = {};
        type2NameProp[constants.ClassName_Record] = constants.Property_DocumentTitle;
        type2NameProp[constants.ClassName_RecordCategory] = constants.Property_RecordCategoryName;
        type2NameProp[constants.ClassName_RecordFolder] = constants.Property_RecordFolderName;
        type2NameProp[constants.ClassName_Volume] = constants.Property_VolumeName;
        var nameProp2Type = {};
        nameProp2Type[constants.Property_DocumentTitle] = constants.ClassName_Record;
        nameProp2Type[constants.Property_RecordCategoryName] = constants.ClassName_RecordCategory;
        nameProp2Type[constants.Property_RecordFolderName] = constants.ClassName_RecordFolder;
        nameProp2Type[constants.Property_VolumeName] = constants.ClassName_Volume;
        var defColumns = [constants.Property_LastModifier, constants.Property_DateLastModified];
        return declare("ier.widget.search.SearchBuilder", SearchBuilder, {postCreate:function () {
            var searchBuilder = this;
            lang.mixin(this.searchDefinition, {createSearchTemplate:function (params) {
                var searchTemplate = new SearchTemplate(params);
                searchTemplate.application = constants.Search_application;
                return searchTemplate;
            }, getSearchConfiguration:function () {
                var searchConfig = SearchConfiguration.getSearchConfiguration({repository:this.repository});
                return lang.mixin(searchConfig, {getRootClassId:function (objectType) {
                    return searchBuilder._searchType || constants.ClassName_Record;
                }, getDefaultAttributeDefinitionId:function (objectType) {
                    return type2NameProp[this.getRootClassId(objectType)];
                }, getNameProperty:function (objectType) {
                    return this.getDefaultAttributeDefinitionId(objectType);
                }, getSearchDefaultColumns:function (objectType) {
                    return [this.getNameProperty(objectType)].concat(defColumns);
                }, isTextSearchTypeSupported:function (textSearchType) {
                    return true;
                }});
            }});
            this.own(aspect.before(this.searchDefinition, "setRepository", function (repository) {
                delete searchBuilder._searchType;
            }));
            this.connect(this.searchDefinition, "setRepository", function (repository) {
                var searchTemplate = this.searchDefinition.searchTemplate;
                var contentClass = searchTemplate.className && searchTemplate.getSearchContentClass();
                if (contentClass) {
                    if (contentClass.allAttributeDefinitions) {
                        this._initSearchType(contentClass.allAttributeDefinitions);
                        this._initTextSearch();
                    } else {
                        contentClass.retrieveAttributeDefinitionsForSearches(lang.hitch(this, function (ads) {
                            this._initSearchType(ads);
                            this._initTextSearch();
                        }));
                    }
                } else {
                    this._initTextSearch();
                }
                this.connect(this.searchDefinition.contentClassSelector, "onContentClassSelected", this._initTextSearch);
            });
            var text = this.searchDefinition._textSearchText;
            if (text) {
                var resultsDisplayOptions = this.searchDefinition.resultsDisplayOptions;
                this.connect(text, "onKeyUp", function () {
                    var searchTemplate = this.searchDefinition.searchTemplate;
                    var resultsDisplay = resultsDisplayOptions.getResultsDisplay();
                    if (searchTemplate && searchTemplate.isNew() && resultsDisplay && !resultsDisplay.saved) {
                        if (text.get("value")) {
                            if (resultsDisplay.sortBy != resultsDisplayOptions.RANK) {
                                resultsDisplay.sortBy = resultsDisplayOptions.RANK;
                                resultsDisplay.sortAsc = false;
                            }
                        } else {
                            if (resultsDisplay.sortBy == resultsDisplayOptions.RANK) {
                                resultsDisplayOptions.processSearchResultsDisplay(resultsDisplay, false);
                            }
                        }
                    }
                });
            }
            this.searchDefinition._disableTextSearchText = function () {
            };
            this.searchDefinition.searchInDropDown.validateRepository = function (repository) {
                if (repository.isIERLoaded()) {
                    return repository.isFilePlanRepository();
                } else {
                    var valid = false;
                    var searchInDropDown = null;
                    repository.loadIERRepository(function (r) {
                        valid = r && r.isFilePlanRepository();
                        if (valid && searchInDropDown) {
                            var store = searchInDropDown.repositorySelect && searchInDropDown.repositorySelect.store;
                            var index = array.indexOf(searchInDropDown.getAvailableRepositoriesForSelection(), repository);
                            if (store && index >= 0) {
                                store.newItem({value:index, label:repository.name});
                            }
                        }
                    });
                    searchInDropDown = this;
                    return valid;
                }
            };
            this.searchDefinition.searchInDropDown.setRoot = function (root) {
                root && root.retrieveItem(constants.Id_RecordsManagementFolder, lang.hitch(this, function (item) {
                    SearchInDropDown.prototype.setRoot.call(this, item);
                    this.repositorySelect.onChange = lang.hitch(this, function (repositoryId) {
                        var repository = this.getAvailableRepositoriesForSelection()[repositoryId];
                        repository && repository.retrieveItem(constants.Id_RecordsManagementFolder, lang.hitch(this, function (item) {
                            this._rootObject = item;
                            this._folderSelector.setRoot(item);
                            this.repositoryTeamspaceName = repository.name;
                        }));
                    });
                }));
            };
            this.own(aspect.before(this.searchDefinition.contentClassSelector, "setRepository", function (repository) {
                if (repository) {
                    for (var type in type2Label) {
                        var contentClass = repository.getContentClass(type);
                        if (contentClass && contentClass.name == contentClass.id) {
                            contentClass.name = type2Label[type];
                        }
                    }
                }
                this.allowMultipleClasses = false;
            }));
            this.own(aspect.before(this.searchDefinition.contentClassSelector, "setSelected", function (contentClasses, multiple) {
                this.allowMultipleClasses = false;
            }));
            this._searchType = constants.ClassName_Record;
            this._searchTypeSelect = new Select({"class":"ierSearchTypeSelect", options:[{value:constants.ClassName_Record, label:messages.record, selected:true}, {value:constants.ClassName_RecordCategory, label:messages.recordCategory}, {value:constants.ClassName_RecordFolder, label:messages.recordFolder}, {value:constants.ClassName_Volume, label:messages.volume}]});
            var node = this.searchDefinition.searchOptionContainer;
            dom_construct.create("label", {"for":this._searchTypeSelect.id, "class":"ierSearchTypeLabel", innerHTML:messages.search_for + ":"}, node);
            this._searchTypeSelect.placeAt(node);
            this.connect(this._searchTypeSelect, "onChange", function () {
                this._searchType = this._searchTypeSelect.get("value");
                var objectType = (this._searchType == constants.ClassName_Record ? SearchConfiguration.prototype.OBJECT_TYPE.DOCUMENT : SearchConfiguration.prototype.OBJECT_TYPE.FOLDER);
                var options = this.searchDefinition._moreOptions.getSelectedOptions() || {};
                if (objectType != options.objectType) {
                    options.objectType = objectType;
                    this.searchDefinition._moreOptions.setSelectedOptions(options);
                }
                this.searchDefinition.contentClassSelector.defaultToFirstItem = true;
                this.searchDefinition.contentClassSelector.setRootClassId(this._searchType);
            });
            this.inherited(arguments);
            dom_class.add(this.searchContainerNode, "ierCenterPane");
        }, getContentListModules:function () {
            var modules = this.inherited(arguments);
            util.replaceModule(modules, "toolbar", FilePlanToolbar);
            util.replaceModule(modules, "rightPane", {moduleClass:DocInfo, showPreview:false});
            return modules;
        }, getContentListGridModules:function () {
            var modules = this.inherited(arguments);
            util.replaceModule(modules, "rowContextMenu", RowContextMenu);
            return modules;
        }, _initSearchType:function (ads) {
            var searchType;
            if (array.some(ads || [], function (ad) {
                return !!(searchType = nameProp2Type[ad.id]);
            }) && searchType != this._searchType) {
                this._searchType = searchType;
                this._searchTypeSelect.set("value", searchType, false);
                var contentClassSelector = this.searchDefinition.contentClassSelector;
                if (contentClassSelector && contentClassSelector.rootClassId && contentClassSelector.rootClassId != searchType) {
                    contentClassSelector.setRootClassId(searchType);
                }
            }
        }, _initTextSearch:function () {
            var node = this.searchDefinition.textSearchContainer.parentNode;
            if (node) {
                var resultsDisplayOptions = this.searchDefinition.resultsDisplayOptions;
                resultsDisplayOptions.setTextSearchEnabled(false);
                if (!this._searchType || this._searchType == constants.ClassName_Record) {
                    var text = this.searchDefinition._textSearchText;
                    text && text.set("disabled", true);
                    this._textSearchRepository = this.searchDefinition.repository || this.repository;
                    this._textSearchRepository.retrieveAssociatedContentRepositories(function (items) {
                        var hasVerity = array.some(items || [], function (item) {
                            return item.textSearchType == constants.Search_CBRType_Verity;
                        });
                        var hasCascade = array.some(items || [], function (item) {
                            return item.textSearchType == constants.Search_CBRType_Cascade;
                        });
                        var optimizationNotSupported = array.some(items || [], function (item) {
                            return (item.textSearchOptimization == constants.Search_CBR_Dynamic_Switching && item.textSearchRankOverride == constants.Search_CBR_QueryRankOverride_Required);
                        });
                        if (!optimizationNotSupported && ((hasVerity && !hasCascade) || (!hasVerity && hasCascade))) {
                            text && text.set("disabled", false);
                            resultsDisplayOptions.setTextSearchEnabled(true);
                        }
                    });
                    dom_class.toggle(node, "dijitHidden", false);
                } else {
                    dom_class.toggle(node, "dijitHidden", true);
                }
            }
        }});
    });
}, "url:ier/widget/dialog/templates/ObjectStoreSecurityDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier/widget/panes/EntityItemObjectStoreSecurityPane\"></div>\r\n\t</div>\r\n</div>", "url:ier/widget/tasks/templates/TaskInformationPane.html":"<div class=\"taskPane ierEntityitemDetailsPane\" style=\"width: 100%; height: 100%;\"\r\n\tdata-dojo-attach-point=\"containerNode, taskPreviewPane\" style=\"width: 100%; height: 100%;\" >\r\n\t     <div data-dojo-attach-point=\"noItemSelected\" style=\"display:none; margin: auto; padding-top: 15px; text-align:center;\">${ier_messages.taskPane_noItemSelected}</div>\r\n\t\t <div data-dojo-type=\"dijit/layout/TabContainer\" style=\"padding:10px;\" data-dojo-attach-point=\"taskPreviewTabContainer\" data-dojo-props=\"useMenu: false, useSlider: false\">\r\n\t\t</div>\r\n</div>", "url:ier/widget/panes/templates/ReportDefinitionQueryPane.html":"<div class=\"ierEntityItemPropertiesPane\">\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t<table data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-attach-point=\"_paraGrid\" data-dojo-props=\"autoWidth:true\" style=\"display:none;\"><thead><tr>\r\n\t\t<th field=\"propertyName\" width=\"16em\">${ier_messages.reportDefinitionDialog_SelectedProperty}</th>\r\n\t\t<th field=\"symName\" width=\"16em\">${ier_messages.reportDefinitionDialog_SQLPropertyName}</th>\r\n\t\t<th field=\"isReq\" width=\"6em\" editable=\"true\" cellType=\"dojox.grid.cells.Bool\">${ier_messages.reportDefinitionDialog_Required}</th>\r\n\t\t</tr></thead></table> \r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"commonSQLPane\" style=\"display:none; margin-top:20px\">\r\n\t\t<label data-dojo-attach-point=\"_sqlAreaTitle\" for=\"${id}_sqlArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t<textarea id=\"${id}_sqlArea\" data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t<br><textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlArea2\" rows=\"6\" cols=\"80\" style=\"width:auto\" style=\"display:none\"></textarea>\r\n\t</div>\r\n\t\t\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\" data-dojo-attach-point=\"rmentitySQLPane\" style=\"display:none; margin-top:20px\">\t\t\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_Record}\" data-dojo-attach-point=\"_recordTitlePane\" class=\"ierPropertiesTitlePane\"  data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_RecordCategory}\" data-dojo-attach-point=\"_recordCategoryTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordCateogryArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordCateogryArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_RecordFolder}\" data-dojo-attach-point=\"_recordFolderTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlRecordFolderArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlRecordFolderArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" title=\"${ier_messages.reportDefinitionDialog_Volume}\" data-dojo-attach-point=\"_volumeTitlePane\" class=\"ierPropertiesTitlePane\" data-dojo-props=\"open:true\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t\t\t\t<label for=\"_sqlVolArea\">${ier_messages.reportDefinitionDialog_SQLQueryStatement}:</label><br>\r\n\t\t\t\t<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" data-dojo-attach-point=\"_sqlVolArea\" rows=\"6\" cols=\"80\" style=\"width:auto\"></textarea>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t</div>\r\n</div>", "ier/model/Location":function () {
    define(["dojo/_base/declare", "ier/model/_BaseEntityObject"], function (dojo_declare, ier_model_BaseEntityObject) {
        var Location = dojo_declare("ier.model.Location", [ier_model_BaseEntityObject], {constructor:function (arguments) {
        }});
        ier_model_BaseEntityObject.registerClass("Location", Location);
        return Location;
    });
}, "url:ier/widget/dialog/templates/AddFilePlanDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_filePlanRepositoryPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/FilePlanRepositoryPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier/widget/panes/EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>", "url:ier/widget/panes/templates/EntityItemObjectStoreSecurityPane.html":"<div class=\"ierEntityItemSecurityPane\">\r\n\t<div data-dojo-attach-point=\"_securityPane\" data-dojo-type=\"ier/widget/panes/ObjectStoreSecurityPane\"></div>\r\n</div>", "ier/widget/panes/ConvertDefensibleDisposalDispositionPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/store/Memory", "dijit/registry", "ecm/widget/UnselectableFolder", "ecm/widget/FolderSelectorCallback", "ier/widget/dialog/IERBaseDialogPane", "ier/constants", "ier/messages", "ier/util/util", "ier/model/DefensibleDisposalSchedule", "dojo/text!./templates/ConvertDefensibleDisposalDispositionPane.html", "ier/widget/panes/DefensibleDisposalDispositionPane", "ier/widget/search/SearchInDropDown"], function (dojo_declare, dojo_lang, dojo_domConstruct, dojo_style, dojo_class, dojo_store_Memory, dijit_registry, ecm_UnselectableFolder, ecm_FolderSelectorCallback, IERBaseDialogPane, ier_constants, ier_messages, ier_util, DefensibleDisposalSchedule, templateString) {
        return dojo_declare("ier.widget.panes.ConvertDefensibleDisposalDispositionPane", [IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, folder:null, postCreate:function () {
            this.title = ier_messages.convertDefensibleDisposalDispositionPane_title;
            this.connect(this.defensibleDisposalPane, "onInputChange", "onInputChange");
            dojo_style.set(this.defensibleDisposalPane.containerNode, "margin-top", "0px");
            dojo_style.set(this.defensibleDisposalPane.ddScheduleSectionTable, {"margin-top":"0px", "width":"100%", "margin-left":"0px"});
        }, createRendering:function (repository, item) {
            var folderSelectorCallback = new ecm_FolderSelectorCallback("privCanConvertToDDContainer", ier_messages.convertNotEligibleForDDConversion);
            this.folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            this.connect(this.folderSelector, "onFolderSelected", function (folder) {
                this.folder = folder.item;
                this.repository = this.folderSelector.repository;
                this._loadDDPane();
            });
            if (!item) {
                this.folderSelector.setRoot(ecm.model.desktop.getAuthenticatingRepository());
            } else {
                this.folder = item;
                this.repository = repository;
                this.folderSelector.setRoot(this.repository);
                this.folderSelector.setSelected(this.folder);
            }
        }, _loadDDPane:function () {
            if (this.repository.isIERLoaded()) {
                this.defensibleDisposalPane.createRendering({repository:this.repository});
                this.onInputChange();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function () {
                    this.defensibleDisposalPane.createRendering({repository:this.repository});
                    this.onInputChange();
                }));
            }
        }, validate:function () {
            if (this.folder == null || !this.defensibleDisposalPane.validate()) {
                return false;
            }
            return true;
        }, _getScheduleAttr:function () {
            return this.defensibleDisposalPane.get("schedule");
        }, setFolder:function (item) {
            this.folderSelector.setSelected(item);
        }, _setScheduleAttr:function (schedule) {
            this.defensibleDisposalPane.set("schedule", schedule);
        }});
    });
}, "ier/widget/layout/AdminiPane":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "ecm/Messages", "ecm/model/Desktop", "ecm/widget/layout/AdminPane", "ecm/widget/admin/model/_AdminObjectBase", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/layout/_LaunchBarPane", "ier/messages", "ier/model/admin/Config", "ier/util/dialog", "ier/widget/admin/RepositoryPane", "ier/widget/admin/SettingsPane", "dojo/text!./templates/AdminPane.html", "ecm/widget/admin/AdminTabs", "ecm/widget/admin/AdminTree"], function (array, declare, lang, ecm_messages, Desktop, AdminPane, _AdminObjectBase, ConfirmationDialog, _LaunchBarPane, messages, Config, util_dialog, RepositoryPane, SettingsPane, AdminPane_html) {
        var toc = [{id:"settings", name:messages.admin_settings, iconClass:"adminIconSettings", widgetClass:SettingsPane}, {id:"desktops", name:messages.admin_desktops, iconClass:"adminIconDesktops"}, {id:"repositories", name:messages.admin_repositories, iconClass:"adminIconRepositories"}];
        var AdminObject = declare(_AdminObjectBase, {getLabel:function () {
            return this.label || this.name;
        }, getIconClass:function () {
            return this.iconClass;
        }, mayHaveChildren:function () {
            if (this.id == "desktops" || this.id == "repositories") {
                return true;
            } else {
                return this.inherited(arguments);
            }
        }, getChildren:function (onComplete) {
            if (this.id == "desktops") {
                var treeModel = this.getTreeModel();
                Config.listConfig("desktop", function (list) {
                    var children = array.map(list || [], function (config) {
                        var object = new AdminObject(config.id, config.name);
                        object.label = config.get("name");
                        object.iconClass = "adminIconDesktop";
                        object.widgetClass = SettingsPane;
                        object.params = {desktopId:config.id};
                        object.setTreeModel(treeModel);
                        return object;
                    });
                    onComplete(children);
                });
            } else {
                if (this.id == "repositories") {
                    var treeModel = this.getTreeModel();
                    Config.listConfig("repository", function (list) {
                        var children = array.map(list || [], function (config) {
                            var object = new AdminObject(config.id, config.name);
                            object.label = config.get("name");
                            object.iconClass = "adminIconRepositoryP8";
                            object.widgetClass = RepositoryPane;
                            object.params = {repositoryId:config.id};
                            object.setTreeModel(treeModel);
                            return object;
                        });
                        onComplete(children);
                    });
                } else {
                    this.inherited(arguments);
                }
            }
        }, onClick:function () {
            this.getTreeModel().onSelect(this);
        }});
        var AdminTreeModel = declare(null, {constructor:function () {
            this.root = new AdminObject("root");
            this.root.setTreeModel(this);
            array.forEach(toc, function (item) {
                var object = new AdminObject(item.id, item.name);
                object.iconClass = item.iconClass;
                object.widgetClass = item.widgetClass;
                object.params = item.params;
                this.root.addChild(object);
            }, this);
        }, destroy:function () {
        }, getRoot:function (onItem) {
            onItem(this.root);
        }, mayHaveChildren:function (item) {
            return item.mayHaveChildren();
        }, getChildren:function (item, onComplete) {
            item.getChildren(onComplete);
        }, isItem:function (item) {
            return item instanceof AdminObject;
        }, fetchItemByIdentity:function (args) {
        }, getIdentity:function (item) {
            return item.getIdentity();
        }, getLabel:function (item) {
            return item.getLabel();
        }, onChange:function (item) {
        }, onChildrenChange:function (parent, children) {
        }, onSelect:function (item) {
        }});
        return declare(_LaunchBarPane, {templateString:AdminPane_html, postCreate:function () {
            this.inherited(arguments);
            this._model = new AdminTreeModel();
            this.connect(this._model, "onSelect", function (item) {
                if (!item.widget && item.widgetClass) {
                    var title = item.label || item.name;
                    var params = lang.mixin({title:title, iconClass:item.iconClass}, item.params);
                    var widget = item.widget = new item.widgetClass(params);
                    widget.connect(widget, "onClose", function () {
                        if (widget.dirty) {
                            var dialog = new ConfirmationDialog({title:ecm_messages.close, text:ecm_messages.admin_prompt_close_without_save, buttonLabel:ecm_messages.yes, cancelButtonLabel:ecm_messages.no, cancelButtonDefault:true, onExecute:function () {
                                widget.dirty = false;
                                widget.getParent().closeChild(widget);
                            }});
                            dialog.show();
                            util_dialog.manage(dialog);
                            return false;
                        } else {
                            delete item.widget;
                        }
                    });
                    widget.connect(widget, "onChange", function () {
                        if (widget.controlButton) {
                            var mark = widget.dirty ? "* " : "";
                            widget.controlButton.set("label", mark + title);
                        }
                    });
                    widget.connect(widget, "onSelect", function () {
                    });
                }
                if (item.widget) {
                    this._tabs.openTab(item.widget);
                }
            });
            this._tree.setModel(this._model);
        }, startup:function () {
            this.inherited(arguments);
            this._model.root.getChildren(function (children) {
                children[0].onClick();
            });
        }});
    });
}, "ier/model/FilePlansTreeModel":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/data/util/filter", "ecm/model/_ModelObject", "ecm/model/Desktop", "ecm/model/Repository", "ier/messages", "ier/model/FilePlan", "ier/util/dialog"], function (dojo_declare, dojo_lang, dojo_array, dojo_connect, dojo_data_util_filter, ecm_model_ModelObject, ecm_model_desktop, ecm_model_Repository, ier_messages, ier_model_FilePlan, ier_util_dialog) {
        return dojo_declare("ier.model.FilePlansTreeModel", ecm_model_ModelObject, {constructor:function () {
            this._id = "filePlanTreeModelId";
            this._name = this._id;
            this._rootNode = new ecm_model_ModelObject("RepositoryRoot", "");
            this._desktopChangeHandler = dojo_connect.connect(ecm_model_desktop, "onChange", this, function (modelObject) {
                this._onFilePlanChanged(modelObject, dojo_lang.hitch(this, function (filePlan) {
                    if (filePlan.deleted) {
                        this.reloadNode(filePlan.repository);
                    }
                }));
            });
            this._desktopConfigureHandler = dojo_connect.connect(ecm_model_desktop, "onConfigure", this, function (repository, items) {
                this._onFilePlanChanged(items, dojo_lang.hitch(this, function (filePlan) {
                    this.reloadNode(repository);
                    this.reloadNode(filePlan);
                }));
            });
        }, _onFilePlanChanged:function (modelObject, callback) {
            var func = dojo_lang.hitch(this, function (changedModel) {
                if (changedModel instanceof ier_model_FilePlan) {
                    setTimeout(dojo_lang.hitch(this, function () {
                        callback(changedModel);
                    }));
                }
            });
            if (dojo_lang.isArray(modelObject)) {
                dojo_array.forEach(modelObject, func);
            } else {
                func(modelObject);
            }
        }, destroy:function () {
            dojo_connect.disconnect(this._desktopChangeHandler);
            dojo_connect.disconnect(this._desktopConfigureHandler);
            this.inherited(arguments);
        }, getRoot:function (onItem) {
            onItem(this._rootNode);
        }, applyFilter:function (filter) {
            if (filter && filter.length > 0) {
                this.filter = dojo_data_util_filter.patternToRegExp(filter, true);
            } else {
                this.filter = null;
            }
            this.reload();
        }, reload:function () {
            var self = this;
            this.getChildren(this._rootNode, function (newChildren) {
                self.onChildrenChange(self._rootNode, newChildren);
            });
        }, reloadNode:function (item) {
            var self = this;
            if (item) {
                if (item instanceof ier_model_FilePlan) {
                    this.onChange(item);
                } else {
                    this.getChildren(item, function (newChildren) {
                        self.onChildrenChange(item, newChildren);
                    });
                }
            }
        }, isLoaded:function (item) {
            if (item instanceof ier_model_FilePlan) {
                return true;
            } else {
                return false;
            }
        }, mayHaveChildren:function (item) {
            if (item == this._rootNode) {
                return true;
            }
            if (item instanceof ier_model_FilePlan) {
                return false;
            } else {
                return true;
            }
        }, getChildren:function (parentItem, onComplete) {
            if (parentItem == this._rootNode) {
                this._filterItems(ecm_model_desktop.getP8Repositories(), onComplete);
            } else {
                if (parentItem instanceof ecm_model_Repository) {
                    var repository = parentItem;
                    if (repository.isIERLoaded()) {
                        this._getFilePlans(repository, onComplete);
                    } else {
                        repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                            this._getFilePlans(repository, onComplete);
                        }), null, dojo_lang.hitch(this, function () {
                            onComplete(null);
                        }));
                    }
                } else {
                    this._getFilePlans(null, onComplete);
                }
            }
        }, _getFilePlans:function (repository, onComplete) {
            if (repository && repository.isFilePlanRepository()) {
                repository.getFilePlans(this._filterItems, onComplete);
            } else {
                ier_util_dialog.showMessage(ier_messages.no_fileplans_available);
                if (onComplete) {
                    onComplete();
                }
            }
        }, _filterItems:function (items, onComplete) {
            var childItems = [];
            var nameMatch = false;
            for (var i in items) {
                var item = items[i];
                if (!this.filter) {
                    childItems.push(item);
                } else {
                    if (item.name) {
                        nameMatch = item.name.match(this.filter);
                    }
                    if (nameMatch) {
                        childItems.push(item);
                    }
                }
            }
            onComplete(childItems);
        }, isItem:function (item) {
            if (item == this._rootNode) {
                return true;
            }
            if (item) {
                if (item instanceof ecm_model_Repository || item instanceof ier_model_FilePlan) {
                    return true;
                }
            }
            return false;
        }, fetchItemByIdentity:function (keywordArgs) {
        }, getIdentity:function (item) {
            return item.id;
        }, getLabel:function (item) {
            return item.name;
        }, newItem:function (args, parent, insertIndex) {
        }, pasteItem:function (childItem, oldParentItem, newParentItem, bCopy) {
        }, onChange:function (item) {
        }, onChildrenChange:function (parent, newChildrenList) {
        }});
    });
}, "ier/widget/layout/ReportLayout":function () {
    require({cache:{"url:ier/widget/layout/templates/ReportLayout.html":"<div class=\"ierReportLayout\" style=\"height:100%;width:100%\">\r\n\t<div data-dojo-attach-point=\"mainContainer\" data-dojo-type=\"dijit.layout.BorderContainer\" class=\"contentPane\" gutters=\"false\" style=\"height:100%;width:100%\">\t\t\r\n\t\t<div data-dojo-attach-point=\"mainStackContainer\" \r\n\t\t\t data-dojo-type=\"dijit.layout.StackContainer\" \r\n\t\t\t region=\"center\" \r\n\t\t\t class=\"stackContainer\">\r\n\t\t\t <div data-dojo-attach-point=\"mainPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t<div data-dojo-attach-point=\"_reportEntriesPane\" data-dojo-type=\"ier.widget.ReportEntryForm\" data-dojo-props=\"isPopup: true\"></div>\t\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"loginPane\" style=\"display: none\"></div>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/layout/ReportLayout", ["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/dom-class", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/model/Desktop", "ecm/widget/layout/BaseLayout", "ecm/widget/dialog/StatusDialog", "ier/model/FilePlanRepositoryMixin", "ier/model/ReportDefinition", "dojo/text!./templates/ReportLayout.html", "dijit/layout/ContentPane", "ier/widget/ReportEntryForm", "dijit/layout/BorderContainer", "dijit/layout/StackContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_connect, dojo_lang, dojo_domClass, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_model_desktop, ecm_widget_layout_BaseLayout, ecm_StatusDialog, ier_model_FilePlanRepositoryMixin, ier_model_ReportDefinition, templateString) {
        return dojo_declare("ier.widget.layout.ReportLayout", [ecm_widget_layout_BaseLayout, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {widgetsInTemplate:true, templateString:templateString, postCreate:function () {
            dojo_domClass.add(document.body, "ecmWait");
            this.mainStackContainer.selectChild(this.mainPane);
            this._errorDialog = this.createErrorDialog();
            this._messageAddedHandler = dojo_connect.connect(ecm_model_desktop, "onMessageAdded", this._errorDialog, "messageAddedHandler");
            this._statusDialog = new ecm_StatusDialog();
            dojo_connect.connect(ecm_model_desktop, "onRequestStarted", this._statusDialog, "requestStartedHandler");
            dojo_connect.connect(ecm_model_desktop, "onRequestCompleted", this._statusDialog, "requestCompletedHandler");
            _repositoryid = ecm_model_desktop.getRequestParam("repository");
            this.repository = ecm_model_desktop.getRepository(_repositoryid);
            this._reportid = ecm_model_desktop.getRequestParam("itemId");
            var ierRepository = new ier_model_FilePlanRepositoryMixin(this.repository.id, this.repository.name, "", "", this.repository);
            dojo_declare.safeMixin(this.repository, ierRepository);
            this._createRendering();
        }, _createRendering:function () {
            var reportDefinition = new ier_model_ReportDefinition({id:this._reportid, name:this._reportid, repository:this.repository});
            this._reportEntriesPane.createRendering(this.repository, this._reportid, reportDefinition);
            this.mainContainer.resize();
            dojo_domClass.remove(document.body, "ecmWait");
        }});
    });
}, "ier/widget/dialog/LocationDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/PropertyDialogContent.html", "dijit/layout/TabContainer", "ier/widget/panes/EntityItemPropertiesPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.LocationDialog", [ier_dialog_IERBaseDialog], {title:ier_messages.locationDialog_title, contentString:contentString, postCreate:function () {
            this.inherited(arguments);
            this.setIntroText(ier_messages.locationDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh09.htm"));
            this.setResizable(true);
            this.addChildPane(this._propertiesPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
        }, show:function (repository, item) {
            this.inherited(arguments);
            this.repository = repository;
            this.item = item;
            if (!item) {
                this.set("title", this._ierMessages.locationDialog_add_title);
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this._applyButton.domNode.style.display = "none";
            }
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.connect(this._propertiesPane, "onCompleteRendering", function () {
                this._propertiesPane.resize();
                this.resize();
            });
            this.connect(this._propertiesPane, "onRenderAttributes", function (attributes, deferArray) {
                this._propertiesPane.setReviewerAndCurrentDate(attributes, deferArray);
            });
            this.resize();
        }, validateInput:function () {
            var valid = this.inherited(arguments);
            this._applyButton.set("disabled", !valid);
            return valid;
        }, _renderDialog:function () {
            this._propertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_Location, defaultNameProperty:ier_constants.Property_LocationName, entityType:ier_constants.EntityType_Location, hideContentClassSelector:true, changeAttributesIndicator:true, item:this.item});
        }, _save:function (close) {
            var properties = this._propertiesPane.getProperties();
            var locationId = (this.item && this.item.id);
            this.repository.saveLocation(properties, locationId, dojo_lang.hitch(this, function () {
                if (close) {
                    this.hide();
                }
            }));
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "ier/model/Record":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util", "ier/model/_BaseEntityObject"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util, ier_model_BaseEntityObject) {
        var Record = dojo_declare("ier.model.Record", [ier_model_BaseEntityObject], {constructor:function (arguments) {
        }, move:function (targetLocation, reasonForMove, onComplete) {
            var repository = this.repository;
            var serviceParams = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                repository.retrieveItem(targetLocation, dojo_lang.hitch(this, function (itemRetrieved) {
                    if (itemRetrieved) {
                        repository.onChange(itemRetrieved);
                        itemRetrieved.refresh();
                    }
                    this.parent.refresh();
                    if (onComplete) {
                        onComplete();
                    }
                }));
            }));
            serviceParams.requestParams[ier_constants.Param_RecordId] = this.id;
            serviceParams.requestParams[ier_constants.Param_SourceContainer] = this.parent.id;
            serviceParams.requestParams[ier_constants.Param_DestinationContainer] = targetLocation;
            serviceParams.requestParams[ier_constants.Param_ReasonForMove] = reasonForMove;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_MoveRecord, ier_constants.PostEncoding, serviceParams);
        }});
        ier_model_BaseEntityObject.registerClass("Record", Record);
        return Record;
    });
}, "ier/widget/admin/RepositoryReportPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-construct", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ier/messages", "ier/model/admin/Config", "ecm/widget/_FolderSelectorDropDown", "ecm/widget/FolderSelectorCallback", "dojo/text!./templates/RepositoryReportPane.html", "ecm/widget/HoverHelp", "ecm/widget/ValidationTextBox", "idx/layout/TitlePane"], function (declare, lang, connect, dom_construct, ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, messages, Config, FolderSelectorDropDown, FolderSelectorCallback, ReportSettingsPane_html) {
        return declare("ier.widget.admin.RepositoryReportPane", [ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:ReportSettingsPane_html, repository:null, config:null, dirty:false, valid:true, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._createFolderSelector();
            this.connect(this._saveButton, "onClick", this._save);
            this.connect(this._resetButton, "onClick", this._reset);
            this.connect(this._clearButton, "onClick", this._clearValue);
            this._saveButton.set("disabled", true);
            this._resetButton.set("disabled", true);
        }, _createFolderSelector:function () {
            if (this._reportOutputFolderSelector) {
                this._reportOutputFolderSelector.destroy();
                connect.disconnect(this._onFolderSelectedHandler);
            }
            this._reportOutputFolderSelector = new FolderSelectorDropDown({preventSelectRoot:true});
            dom_construct.place(this._reportOutputFolderSelector.domNode, this._reportOutputSelectorContainer, "only");
            this._setFolderSelectorCallback();
            this._onFolderSelectedHandler = this.connect(this._reportOutputFolderSelector, "onFolderSelected", function () {
                this._validate(true);
                this._clearButton.set("disabled", false);
            });
        }, _setFolderSelectorCallback:function () {
            this.folderSelectorCallback = new FolderSelectorCallback("privAddToFolder", messages.noPermissionAdd);
            this._reportOutputFolderSelector.setIsSelectableCallback(this.folderSelectorCallback.isSelectableByPermission, this.folderSelectorCallback);
        }, setRepository:function (repository) {
            this.repository = repository;
            this._reportOutputFolderSelector.setRoot(repository);
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._reset();
        }, _save:function () {
            if (this.config) {
                var folder = this._reportOutputFolderSelector.getSelected();
                if (folder) {
                    folder = folder.item.id;
                }
                this.config.set("reportOutputSaveDirectory", folder || "");
                Config.saveConfig(this.config, lang.hitch(this, function () {
                    this._validate(false);
                    this.repository.reportOutputSaveDirectory = this.config.get("reportOutputSaveDirectory");
                }));
            }
        }, _clearValue:function () {
            this._createFolderSelector();
            this._clearButton.set("disabled", true);
            this._reportOutputFolderSelector.setRoot(this.repository);
            this._validate(true);
        }, _reset:function () {
            this._reportOutputFolderSelector.repository = this.repository;
            var output = this.config.get("reportOutputSaveDirectory");
            var path = output;
            if (output) {
                if (lang.isArray(output)) {
                    path = output[0] + "," + output[1] + "," + output[2];
                }
                this.repository.retrieveItem(path, lang.hitch(this, function (itemRetrieved) {
                    this._reportOutputFolderSelector.setSelected(itemRetrieved);
                }));
                this._clearButton.set("disabled", false);
            } else {
                this._clearValue();
            }
            this._validate(false);
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this._saveButton.set("disabled", !dirty || !this.valid);
            this._resetButton.set("disabled", !dirty);
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "url:ier/widget/layout/templates/DashboardPane.html":"<div class=\"ierDashboardPane\">\r\n\t<div data-dojo-type=\"idx.layout.MoveableTabContainer\">\r\n\t\t<div data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props=\"gutters:false, title:'Dashboard'\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\">\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDashboardRow\">\r\n\t\t\t\t\t<div class=\"ierDashboardWidget\" data-dojo-props=\"refreshable:true,resizable:true\" data-dojo-type=\"idx.layout.HeaderPane\" \r\n\t\t\t\t\t     title=\"Latest Record Disposed\" data-dojo-attach-point=\"_dashboardWidget1\">\r\n\t\t\t\t\t\t  <div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget1_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ierDashboardWidget\" data-dojo-props=\"refreshable:true,resizable:true\"\r\n\t\t\t\t\t data-dojo-type=\"idx.layout.HeaderPane\" title=\"Lastest Record Declared\" data-dojo-attach-point=\"_dashboardWidget2\">\r\n\t\t\t\t\t\t<div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget2_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ierDashboardWidgetNoRightMargin\" data-dojo-props=\"refreshable:true,resizable:true\"\r\n\t\t\t\t\t data-dojo-type=\"idx.layout.HeaderPane\" title=\"Lastest Jobs\" data-dojo-attach-point=\"_dashboardWidget3\">\r\n\t\t\t\t\t\t <div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget3_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDashboardRow\">\r\n\t\t\t\t\t<div class=\"ierDashboardWidget\" data-dojo-props=\"refreshable:true,resizable:true\" data-dojo-type=\"idx.layout.HeaderPane\" \r\n\t\t\t\t\t     title=\"Lastest Entity Items Ready for Disposition\" data-dojo-attach-point=\"_dashboardWidget4\">\r\n\t\t\t\t\t\t <div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget4_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ierDashboardWidget\" data-dojo-props=\"refreshable:true,resizable:true\"\r\n\t\t\t\t\t data-dojo-type=\"idx.layout.HeaderPane\" title=\"Last Entity Item on Hold\" data-dojo-attach-point=\"_dashboardWidget5\">\r\n\t\t\t\t\t\t<div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget5_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ierDashboardWidgetNoRightMargin\" data-dojo-props=\"refreshable:true,resizable:true\"\r\n\t\t\t\t\t data-dojo-type=\"idx.layout.HeaderPane\" title=\"Lastest Record Container Created\" data-dojo-attach-point=\"_dashboardWidget6\">\r\n\t\t\t\t\t\t <div data-dojo-type=\"ier/widget/TilesList\" data-dojo-attach-point=\"widget6_tileList\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\t", "ier/widget/tasks/MultiStatusTasksListingPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/data/ItemFileReadStore", "dojo/date/locale", "dojo/dom-construct", "dojo/dom-style", "dojo/string", "ecm/widget/dialog/ConfirmationDialog", "ecm/model/Request", "ecm/LoggerMixin", "ecm/widget/listView/modules/Bar", "ier/util/util", "ier/constants", "ier/messages", "ier/widget/admin/config", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/TaskFilter", "ier/widget/listView/modules/Toolbar", "ier/widget/tasks/TasksListingPane"], function (dojo_declare, dojo_array, dojo_lang, dojo_data_ItemFileReadStore, dojo_date_locale, dojo_construct, dojo_style, dojo_string, ecm_widget_dialog_ConfirmationDialog, ecm_model_Request, ecm_LoggerMixin, ecm_widget_listView_Bar, ier_util, ier_constants, ier_messages, ier_admin_config, ier_widget_listView_RowContextMenu, ier_widget_listView_TaskFilter, ier_widget_listView_Toolbar, ier_widget_TasksListingPane) {
        return dojo_declare("ier.widget.tasks.MultiStatusTasksListingPane", [ier_widget_TasksListingPane], {ier_messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ecm_widget_listView_Bar, top:[[[{moduleClass:ier_widget_listView_Toolbar}, {moduleClass:ier_widget_listView_TaskFilter, filterSelectOptions:[{label:ier_messages.taskPane_filterAllTypes, value:"all", selected:true}, {label:ier_messages.reports, value:ier_constants.TaskType_Report}, {label:ier_messages.defensibleDisposal, value:ier_constants.TaskType_DefensibleDisposal}]}]]]});
            return array;
        }});
    });
}, "url:ier/widget/admin/templates/PluginConfigurationPane.html":"<div class=\"ierPluginConfiguration\" data-dojo-type=\"dijit.layout.ContentPane\" style=\"height: 900px\">\r\n\t<div data-dojo-type=\"idx.layout.MoveableTabContainer\" data-dojo-attach-point=\"tabContainer\" style=\"height: 100%\">\r\n\t\t<div data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-attach-point=\"borderContainer\" \r\n\t\t\tdata-dojo-props=\"gutters:false,region:'center'\" title=\"${messages.declareRecordDialog_declare}\" style=\"width:100%; height:100%\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" region=\"top\" class=\"ecmAdminTabButtonBar\" style=\"padding-bottom:0px\">\r\n\t\t\t\t\t<div style=\"float:left;max-width:75%\">${messages.pluginConfiguration_filePlanRepositoriesIntroText}</div>\t\r\n\t\t\t\t\t<label for=\"${id}_filter\" style=\"display: none;\">${messages.pluginConfiguration_name_contains_label}</label>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"_filter\" id=\"${id}_filter\" class=\"filter\" data-dojo-type=\"ecm.widget.FilterTextBox\"\r\n\t\t\t\t\t\tplaceholder=\"${messages.pluginConfiguration_name_contains_label}\" style=\"width:200px;\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" region=\"center\" style=\"padding:0px;\">\r\n\t\t\t\t\t<div data-dojo-type=\"ier.widget.admin.AdminGrid\" data-dojo-attach-point=\"_theGrid\" style=\"width:100%;height: 500px;\"></div>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/ReportSettingsPane\" data-dojo-attach-point=\"reportSettings\" \r\n\t\t\ttitle=\"${messages.admin_reportSettings}\",intermediateChangesOff: true\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/AddDesktopSettingsPane\" data-dojo-attach-point=\"desktopPane\" style=\"height: 100%\" \r\n\t\t\ttitle=\"${messages.admin_desktops}\">\t\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/dialog/AboutDialog":function () {
    define(["dojo/_base/declare", "dojo/dom-class", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/AboutDialogContent.html"], function (dojo_declare, dojo_class, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.AboutDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ecmAboutDialog");
            this.buildLevel.appendChild(document.createTextNode(ier_messages.build_version));
            this.buildDate.appendChild(document.createTextNode(ier_messages.build_date));
            this.setTitle(ier_messages.about_dialog_title);
            this.setWidth(600);
        }});
    });
}, "ier/widget/dialog/ScheduleDDContainerConversionWizard":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/string", "dojo/dom-style", "dojo/date/locale", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/BaseAccordionWizardDialog", "ier/widget/panes/ConvertDefensibleDisposalDispositionPane", "ier/widget/panes/AsyncTaskSchedulerPane"], function (dojo_declare, dojo_lang, dojo_construct, dojo_string, dojo_style, dojo_locale, ecm_model_Desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, BaseAccordionWizardDialog, ConvertDefensibleDisposalDispositionPane, AsyncTaskSchedulerPane) {
        return dojo_declare("ier.widget.dialog.ScheduleDDContainerConversionWizard", [BaseAccordionWizardDialog], {finishButtonLabel:ier_messages.scheduleDDConversionWizard_finishButton, task:null, postCreate:function () {
            this.inherited(arguments);
            this.set("title", ier_messages.scheduleDDConversionWizard_title);
            this.setIntroText(ier_messages.scheduleDDConversionWizard_description);
            this.setResizable(true);
            this.convertDDSchedulePane = new ConvertDefensibleDisposalDispositionPane();
            this.addChildPane(this.convertDDSchedulePane);
            this.connect(this.convertDDSchedulePane, "onInputChange", function () {
                if (this.convertDDSchedulePane.validate()) {
                    this.enablePane(this.taskSchedulerPane);
                    this._setNameAndDescriptionTextBox();
                } else {
                    this.disablePane(this.taskSchedulerPane);
                }
                this.updateButtonsState();
            });
            this.taskSchedulerPane = new AsyncTaskSchedulerPane({disabled:true, showLoginInformation:true, title:ier_messages.scheduleDDConversionWizard_setConversionSchedule});
            this.addChildPane(this.taskSchedulerPane);
            this.taskSchedulerPane.asyncTaskSchedulerPane.enableRecurrenceRadioButton.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalNumberSpinner.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalSelect.set("disabled", true);
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceRow, "display", "none");
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceIntervalRow, "display", "none");
            this.startup();
        }, _setNameAndDescriptionTextBox:function () {
            this.taskSchedulerPane.asyncTaskSchedulerPane.nameTextBox.set("value", dojo_string.substitute(ier_messages.scheduleDDConversionWizard_scheduleName, [this.convertDDSchedulePane.folder.name]));
            this.taskSchedulerPane.asyncTaskSchedulerPane.descriptionTextBox.set("value", dojo_string.substitute(ier_messages.scheduleDDConversionWizard_scheduleDescription, [this.convertDDSchedulePane.folder.name, dojo_locale.format(new Date(), {locale:this.locale, selector:"time", formatLength:"short"})]));
        }, _setTaskScheduleAttr:function (schedule) {
            var asyncTaskSchedulerPane = this.taskSchedulerPane.asyncTaskSchedulerPane;
            ier_util.setTaskSchedulerPane(asyncTaskSchedulerPane, schedule, true);
        }, _setScheduleAttr:function (schedule) {
            this.convertDDSchedulePane.set("schedule", schedule);
        }, show:function (repository, item) {
            this.inherited("show", []);
            this.convertDDSchedulePane.createRendering(repository, item);
        }, onFinishButtonClicked:function () {
            var params = {};
            params[ier_constants.Param_RepositoryId] = this.convertDDSchedulePane.repository.id;
            params[ier_constants.Param_P8RepositoryId] = this.convertDDSchedulePane.repository.objectStoreName;
            params[ier_constants.Param_ContainerId] = this.convertDDSchedulePane.folder.id;
            params[ier_constants.Param_ContainerName] = this.convertDDSchedulePane.folder.name;
            var schedule = this.convertDDSchedulePane.get("schedule");
            params[ier_constants.Param_RetentionTriggerPropertyName] = schedule.getRMRetentionTriggerPropertyName();
            params[ier_constants.Param_RetentionPeriodYears] = schedule.getRMRetentionPeriod("years");
            params[ier_constants.Param_RetentionPeriodMonths] = schedule.getRMRetentionPeriod("months");
            params[ier_constants.Param_RetentionPeriodDays] = schedule.getRMRetentionPeriod("days");
            params[ier_constants.Param_RetentionPeriod] = schedule.getRMRetentionPeriod();
            params[ier_constants.Param_CE_EJB_URL] = this.convertDDSchedulePane.repository.serverName;
            params[ier_constants.Param_ParameterList] = ier_constants.Param_ContainerName + "," + ier_constants.Param_RetentionTriggerPropertyName + "," + ier_constants.Param_RetentionPeriodYears + "," + ier_constants.Param_RetentionPeriodMonths + "," + ier_constants.Param_RetentionPeriodDays;
            params["parent"] = "IER";
            var taskSchedule = this.taskSchedulerPane.get("schedule");
            if (!this.task) {
                ecm.model.desktop.taskManager.scheduleAsyncTask(taskSchedule, ier_constants.TaskType_DDConversionClass, params, null, dojo_lang.hitch(this, function (response) {
                    this.onFinish(response);
                    ecm_model_Desktop.taskManager.onAsyncTaskItemAdded(response);
                    this.onCancel();
                }));
            } else {
                var taskRequest = this.task.taskRequest;
                taskRequest[ier_constants.Param_UserId] = taskSchedule.username;
                taskRequest[ier_constants.Param_Password] = taskSchedule.password;
                taskRequest[ier_constants.Param_EmailAddress] = taskSchedule.email;
                taskRequest[ier_constants.Param_Name2] = taskSchedule.name;
                taskRequest[ier_constants.Param_Description2] = taskSchedule.description;
                dojo_declare.safeMixin(taskRequest.specificTaskRequest, params);
                this.task.reschedule(dojo_lang.hitch(this, function (response) {
                    this.onFinish(response);
                    this.task.refresh();
                    this.onCancel();
                }), taskRequest);
            }
        }, onFinish:function (response) {
        }});
    });
}, "dijit/layout/AccordionContainer":function () {
    require({cache:{"url:dijit/layout/templates/AccordionButton.html":"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n"}});
    define("dijit/layout/AccordionContainer", ["require", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/event", "dojo/_base/fx", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/topic", "../focus", "../_base/manager", "dojo/ready", "../_Widget", "../_Container", "../_TemplatedMixin", "../_CssStateMixin", "./StackContainer", "./ContentPane", "dojo/text!./templates/AccordionButton.html"], function (require, array, declare, event, fx, dom, domAttr, domClass, domConstruct, domGeometry, kernel, keys, lang, has, topic, focus, manager, ready, _Widget, _Container, _TemplatedMixin, _CssStateMixin, StackContainer, ContentPane, template) {
        var AccordionButton = declare("dijit.layout._AccordionButton", [_Widget, _TemplatedMixin, _CssStateMixin], {templateString:template, label:"", _setLabelAttr:{node:"titleTextNode", type:"innerHTML"}, title:"", _setTitleAttr:{node:"titleTextNode", type:"attribute", attribute:"title"}, iconClassAttr:"", _setIconClassAttr:{node:"iconNode", type:"class"}, baseClass:"dijitAccordionTitle", getParent:function () {
            return this.parent;
        }, buildRendering:function () {
            this.inherited(arguments);
            var titleTextNodeId = this.id.replace(" ", "_");
            domAttr.set(this.titleTextNode, "id", titleTextNodeId + "_title");
            this.focusNode.setAttribute("aria-labelledby", domAttr.get(this.titleTextNode, "id"));
            dom.setSelectable(this.domNode, false);
        }, getTitleHeight:function () {
            return domGeometry.getMarginSize(this.domNode).h;
        }, _onTitleClick:function () {
            var parent = this.getParent();
            parent.selectChild(this.contentWidget, true);
            focus.focus(this.focusNode);
        }, _onTitleKeyPress:function (evt) {
            return this.getParent()._onKeyPress(evt, this.contentWidget);
        }, _setSelectedAttr:function (isSelected) {
            this._set("selected", isSelected);
            this.focusNode.setAttribute("aria-expanded", isSelected);
            this.focusNode.setAttribute("aria-selected", isSelected);
            this.focusNode.setAttribute("tabIndex", isSelected ? "0" : "-1");
        }});
        var AccordionInnerContainer = declare("dijit.layout._AccordionInnerContainer", [_Widget, _CssStateMixin], {baseClass:"dijitAccordionInnerContainer", isLayoutContainer:true, buildRendering:function () {
            this.domNode = domConstruct.place("<div class='" + this.baseClass + "' role='presentation'>", this.contentWidget.domNode, "after");
            var child = this.contentWidget, cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
            this.button = child._buttonWidget = (new cls({contentWidget:child, label:child.title, title:child.tooltip, dir:child.dir, lang:child.lang, textDir:child.textDir, iconClass:child.iconClass, id:child.id + "_button", parent:this.parent})).placeAt(this.domNode);
            this.containerNode = domConstruct.place("<div class='dijitAccordionChildWrapper' style='display:none'>", this.domNode);
            domConstruct.place(this.contentWidget.domNode, this.containerNode);
        }, postCreate:function () {
            this.inherited(arguments);
            var button = this.button;
            this._contentWidgetWatches = [this.contentWidget.watch("title", lang.hitch(this, function (name, oldValue, newValue) {
                button.set("label", newValue);
            })), this.contentWidget.watch("tooltip", lang.hitch(this, function (name, oldValue, newValue) {
                button.set("title", newValue);
            })), this.contentWidget.watch("iconClass", lang.hitch(this, function (name, oldValue, newValue) {
                button.set("iconClass", newValue);
            }))];
        }, _setSelectedAttr:function (isSelected) {
            this._set("selected", isSelected);
            this.button.set("selected", isSelected);
            if (isSelected) {
                var cw = this.contentWidget;
                if (cw.onSelected) {
                    cw.onSelected();
                }
            }
        }, startup:function () {
            this.contentWidget.startup();
        }, destroy:function () {
            this.button.destroyRecursive();
            array.forEach(this._contentWidgetWatches || [], function (w) {
                w.unwatch();
            });
            delete this.contentWidget._buttonWidget;
            delete this.contentWidget._wrapperWidget;
            this.inherited(arguments);
        }, destroyDescendants:function (preserveDom) {
            this.contentWidget.destroyRecursive(preserveDom);
        }});
        var AccordionContainer = declare("dijit.layout.AccordionContainer", StackContainer, {duration:manager.defaultDuration, buttonWidget:AccordionButton, baseClass:"dijitAccordionContainer", buildRendering:function () {
            this.inherited(arguments);
            this.domNode.style.overflow = "hidden";
            this.domNode.setAttribute("role", "tablist");
        }, startup:function () {
            if (this._started) {
                return;
            }
            this.inherited(arguments);
            if (this.selectedChildWidget) {
                var style = this.selectedChildWidget.containerNode.style;
                style.display = "";
                style.overflow = "auto";
                this.selectedChildWidget._wrapperWidget.set("selected", true);
            }
        }, layout:function () {
            var openPane = this.selectedChildWidget;
            if (!openPane) {
                return;
            }
            var wrapperDomNode = openPane._wrapperWidget.domNode, wrapperDomNodeMargin = domGeometry.getMarginExtents(wrapperDomNode), wrapperDomNodePadBorder = domGeometry.getPadBorderExtents(wrapperDomNode), wrapperContainerNode = openPane._wrapperWidget.containerNode, wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode), wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode), mySize = this._contentBox;
            var totalCollapsedHeight = 0;
            array.forEach(this.getChildren(), function (child) {
                if (child != openPane) {
                    totalCollapsedHeight += domGeometry.getMarginSize(child._wrapperWidget.domNode).h;
                }
            });
            this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h - wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h - openPane._buttonWidget.getTitleHeight();
            this._containerContentBox = {h:this._verticalSpace, w:this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w - wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w};
            if (openPane) {
                openPane.resize(this._containerContentBox);
            }
        }, _setupChild:function (child) {
            child._wrapperWidget = AccordionInnerContainer({contentWidget:child, buttonWidget:this.buttonWidget, id:child.id + "_wrapper", dir:child.dir, lang:child.lang, textDir:child.textDir, parent:this});
            this.inherited(arguments);
        }, addChild:function (child, insertIndex) {
            if (this._started) {
                var refNode = this.containerNode;
                if (insertIndex && typeof insertIndex == "number") {
                    var children = _Widget.prototype.getChildren.call(this);
                    if (children && children.length >= insertIndex) {
                        refNode = children[insertIndex - 1].domNode;
                        insertIndex = "after";
                    }
                }
                domConstruct.place(child.domNode, refNode, insertIndex);
                if (!child._started) {
                    child.startup();
                }
                this._setupChild(child);
                topic.publish(this.id + "-addChild", child, insertIndex);
                this.layout();
                if (!this.selectedChildWidget) {
                    this.selectChild(child);
                }
            } else {
                this.inherited(arguments);
            }
        }, removeChild:function (child) {
            if (child._wrapperWidget) {
                domConstruct.place(child.domNode, child._wrapperWidget.domNode, "after");
                child._wrapperWidget.destroy();
                delete child._wrapperWidget;
            }
            domClass.remove(child.domNode, "dijitHidden");
            this.inherited(arguments);
        }, getChildren:function () {
            return array.map(this.inherited(arguments), function (child) {
                return child.declaredClass == "dijit.layout._AccordionInnerContainer" ? child.contentWidget : child;
            }, this);
        }, destroy:function () {
            if (this._animation) {
                this._animation.stop();
            }
            array.forEach(this.getChildren(), function (child) {
                if (child._wrapperWidget) {
                    child._wrapperWidget.destroy();
                } else {
                    child.destroyRecursive();
                }
            });
            this.inherited(arguments);
        }, _showChild:function (child) {
            child._wrapperWidget.containerNode.style.display = "block";
            return this.inherited(arguments);
        }, _hideChild:function (child) {
            child._wrapperWidget.containerNode.style.display = "none";
            this.inherited(arguments);
        }, _transition:function (newWidget, oldWidget, animate) {
            if (has("ie") < 8) {
                animate = false;
            }
            if (this._animation) {
                this._animation.stop(true);
                delete this._animation;
            }
            var self = this;
            if (newWidget) {
                newWidget._wrapperWidget.set("selected", true);
                var d = this._showChild(newWidget);
                if (this.doLayout && newWidget.resize) {
                    newWidget.resize(this._containerContentBox);
                }
            }
            if (oldWidget) {
                oldWidget._wrapperWidget.set("selected", false);
                if (!animate) {
                    this._hideChild(oldWidget);
                }
            }
            if (animate) {
                var newContents = newWidget._wrapperWidget.containerNode, oldContents = oldWidget._wrapperWidget.containerNode;
                var wrapperContainerNode = newWidget._wrapperWidget.containerNode, wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode), wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode), animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;
                oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";
                this._animation = new fx.Animation({node:newContents, duration:this.duration, curve:[1, this._verticalSpace - animationHeightOverhead - 1], onAnimate:function (value) {
                    value = Math.floor(value);
                    newContents.style.height = value + "px";
                    oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value) + "px";
                }, onEnd:function () {
                    delete self._animation;
                    newContents.style.height = "auto";
                    oldWidget._wrapperWidget.containerNode.style.display = "none";
                    oldContents.style.height = "auto";
                    self._hideChild(oldWidget);
                }});
                this._animation.onStop = this._animation.onEnd;
                this._animation.play();
            }
            return d;
        }, _onKeyPress:function (e, fromTitle) {
            if (this.disabled || e.altKey || !(fromTitle || e.ctrlKey)) {
                return;
            }
            var c = e.charOrCode;
            if ((fromTitle && (c == keys.LEFT_ARROW || c == keys.UP_ARROW)) || (e.ctrlKey && c == keys.PAGE_UP)) {
                this._adjacent(false)._buttonWidget._onTitleClick();
                event.stop(e);
            } else {
                if ((fromTitle && (c == keys.RIGHT_ARROW || c == keys.DOWN_ARROW)) || (e.ctrlKey && (c == keys.PAGE_DOWN || c == keys.TAB))) {
                    this._adjacent(true)._buttonWidget._onTitleClick();
                    event.stop(e);
                }
            }
        }});
        if (!kernel.isAsync) {
            ready(0, function () {
                var requires = ["dijit/layout/AccordionPane"];
                require(requires);
            });
        }
        AccordionContainer._InnerContainer = AccordionInnerContainer;
        AccordionContainer._Button = AccordionButton;
        return AccordionContainer;
    });
}, "url:ier/widget/panes/templates/EntityItemDispositionPane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\">\r\n\t<span data-dojo-attach-point=\"dispositionEmbeddedAssistance\"></span>\r\n\t\r\n\t<fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t<legend style=\"display: none\">${messages.baseDialog_disposition}</legend>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_noneScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"noneScheduleRadioButton\" id=\"${id}_noneSchedule\" \r\n\t\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\" data-dojo-props=\"checked:true\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_noneScheduleRadioButtonLabel\" for=\"${id}_noneSchedule\">${messages.entityItemDispositionPane_noSchedule}</label>&nbsp;\r\n\r\n\t\t\t<div data-dojo-attach-point=\"_dispositionPropagationSelect\" name=\"${id}_propagationSelect\" class=\"ierIdententation\" style=\"display:none;margin-top:8px\" data-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\tdata-dojo-props=\"disabled:true\" data-dojo-type=\"ier/widget/DispositionPropagationSelector\"></div>\r\n\t\t</div>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_ddScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"ddScheduleRadioButton\" id=\"${id}_ddSchedule\" \r\n\t\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_ddScheduleRadioButtonLabel\" for=\"${id}_ddSchedule\">${messages.entityItemDispositionPane_defensibleDisposableSchedule}</label>&nbsp;\r\n\t\t\t\r\n\t\t\t</br>\r\n\t\t\t<div id=\"${id}_defensibleDisposalPane\" data-dojo-attach-point=\"_defensibleDisposalPane\" data-dojo-type=\"ier/widget/panes/DefensibleDisposalDispositionPane\"></div>\r\n\t\t</div>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_legacyScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"legacyScheduleRadioButton\" id=\"${id}_legacySchedule\" \r\n\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_legacyScheduleRadioButtonLabel\" for=\"${id}_legacySchedule\">${messages.entityItemDispositionPane_legacySchedule}</label>&nbsp;\r\n\t\r\n\t\t\t<div id=\"${id}_legacyDispositionPane\" data-dojo-attach-point=\"_legacyDispositionPane\" data-dojo-type=\"ier/widget/panes/LegacyDispositionSchedulePane\"></div>\r\n\t\t</div>\r\n\t\t\r\n\t</fieldset>\r\n</div>", "url:ier/widget/admin/templates/SettingsPane.html":"<div class=\"ecmAdminTab\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">\r\n\t\t<div data-dojo-attach-point=\"_barNode\" class=\"ecmAdminTabButtonBar\">\r\n\t\t\t<div data-dojo-attach-point=\"_deskNode\" class=\"categoryInstructions\"></div>\t\r\n\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_saveAndCloseButton\">${_messages.admin_saveAndClose}</button>\r\n\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_saveButton\">${_messages.admin_save}</button>\r\n\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_resetButton\">${_messages.admin_reset}</button>\r\n\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_closeButton\">${_messages.admin_close}</button>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"_titleNode\" class=\"ecmAdminTabHeading\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" data-dojo-props=\"region: 'center'\">\r\n\t\t<div data-dojo-type=\"ier/widget/admin/GeneralSettingsPane\" data-dojo-attach-point=\"_generalPane\" title=\"${_messages.admin_generalSettings}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/ReportSettingsPane\" data-dojo-attach-point=\"_reportPane\" title=\"${_messages.admin_reportSettings}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/DDContainerSettingsPane\" data-dojo-attach-point=\"_ddContainerSettingsPane\" title=\"${_messages.admin_ddContainerSettings}\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/RelocateRecordContainerDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/RelocateContainerDialogContent.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/RelocateContainerGeneralPane"], function (dojo_declare, dojo_lang, dojo_class, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_widget_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.RelocateRecordContainerDialog", [ier_widget_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _container:null, _fp_repository_location:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierSmallDialog");
            this.addChildPane(this._relocateContainerGeneralPane);
            this.okButton = this.addButton(ier_messages.relocateRecordContainerDialog_relocateButton, "_onClickRelocate", false, true);
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.repository = repository;
            this.items = items;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this._items = items;
        }, _renderDialog:function () {
            this.setTitle(ier_messages.relocateRecordContainerDialog_title);
            this.setIntroText(ier_messages.relocateRecordContainerDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh06.htm"));
            this.okButton.set("disabled", true);
            this._relocateContainerGeneralPane.createRendering(this.repository, this, this.items);
            this.resize();
            this.validateInput();
        }, _onClickRelocate:function () {
            if (this.validateInput()) {
                var items = this._items;
                var item = items[0];
                var serviceParams = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    var parent = item.parent;
                    if (parent) {
                        parent.refresh();
                    }
                    var targetContainer = this._relocateContainerGeneralPane.getTargetContainer();
                    this.repository.retrieveItem(targetContainer, dojo_lang.hitch(this, function (itemRetrieved) {
                        if (itemRetrieved) {
                            itemRetrieved.refresh();
                        }
                        this.onCancel();
                    }));
                }));
                serviceParams.requestParams[ier_constants.Param_ContainerId] = item.id;
                serviceParams.requestParams[ier_constants.Param_ReasonForRelocate] = this._relocateContainerGeneralPane.getReasonForRelocate();
                serviceParams.requestParams[ier_constants.Param_DestinationContainer] = this._relocateContainerGeneralPane.getTargetContainer();
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_Relocate, ier_constants.PostEncoding, serviceParams);
            }
        }});
    });
}, "ier/widget/dialog/ViewEntitiesOnHoldDialog":function () {
    define("ier/widget/dialog/ViewEntitiesOnHoldDialog", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/event", "dojo/_base/json", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/keys", "dojo/string", "dijit/form/Button", "dijit/form/TextBox", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/model/ResultSet", "ecm/model/Request", "ecm/model/Desktop", "ier/widget/listView/gridModules/ObjectListRowContextMenu", "ier/widget/ListTypeSelector", "ier/widget/dialog/ObjectListDialog", "ier/widget/dialog/IERBaseDialog", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/dialog/MessageDialog"], function (dojo_declare, dojo_array, dojo_event, dojo_json, dojo_lang, dojo_construct, dojo_style, dojo_class, dojo_keys, dojo_string, dijit_form_Button, dijit_form_TextBox, ier_constants, ier_messages, ier_util, ier_util_dialog, ier_model_ResultSet, ecm_model_Request, ecm_model_Desktop, RowContextMenu, ier_ListTypeSelector, ier_dialog_ObjectListDialog, ier_dialog_IERBaseDialog, ecm_widget_dialog_ConfirmationDialog, ecm_dialog_MessageDialog) {
        var _RowContextMenu = dojo_declare(RowContextMenu, {loadContextMenu:function (selectedItems, callback) {
            ecm.model.desktop.loadMenuActions(ier_constants.MenuType_IERViewEntitiesOnHoldContextMenu, callback);
        }});
        return dojo_declare("ier.widget.dialog.ViewEntitiesOnHoldDialog", [ier_dialog_ObjectListDialog], {_filterEntityType:ier_constants.EntityType_Record, _isFirstOpenDialog:true, _isDynamicHold:false, postCreate:function () {
            ier_dialog_IERBaseDialog.prototype.postCreate.apply(this, arguments);
            this.title = ier_messages.viewEntitiesOnholdDialog_objectTitile;
            this.setEntityType(ier_constants.EntityType_HybridRecordFolder);
            this.connect(this._objectContentList, "onRowSelectionChange", "onInputChange");
            this.connect(ecm.model.desktop, "ierHoldIsRemoved", "_holdIsRemoved");
            this._objectContentList.setGridExtensionModules(this.getContentListGridModules());
        }, destroy:function () {
            this._listTypeSelector && this._listTypeSelector.destroy();
            this.inherited(arguments);
        }, onInputChange:function () {
            var selectedObjects = this._objectContentList.getSelectedItems();
            var valid = selectedObjects != null && selectedObjects.length > 0;
            if (valid && this._isDynamicHold) {
                valid = dojo_array.some(selectedObjects, function (item) {
                    return item && item.attributes.IsDynamicHold == false;
                });
            }
            this.setButtonEnabled(this._removeHoldButton, valid);
            return valid;
        }, _renderingFilterArea:function () {
            this._searchCriteria = dojo_construct.create("div");
            var holdImg = dojo_construct.create("img", {"class":this._isDynamicHold ? "dynamicHoldIcon" : "onHoldIcon", alt:this._isDynamicHold ? ier_messages.dynamicHold : ier_messages.hold, title:this._isDynamicHold ? ier_messages.dynamicHold : ier_messages.hold, src:"dojo/resources/blank.gif"});
            this._searchCriteria.appendChild(holdImg);
            var holdNameNode = dojo_construct.create("span", {"class":"viewEntitiesOnHoldEntityName", innerHTML:dojo_string.substitute(ier_messages.viewEntitiesOnholdDialog_searchInHold, {name:this._targetItems[0].name})});
            this._searchCriteria.appendChild(holdNameNode);
            var options = [];
            options.push({text:ier_messages.record, value:ier_constants.EntityType_Record, isSelected:"true"});
            options.push({text:ier_messages.container, value:ier_constants.EntityType_Container});
            this._listTypeSelector = new ier_ListTypeSelector(options);
            this._listTypeSelector.listTypeSelectionLabel.innerHTML = ier_messages.viewEntitiesOnholdDialog_searchFor + ":";
            this._searchCriteria.appendChild(this._listTypeSelector.domNode);
            this._quickSearchTextBox = new dijit_form_TextBox({"class":"viewEntitiesOnHoldSearchTextBox"});
            var searchForm = dojo_construct.create("div", {"class":"viewEntitiesOnHoldExplainText"});
            var searchExplanationText = dojo_construct.create("label", {"for":this._quickSearchTextBox.id, innerHTML:ier_messages.viewEntitiesOnholdDialog_searchExplanation + ":"});
            searchForm.appendChild(searchExplanationText);
            this._searchCriteria.appendChild(searchForm);
            this._quickSearchButton = new dijit_form_Button({label:ier_messages.viewEntitiesOnholdDialog_searchButtonLabel});
            this._searchCriteria.appendChild(this._quickSearchTextBox.domNode);
            this._searchCriteria.appendChild(this._quickSearchButton.domNode);
            var removeHoldButtonContainer = dojo_construct.create("div", {"class":"viewEntitiesOnHoldRemove"}, this._searchCriteria);
            this._removeHoldButton = new dijit_form_Button({disabled:true, label:ier_messages.dialog_removeHoldButton});
            removeHoldButtonContainer.appendChild(this._removeHoldButton.domNode);
            dojo_class.remove(this.filterArea, "filterArea");
            this._filePlanSearchBar.domNode.style.display = "none";
            this.filterArea.appendChild(this._searchCriteria);
            this.connect(this._quickSearchButton, "onClick", function () {
                this._filterString = this._quickSearchTextBox.get("value");
                this._filterEntityType = this._listTypeSelector.getSelection();
                this.retrieveObjects();
            });
            this.connect(this._quickSearchTextBox, "onKeyDown", function (evt) {
                if (evt.keyCode == dojo_keys.ENTER) {
                    dojo_event.stop(evt);
                    this._filterString = this._quickSearchTextBox.get("value");
                    this._filterEntityType = this._listTypeSelector.getSelection();
                    this.retrieveObjects();
                }
            });
            this.connect(this._removeHoldButton, "onClick", "_removeHold");
        }, _removeHold:function () {
            var valid = this.onInputChange();
            if (valid) {
                var selectedItems = this._objectContentList.getSelectedItems();
                var _this = this;
                var includingDynamic = dojo_array.some(selectedItems, function (item) {
                    return item.attributes.IsDynamicHold;
                }, this);
                if (includingDynamic) {
                    this._messageDialog && this._messageDialog.destroy();
                    this._messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.viewEntitiesOnholdDialog_cannot_remove_hold});
                    this._messageDialog.startup();
                    this._messageDialog.show();
                    ier_util_dialog.manage(this._messageDialog);
                    return;
                }
                this._confirmRemoveHold && this._confirmRemoveHold.destroy();
                this._confirmRemoveHold = new ecm_widget_dialog_ConfirmationDialog({text:dojo_string.substitute(ier_messages.remove_hold_multiple_confirmation_question, [selectedItems.length]), buttonLabel:ier_messages.remove_hold_confirmation_button, onExecute:function () {
                    var params = ier_util.getDefaultParams(_this.repository, dojo_lang.hitch(this, function (response) {
                        _this.retrieveObjects();
                    }));
                    var holdables = dojo_array.map(selectedItems, function (item) {
                        return {id:item.id, entityType:item.getEntityType()};
                    });
                    params.requestParams[ier_constants.Param_Holdables] = dojo_json.toJson(holdables);
                    var hold = {id:_this._targetItems[0].id};
                    params.requestParams[ier_constants.Param_Holds] = dojo_json.toJson([hold]);
                    ecm_model_Request.invokePluginService(ier_constants.ApplicationPlugin, ier_constants.Service_RemoveHold, params);
                }});
                this._confirmRemoveHold.show();
                ier_util_dialog.manage(this._confirmRemoveHold);
            }
        }, show:function (repository, items) {
            if (repository) {
                this.contentClass = repository.getContentClass(ier_constants.ClassName_RecordFolder);
            }
            if (items && items[0]) {
                this._isDynamicHold = items[0].isDynamicHold();
            }
            this._targetItems = items;
            this._renderingFilterArea();
            this.inherited(arguments, [repository, ier_constants.ClassName_RecordFolder]);
        }, retrieveObjects:function () {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (response) {
                    this._objectContentList.emptyMessage = ier_messages.viewEntitiesOnholdDialog_emptyMessage;
                    if (this._isFirstOpenDialog) {
                        this._isFirstOpenDialog = false;
                        response.rows = [];
                        this._objectContentList.emptyMessage = " ";
                    }
                    response.repository = this.repository;
                    var resultSet = new ier_model_ResultSet(response);
                    var items = resultSet.items;
                    if (items) {
                        dojo_array.forEach(items, dojo_lang.hitch(this, function (item) {
                            item.removeHold = this._targetItems[0].id;
                        }));
                    }
                    this._objectContentList.setResultSet(resultSet);
                    this.resize();
                    this.onInputChange();
                }
            }));
            params.requestParams[ier_constants.Param_HoldId] = this._targetItems[0].id;
            params.requestParams[ier_constants.Param_EntityType] = this._filterEntityType;
            params.requestParams[ier_constants.Param_FilterString] = this._filterString;
            if (this._isFirstOpenDialog) {
                params.requestParams["IS_SEARCH"] = "NO";
            } else {
                params.requestParams["IS_SEARCH"] = "YES";
            }
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetEntitiesOnHold, ier_constants.PostEncoding, params);
        }, _holdIsRemoved:function (modelObject) {
            this.retrieveObjects();
        }, getContentListGridModules:function () {
            var modules = this.inherited(arguments);
            ier_util.replaceModule(modules, "rowContextMenu", _RowContextMenu);
            return modules;
        }});
    });
}, "ier/widget/panes/EntityItemHistoryPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/event", "dojo/keys", "dojo/dom-style", "dojo/dom-geometry", "dojo/string", "ier/constants", "ier/messages", "ier/util/util", "ier/model/ResultSet", "ecm/model/Request", "ecm/Messages", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemHistoryPane.html", "ecm/widget/DatePicker", "dijit/form/TextBox", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_lang, dojo_array, dojo_event, dojo_keys, domStyle, domGeometry, dojo_string, ier_constants, ier_messages, ier_util, ier_model_ResultSet, ecm_model_Request, ecm_messages, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemHistoryPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _ierMessages:ier_messages, startDate:"", endDate:"", filterField:"", filterStr:"", filterActionType:"", filterStatus:"", _isSearch:false, _isRemoved:false, isLoaded:function () {
            return this._isLoaded;
        }, constructor:function () {
            this.inherited(arguments);
            this._dateFormat = ecm.model.desktop.valueFormatter.getDefaultFormat("xs:date").replace(/'/g, "\\'");
            this._invalidDateMessage = dojo_string.substitute(ecm_messages.property_date_invalid, [this._dateFormat]).replace(/'/g, "\\'");
        }, postCreate:function () {
            this.inherited(arguments);
            this.connect(this, "onKeyDown", function (evt) {
                if (evt.keyCode == dojo_keys.ENTER) {
                    dojo_event.stop(evt);
                }
            });
            this.connect(this._searchButton, "onClick", "_doSearch");
            this.connect(this._resetButton, "onClick", "_reset");
            this.connect(this._filterTypeSelect, "onChange", "_changeFilter");
            this.connect(this._searchCriteria, "toggle", "resize");
        }, createColumnHeader:function () {
            var cols = new Array();
            cols.push({name:"", widthWebKit:"1.0em", width:"1.0em"});
            cols.push({name:this._ierMessages.historyPane_action, widthWebKit:"15.0em", width:"15.0em", sortable:false});
            cols.push({name:this._ierMessages.historyPane_dateTime, widthWebKit:"15.0em", width:"15.0em"});
            cols.push({name:this._ierMessages.historyPane_initiator, widthWebKit:"15.0em", width:"15.0em"});
            cols.push({name:this._ierMessages.historyPane_status, widthWebKit:"15.0em", width:"15.0em"});
            var cell = new Array();
            cell[0] = cols;
            var columns = new Object();
            columns.cells = cell;
            var response = new Object();
            response.columns = columns;
            response.rows = [];
            response.repository = this.repository;
            var resultSet = new ier_model_ResultSet(response);
            if (!this._isSearch) {
                this._contentList.emptyMessage = this._ierMessages.historyPane_searchMessage;
            }
            this._contentList.setResultSet(resultSet);
            this._contentList.resize();
            if (!this._isSearch) {
                this._contentList.emptyMessage = this._ierMessages.historyPane_emptyMessage;
            }
        }, createRendering:function (repository, item) {
            repository && (this.repository = repository);
            item && (this.item = item);
            if (!this._isSearch) {
                if (item.getEntityType() == ier_constants.EntityType_ElectronicRecord && !this._isRemoved) {
                    this._actionTypeSelect.removeOption("FileEvent");
                    this._isRemoved = true;
                }
                this.createColumnHeader();
            } else {
                this.load();
            }
            this._isLoaded = true;
        }, load:function (sortColum) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (response != null) {
                    if (response.rows.length == 0) {
                        this.createColumnHeader();
                    } else {
                        response = this._customizeResponseObj(response);
                        response.repository = this.repository;
                        var resultSet = new ier_model_ResultSet(response);
                        resultSet.sortFunc = dojo_lang.hitch(this, this.load);
                        this._contentList.setResultSet(resultSet);
                        this._contentList.resize();
                    }
                }
            }));
            params.requestParams[ier_constants.Param_EntityId] = this.item.id;
            if (sortColum) {
                params.requestParams[ier_constants.Param_OrderBy] = sortColum[0].attribute;
            }
            params.requestParams[ier_constants.Param_StartDate] = this.startDate;
            params.requestParams[ier_constants.Param_EndDate] = this.endDate;
            params.requestParams[ier_constants.Param_FilterField] = this.filterField;
            params.requestParams[ier_constants.param_FilterActionType] = this.filterActionType;
            params.requestParams[ier_constants.param_FilterStatus] = this.filterStatus;
            params.requestParams[ier_constants.Param_FilterString] = this.filterStr;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetHistory, ier_constants.PostEncoding, params);
        }, resize:function () {
            var historyPaneSize = domGeometry.getMarginBox(this._historyPane);
            if (historyPaneSize) {
                var searchCriteriaSize = 69;
                if (this._searchCriteria.open) {
                    searchCriteriaSize = 150;
                }
                var contentListSize = historyPaneSize.h - searchCriteriaSize;
                domGeometry.setMarginBox(this._contentList.domNode, {h:contentListSize > 0 ? contentListSize : 0});
            }
            this._contentList.resize();
            this._searchCriteria.resize();
        }, _validateDateRange:function () {
            this._dateRangeError.innerHTML = "";
            var isValid = true;
            if (this._startDatePicker.isValid() && this._endDatePicker.isValid()) {
                var startD = this._startDatePicker.getValue();
                var endD = this._endDatePicker.getValue();
                if (startD && startD !== "" && endD && endD !== "" && startD > endD) {
                    this._dateRangeError.innerHTML = this._ierMessages.historyPane_dateRangeError;
                    isValid = false;
                }
            }
            this._searchButton.set("disabled", !isValid);
        }, _changeFilter:function () {
            var filter = this._filterTypeSelect.get("value");
            if (filter == "ActionType") {
                domStyle.set(this._actionTypeSelect.domNode, "display", "");
                domStyle.set(this._filterBox.domNode, "display", "none");
                domStyle.set(this._statusSelect.domNode, "display", "none");
            } else {
                if (filter == "EventStatus") {
                    domStyle.set(this._statusSelect.domNode, "display", "");
                    domStyle.set(this._filterBox.domNode, "display", "none");
                    domStyle.set(this._actionTypeSelect.domNode, "display", "none");
                } else {
                    domStyle.set(this._filterBox.domNode, "display", "");
                    domStyle.set(this._statusSelect.domNode, "display", "none");
                    domStyle.set(this._actionTypeSelect.domNode, "display", "none");
                }
            }
        }, _doSearch:function () {
            this.filterField = this._filterTypeSelect.get("value");
            this.filterStr = this._filterBox.get("value");
            this.filterActionType = this._actionTypeSelect.get("value");
            this.filterStatus = this._statusSelect.get("value");
            this.startDate = this._startDatePicker.getValue();
            this.endDate = this._endDatePicker.getValue();
            this._isSearch = true;
            this.createRendering(this.repository, this.item);
        }, _reset:function () {
            this._startDatePicker.reset();
            this._endDatePicker.reset();
            this._filterTypeSelect.reset();
            this._filterBox.reset();
            this._actionTypeSelect.reset();
            this._statusSelect.reset();
            this._dateRangeError.innerHTML = "";
        }, _customizeResponseObj:function (response) {
            var cols = response.columns.cells[0];
            if (cols.length > 1) {
                var col0 = new Object();
                col0.name = "";
                col0.widthWebKit = "1.0em";
                col0.width = "1.0em";
                cols[0] = col0;
                cols[1].decorator = undefined;
                cols[1].dataType = "xs:string";
                cols[1].setCellValue = undefined;
                cols[1].widgetsInCell = undefined;
                cols[1].sortable = false;
                cols[4].decorator = dojo_lang.hitch(this, this._decorateStatus);
                cols[1].name = this._ierMessages.historyPane_action;
                cols[2].name = this._ierMessages.historyPane_dateTime;
                cols[3].name = this._ierMessages.historyPane_initiator;
                cols[4].name = this._ierMessages.historyPane_status;
            }
            return response;
        }, _decorateStatus:function (item) {
            if (item == "0") {
                item = this._ierMessages.historyPane_success;
            } else {
                item = this._ierMessages.historyPane_failure;
            }
            return item;
        }});
    });
}, "ier/model/RecordContainerMixin":function () {
    define("ier/model/RecordContainerMixin", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util) {
        return dojo_declare("ier.model.RecordContainerMixin", null, {close:function (reasonForClose, callback, shouldUpdateParent) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.refreshIERStates(dojo_lang.hitch(this, function () {
                    this.refresh();
                    if (this.parent && this.parent.unloadFolderContents) {
                        this.parent.unloadFolderContents();
                    }
                    if (callback) {
                        callback(this);
                    }
                }));
            }));
            params.requestParams[ier_constants.Param_ReasonForClose] = reasonForClose;
            params.requestParams[ier_constants.Param_ContainerId] = this.id;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CloseRecordContainer, ier_constants.PostEncoding, params);
        }, reopen:function (callback, shouldUpdateParent) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.refreshIERStates(dojo_lang.hitch(this, function () {
                    this.refresh();
                    if (this.parent && this.parent.unloadFolderContents) {
                        this.parent.unloadFolderContents();
                    }
                    if (callback) {
                        callback(this);
                    }
                }));
            }));
            params.requestParams[ier_constants.Param_ContainerId] = this.id;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_ReopenRecordContainer, ier_constants.PostEncoding, params);
        }, updateRecordContainerProperties:function (className, criteria, permissions, dispSchedule, additionalLegacyScheduleParameters, doRefresh, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.permissions = null;
                this.retrieveAttributes(dojo_lang.hitch(this, function () {
                    if (callback) {
                        this.refresh();
                        callback(this);
                    }
                }), false, true);
            }));
            params.requestParams[ier_constants.Param_EntityId] = this.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            if (dispSchedule) {
                if (dispSchedule instanceof ier.model.DefensibleDisposalSchedule && this instanceof ier.model.RecordCategory) {
                    params.requestParams[ier_constants.Param_RetentionTriggerPropertyName] = dispSchedule.getRMRetentionTriggerPropertyName();
                    params.requestParams[ier_constants.Param_RetentionPeriodYears] = dispSchedule.getRMRetentionPeriod("years");
                    params.requestParams[ier_constants.Param_RetentionPeriodMonths] = dispSchedule.getRMRetentionPeriod("months");
                    params.requestParams[ier_constants.Param_RetentionPeriodDays] = dispSchedule.getRMRetentionPeriod("days");
                } else {
                    params.requestParams[ier_constants.Param_DispositionScheduleId] = dispSchedule.id;
                    dojo_lang.mixin(params.requestParams, additionalLegacyScheduleParameters);
                }
            } else {
                dojo_lang.mixin(params.requestParams, additionalLegacyScheduleParameters);
            }
            var data = new Object();
            data[ier_constants.Param_Properties] = criteria;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_EditRecordContainer, ier_constants.PostEncoding, params);
        }});
    });
}, "ier/widget/dialog/TaskErrorDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/TaskErrorDialogContent.html", "ier/widget/tasks/TaskErrorPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.TaskErrorDialog", [ier_dialog_IERBaseDialog], {title:ier_messages.taskPane_previewErrors, contentString:contentString, item:null, postCreate:function () {
            this.inherited(arguments);
            this.setResizable(true);
            this.addChildPane(this._errorPane);
        }, show:function () {
            this.inherited(arguments);
            this._errorPane.createRendering(this.item);
            this.resize();
        }});
    });
}, "ier/model/CategoryTask":function () {
    define("ier/model/CategoryTask", ["dojo/_base/declare", "ecm/model/_ModelObject"], function (dojo_declare, ecm_model_ModelObject) {
        return dojo_declare("ier.model.CategoryTask", [ecm_model_ModelObject], {taskListingPaneClass:"ier/widget/tasks/MultiStatusTasksListingPane", taskStatus:null, isRecurring:null, taskType:null, taskUserId:null, nameFilter:"", parent:"IER", constructor:function (arguments) {
        }});
    });
}, "ier/widget/tasks/DDSweepTaskResultsPane":function () {
    require({cache:{"url:ier/widget/tasks/templates/TaskPane.html":"<div class=\"taskPane\" style=\"width: 100%; height: 100%;\" dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"container\" style=\"padding-top: 10px;\">\r\n\t</div>\r\n</div>"}});
    define("ier/widget/tasks/DDSweepTaskResultsPane", ["dojo/_base/declare", "dojo/_base/json", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-construct", "dijit/registry", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/form/Button", "ecm/LoggerMixin", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/util", "dojo/text!./templates/TaskPane.html"], function (dojo_declare, dojo_json, dojo_lang, dojo_domStyle, dojo_construct, dijit_registry, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, Button, ecm_LoggerMixin, ecm_dialog_MessageDialog, ier_constants, ier_messages, ier_util, templateString) {
        return dojo_declare("ier.widget.tasks.DDSweepTaskResultsPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            this.item = item;
            var resultsContainer = dojo_construct.create("div", {"class":"ierCommonPropertiesPane ecmCommonPropertiesPane"});
            if (item.results) {
                if (item.results.reports && !(item.results.reports instanceof Object)) {
                    item.results.reports = dojo_json.fromJson(item.results.reports);
                }
                if (item.results.reports) {
                    var tableNode = dojo_construct.toDom("<table class=\"propertyTable\" role=\"presentation\"></table>");
                    for (var i in item.results.reports) {
                        var report = item.results.reports[i];
                        if (report) {
                            var tr = dojo_construct.create("tr");
                            var td1 = dojo_construct.create("td", {"class":"propertyRowLabel", "style":"width: 5%;"});
                            var label = dojo_construct.create("label", {"for":this.id + "_" + "viewReportResult", "innerHTML":i});
                            td1.appendChild(label);
                            var td2 = dojo_construct.create("td", {"class":"propertyRowLabel"});
                            var button = new Button({label:ier_messages.taskResultsPane_downloadAllReports, reportId:report, onClick:dojo_lang.hitch(this, function (evt) {
                                var button = dijit_registry.getEnclosingWidget(evt.target);
                                var repository = ier_util.getRepository(item.results[ier_constants.Param_P8RepositoryId], item.results[ier_constants.Param_CE_EJB_URL]);
                                repository.retrieveItem(button.reportId, dojo_lang.hitch(this, function (itemRetrieved) {
                                    ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                                        if (actionsHandler) {
                                            actionsHandler["actionDownloadAll"](repository, [itemRetrieved]);
                                        }
                                    }));
                                }), ier_constants.ClassName_Transcript);
                            })});
                            var button2 = new Button({label:ier_messages.taskResultsPane_viewReportLink, reportId:report, onClick:dojo_lang.hitch(this, function (evt) {
                                var button = dijit_registry.getEnclosingWidget(evt.target);
                                var repository = ier_util.getRepository(item.results[ier_constants.Param_P8RepositoryId], item.results[ier_constants.Param_CE_EJB_URL]);
                                repository.retrieveItem(button.reportId, dojo_lang.hitch(this, function (itemRetrieved) {
                                    ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                                        if (actionsHandler) {
                                            actionsHandler["actionShowHyperlink"](repository, [itemRetrieved], null, null, null, null);
                                        }
                                    }));
                                }), ier_constants.ClassName_Transcript);
                            })});
                            td2.appendChild(button.domNode);
                            td2.appendChild(button2.domNode);
                            tr.appendChild(td1);
                            tr.appendChild(td2);
                            tableNode.appendChild(tr);
                        }
                    }
                    resultsContainer.appendChild(tableNode);
                    dojo_construct.place(resultsContainer, this.container, "only");
                }
                if (item.results.taskResultMessage) {
                    if (this.nodeMessage) {
                        delete this.nodeMessage;
                    }
                    var message = null;
                    if (item.results.taskResultMessageKey) {
                        message = ier_messages[item.results.taskResultMessageKey];
                    }
                    if (message == null) {
                        message = item.results.taskResultMessage;
                        if (message == "The basic schedule workflow launched successfully.") {
                            message = ier_messages.basicScheduleWorkflowLaunchedSuccess;
                        }
                        if (message == "The sweep completed successfully, but there are no records to process and include in the report.") {
                            message = ier_messages.basicScheduleNoRecordsToProcess;
                        }
                    }
                    this.nodeMessage = dojo_construct.create("pre", {"style":"", "class":"taskError", "innerHTML":message});
                    if (item.results.reports) {
                        dojo_construct.place(this.nodeMessage, this.container, "first");
                    } else {
                        dojo_construct.place(this.nodeMessage, this.container, "only");
                    }
                }
            }
        }});
    });
}, "ier/widget/RadioButtonSelector":function () {
    define(["dojo/_base/declare", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ecm/widget/_SinglePropertyEditorMixin", "dojo/text!./templates/RadioButtonSelector.html", "dijit/form/RadioButton"], function (dojo_declare, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ecm_widget_SinglePropertyEditorMixin, templateString) {
        return dojo_declare("ier.widget.RadioButtonSelector", [ecm_LoggerMixin, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_widget_SinglePropertyEditorMixin], {templateString:templateString, widgetsInTemplate:true, postCreate:function () {
            this.inherited(arguments);
        }, _setLabelAttr:function (content) {
            this._legend.innerHTML = content;
        }, setLabels:function (labels) {
            this._labels = labels;
        }, createRendering:function () {
            if (this._labels) {
                this.button1Label.innerHTML = this._labels[0];
                this.button2Label.innerHTML = this._labels[1];
            }
        }, getValue:function () {
            return "";
        }, _nop:null});
    });
}, "ier/widget/admin/DisplayPropertyPane":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/store/Memory", "dojo/string", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/BorderContainer", "idx/data/JsonStore", "ecm/model/Request", "ecm/widget/dialog/ConfirmationDialog", "ier/constants", "ier/messages", "ier/model/admin/Config", "ier/util/dialog", "ier/util/property", "ier/widget/admin/Grid", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/DisplayPropertyPane.html", "dojo/text!./templates/DisplayPropertyDialogContent.html", "dijit/Menu", "dijit/MenuItem", "dijit/form/Button", "dijit/layout/ContentPane", "ecm/widget/ContentClassSelector", "ecm/widget/FilterTextBox", "ecm/widget/SloshBucket"], function (array, declare, lang, Memory, string, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, JsonStore, Request, ConfirmationDialog, constants, messages, Config, util_dialog, util_property, Grid, IERBaseDialog, DisplayPropertyPane_html, DisplayPropertyDialogContent_html) {
        function newStore(data) {
            return new JsonStore({identifier:"value", label:"name", data:data || []});
        }
        var Dialog = declare(IERBaseDialog, {contentString:DisplayPropertyDialogContent_html, title:messages.admin_displayProperties, repository:null, config:null, store:null, object:null, type:"", _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this.addDomNodeCSSClass("ierSmallDialog");
            this._saveButton = this.addButton(messages.admin_save, "_onSave", false, true);
            this._propertySelector.hideAvailableOnAdd = true;
            this._availableStructure = [{field:"name", name:messages.admin_availableProperties, width:"100%"}];
            this._selectedStructure = [{field:"name", name:messages.admin_selectedProperties, width:"100%"}];
            this.connect(this._classSelector, "onContentClassSelected", "_onClassSelected");
            this.connect(this._filterBox, "onChange", "_onFilterChange");
            this.connect(this._restoreButton, "onClick", "_onRestore");
        }, _setObjectAttr:function (object) {
            this._set("object", object);
            this._classSelector.repository = this.repository;
            var id = object && object.id || "";
            this._classSelector.rootClassId = "";
            this._classSelector.setRootClassId(id || this.type);
            var label = object && object.name || " ";
            this._classSelector.setLabel(label);
            this._classSelector.setDisabled(!!id);
            this._filterBox.set("value", "");
            this._propertySelector.setAvailableGridModel(newStore(), this._availableStructure);
            this._propertySelector.setSelectedValuesGridModel(newStore(), this._selectedStructure);
            if (id) {
                this._loadAvailableProperties();
            }
        }, _loadAvailableProperties:function () {
            if (this.repository && this.object) {
                Request.invokeService("openContentClass", this.repository.type, {repositoryId:this.repository.id, objectStoreId:this.repository.objectStoreName, template_name:this.object.id, ier_config:true}, lang.hitch(this, function (response) {
                    var data = [];
                    array.forEach(response.criterias, function (c) {
                        var name = c.name;
                        if (!c.system && !c.hidden && !util_property.isRMSystemProperty(name) && !util_property.isDispositionGroupProperty(name) && !util_property.isVitalRecordGroupProperty(name)) {
                            data.push({value:name, name:c.label || name});
                        }
                    });
                    data.sort(function (a, b) {
                        return (a.name > b.name ? 1 : -1);
                    });
                    this._propertySelector.setAvailableGridModel(newStore(data), this._availableStructure);
                    this._loadSelectedProperties();
                }));
            }
        }, _loadSelectedProperties:function () {
            if (this.object) {
                var names = this.object.names;
                var selected = {};
                var data = array.map(this.object.props || [], function (p) {
                    selected[p] = p;
                    return {value:p, name:names[p] || p};
                });
                this._propertySelector.setSelectedValuesGridModel(newStore(data), this._selectedStructure, selected);
                this._propertySelector.filter({});
            }
        }, _getDefaultProperties:function (baseClassId, superClassOnly) {
            if (this.store && this.object) {
                var props = null;
                var names = null;
                if (baseClassId) {
                    var baseClass = this.repository.getContentClass(baseClassId, this._classSelector.objectStore);
                    if (baseClass) {
                        function findClass(superClass, subClass) {
                            var subClasses = superClass.subClasses && superClass.subClasses.all || [];
                            for (var i = 0; i < subClasses.length; i++) {
                                var c = subClasses[i];
                                if (c) {
                                    if (c.id == subClass.id) {
                                        return (superClassOnly ? [] : [c]);
                                    }
                                    var a = findClass(c, subClass);
                                    if (a) {
                                        a.push(c);
                                        return a;
                                    }
                                }
                            }
                            return null;
                        }
                        array.some(findClass(baseClass, this.object) || (superClassOnly ? [] : [this.object]), function (c) {
                            var object = this.store.get(c.id);
                            if (object) {
                                props = lang.clone(object.props);
                                names = lang.clone(object.names);
                                return true;
                            } else {
                                return false;
                            }
                        }, this);
                    }
                }
                this.object.props = props || [];
                this.object.names = names || {};
            }
        }, _onClassSelected:function (c) {
            if (c && c.id) {
                this.object = {id:c.id, name:c.name};
                this._getDefaultProperties(this.type);
                this._classSelector.setLabel(c.name || "");
                this._propertySelector.setAvailableGridModel(newStore(), this._availableStructure);
                this._propertySelector.setSelectedValuesGridModel(newStore(), this._selectedStructure);
                this._loadAvailableProperties();
            }
        }, _onFilterChange:function () {
            var value = this._filterBox.get("value");
            this._propertySelector.filter({name:"*" + value + "*"});
        }, _onRestore:function () {
            if (this.object) {
                Config.getConfig("repository", "default", lang.hitch(this, function (config) {
                    this.object = {id:this.object.id, name:this.object.name};
                    var props = config.get(this.object.id + "DisplayProperties");
                    if (props && props.length > 0) {
                        this.object.props = config.get(this.object.id + "DisplayProperties");
                        this.object.names = config.get(this.object.id + "DisplayNames");
                        this._loadSelectedProperties();
                    } else {
                        if (this.type) {
                            this._getDefaultProperties(this.type, true);
                        } else {
                            this._getDefaultProperties(constants.ClassName_RecordFolder, true);
                            if (!this.object.props || this.object.props.length === 0) {
                                this._getDefaultProperties(constants.ClassName_Record, true);
                            }
                        }
                        this._loadSelectedProperties();
                    }
                }));
            }
        }, _onSave:function () {
            if (this.config && this.object) {
                var data = this._propertySelector.getData(this._propertySelector.getSelectedValuesGrid());
                if (data && data.length > 0) {
                    var names = this.object.names;
                    this.object.props = array.map(data, function (d) {
                        var p = d.value;
                        names[p] = names[p] || d.name;
                        return p;
                    });
                    this.config.set(this.object.id + "DisplayProperties", this.object.props);
                    Config.saveConfig(this.config, lang.hitch(this, function () {
                        this.onSave(this.object);
                        this.hide();
                    }));
                }
            }
        }, onSave:function (config) {
        }});
        return declare([BorderContainer, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:DisplayPropertyPane_html, gutters:false, repository:null, config:null, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this._supportingWidgets = [];
            var structure = [{field:"name", name:messages.admin_class, width:"20%"}, {field:"props", name:messages.admin_displayProperties, width:"80%", sortable:false, formatter:function (object) {
                var names = object.names;
                return array.map(object.props, function (p) {
                    return names[p] || p;
                }).join(", ");
            }}];
            this._grid = new Grid({structure:structure, sortInitialOrder:{colId:1}});
            this._grid.placeAt(this._gridContainer.containerNode);
            this.connect(this._addFolderButton, "onClick", "_onAddFolder");
            this.connect(this._addRecordButton, "onClick", "_onAddRecord");
            this.connect(this._editButton, "onClick", "_onEdit");
            this.connect(this._deleteButton, "onClick", "_onDelete");
            this.connect(this._addFolderMenu, "onClick", "_onAddFolder");
            this.connect(this._addRecordMenu, "onClick", "_onAddRecord");
            this.connect(this._editMenu, "onClick", "_onEdit");
            this.connect(this._deleteMenu, "onClick", "_onDelete");
            this.connect(this._grid, "onSelectionChange", "_onSelectionChange");
            this._grid.menu.bind(this._menu, {hookPoint:"row"});
            this._onConfigChange();
            this._onSelectionChange();
        }, destroy:function () {
            if (this._dialog) {
                this._dialog.destroyRecursive();
            }
            this.inherited(arguments);
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._grid.setStore(new Memory({data:this._getData()}));
            this._onConfigChange();
        }, _getData:function () {
            var data = [];
            if (this.config) {
                var values = this.config.values;
                for (var key in values) {
                    var index = key.indexOf("DisplayProperties");
                    if (index > 0) {
                        var id = key.substring(0, index);
                        var name = values[id + "DisplayName"] || id;
                        var props = values[key] || [];
                        var names = values[id + "DisplayNames"] || {};
                        data.push({id:id, name:name, props:props, names:names});
                    }
                }
            }
            return data;
        }, _getDialog:function () {
            if (!this._dialog) {
                this._dialog = new Dialog({repository:this.repository, config:this.config, store:this._grid.store});
                this.connect(this._dialog, "onSave", "_onSave");
            }
            return this._dialog;
        }, _onAddFolder:function () {
            var dialog = this._getDialog();
            dialog.type = constants.ClassName_RecordFolder;
            dialog.set("object", null);
            dialog.show();
        }, _onAddRecord:function () {
            var dialog = this._getDialog();
            dialog.type = constants.ClassName_Record;
            dialog.set("object", null);
            dialog.show();
        }, _onEdit:function () {
            var selected = this._grid.getSelected();
            var dialog = this._getDialog();
            var object = this._grid.store.get(selected[0]);
            dialog.type = "";
            dialog.set("object", object);
            dialog.show();
        }, _onDelete:function () {
            if (this.config) {
                var selected = this._grid.getSelected();
                var predefined = this.config.get("predefinedClasses") || [];
                var list = [];
                array.forEach(selected, function (id) {
                    if (array.indexOf(predefined, id) < 0) {
                        list.push(id);
                    }
                });
                if (list.length > 0) {
                    var repository = this.repository;
                    var config = this.config;
                    var grid = this._grid;
                    var text = (list.length > 1 ? string.substitute(messages.delete_multiple_confirmation_question, [list.length]) : messages.delete_single_confirmation_question);
                    var dialog = new ConfirmationDialog({text:text, buttonLabel:messages.delete_confirmation_button, onExecute:function () {
                        array.forEach(list, function (id) {
                            config.set(id + "DisplayProperties", null);
                        });
                        Config.saveConfig(config, function () {
                            grid.deselectAll();
                            var store = grid.store;
                            array.forEach(list, function (id) {
                                store.remove(id);
                            });
                            repository.refresh();
                        });
                    }});
                    dialog.show();
                    util_dialog.manage(dialog);
                } else {
                    util_dialog.showMessage(messages.admin_cannotDeletePredefined);
                }
            }
        }, _onSave:function (object) {
            if (object) {
                var store = this._grid.store;
                if (store.get(object.id)) {
                    store.put(object);
                } else {
                    store.add(object);
                }
                this.repository.refresh();
            }
        }, _onConfigChange:function () {
            var disabled = !this.config;
            this._addFolderButton.set("disabled", disabled);
            this._addRecordButton.set("disabled", disabled);
            this._addFolderMenu.set("disabled", disabled);
            this._addRecordMenu.set("disabled", disabled);
        }, _onSelectionChange:function () {
            var selected = this._grid.getSelected();
            var disabled = selected.length !== 1;
            this._editButton.set("disabled", disabled);
            this._editMenu.set("disabled", disabled);
            disabled = selected.length === 0;
            this._deleteButton.set("disabled", disabled);
            this._deleteMenu.set("disabled", disabled);
        }});
    });
}, "url:ier/widget/panes/templates/AsyncTaskSchedulerPaneContent.html":"<div class=\"taskSchedulerPane\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_scheduleInformation}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_nameTextBox\">${messages.Name}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_nameHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"nameTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" style=\"width: 300px\"\r\n\t\t\t\t\t\tid=\"${id}_nameTextBox\" name=\"${id}_nameTextBox\" data-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"descriptionRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label for=\"${id}_descriptionTextBox\">${messages.description_label}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_descriptionHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"descriptionTextBox\" data-dojo-type=\"ecm/widget/ValidationSimpleTextarea\" style=\"width: 300px\"\r\n\t\t\t\t\t\t\tid=\"${id}_descriptionTextBox\" name=\"${id}_descriptionTextBox\" data-dojo-props=\"trim: true, value: '',intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"startTimeRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t${messages.taskSchedulerPane_startTime}:\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_startTimeHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"startTimeDateTimeTextBox\" data-dojo-type=\"idx/form/DateTimeTextBox\" \r\n\t\t\t\t\t\t\tid=\"${id}_startTimeTextBox\"></span>\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"startImmediatelyCheckbox\" data-dojo-type=\"dijit/form/CheckBox\" \r\n\t\t\t\t\t\t\tname=\"${id}_startImmediatelyCheckBox\" id=\"${id}_startImmediatelyCheckBox\" data-dojo-attach-event=\"onChange:onInputChange\"></span>\r\n\t\t\t\t\t\t<label for=\"${id}_startImmediatelyCheckBox\">${messages.taskSchedulerPane_startImmediately}</label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"reoccurenceRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t${messages.taskSchedulerPane_recurrence}:\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_recurrenceHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t <fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t                    <legend style=\"display: none;\">${messages.taskSchedulerPane_recurrence}</legend>\r\n\t\t                    <div value=\"true\" type=\"radio\" name=\"${id}_recurringRadioGroup\" data-dojo-attach-point=\"enableRecurrenceRadioButton\" id=\"${id}_enableRecurringRadio\" \r\n\t\t                    \tdata-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t                    <label for=\"${id}_enableRecurringRadio\">${messages.enable}</label>&nbsp;\r\n\t\t                    <div value=\"false\" type=\"radio\" name=\"${id}_recurringRadioGroup\" data-dojo-attach-point=\"disableRecurrenceRadioButton\" id=\"${id}_disableRecurringRadio\" \r\n\t\t                    \tdata-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\" checked></div>\r\n\t\t                    <label for=\"${id}_disableRecurringRadio\">${messages.disable}</label>\r\n\t               \t\t</fieldset>\r\n\t               \t</td>\r\n\t           </tr>\r\n\t           <tr data-dojo-attach-point=\"reoccurenceIntervalRow\">\r\n\t           \t\t<td colspan=\"2\">\r\n\t               \t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-left: 30px;\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t\t\t\t\t<span data-dojo-attach-point=\"intervalRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t\t\t\t\t<label for=\"${id}_intervalTextBox\">${messages.taskSchedulerPane_interval}:</label>\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_intervalHoverHelp}\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"ierFloatLeft\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div data-dojo-attach-point=\"intervalNumberSpinner\" data-dojo-type=\"dijit/form/NumberSpinner\" id=\"${id}_intervalTextBox\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"value:1,constraints:{min:1,max:1000,places:0},disabled:true\" data-dojo-attach-event=\"onKeyUp:onInputChange\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<select style=\"margin-left: 5px;\" data-dojo-attach-point=\"intervalSelect\" data-dojo-type=\"dijit/form/Select\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"disabled: true, intermediateChanges: true\" data-dojo-attach-event=\"onChange:onInputChange\" aria-label=\"${ier_messages.timeUnit}\">\r\n\t\t\t\t\t\t\t\t\t\t\t \t<option value=\"hours\">${messages.hours}</option>\r\n\t\t\t\t\t\t\t\t\t\t     \t<option value=\"days\" selected=\"selected\">${messages.days}</option>\r\n\t\t\t\t\t\t\t\t\t\t     \t<option value=\"weeks\">${messages.weeks}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t\t\t\t\t<span data-dojo-attach-point=\"endTimeRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t\t\t\t\t${messages.endTime}:\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_endTimeHoverHelp}\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-attach-point=\"endTimeDateTimeBox\" data-dojo-type=\"idx/form/DateTimeTextBox\" id=\"${id}_endTimeTextBox\" \r\n\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"disabled:true\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr> \r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"loginInformation\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_loginInformation}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"usernameRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_usernameTextBox\">${messages.username}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"usernameHoverHelp\" message=\"${messages.taskSchedulerPane_usernameHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"usernameTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" id=\"${id}_usernameTextBox\" name=\"${id}_usernameTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"passwordRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_passwordTextBox\">${messages.password}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"passwordHoverHelp\" message=\"${messages.taskSchedulerPane_passwordHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"passwordTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" type=\"password\" id=\"${id}_passwordTextBox\" \r\n\t\t\t\t\t\t\tname=\"${id}_passwordTextBox\" data-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"notification\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_notification}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label for=\"${id}_emailAddressTextBox\">${messages.taskSchedulerPane_emailAddress}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_emailAddressHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"emailAdressTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" id=\"${id}_emailAddressTextBox\" name=\"${id}_emailAddressTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"trim: true,intermediateChanges: true\" \r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>", "ier/widget/admin/AddDesktopSettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/string", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ecm/widget/dialog/MessageDialog", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/model/admin/Config", "dojo/text!./templates/AddDesktopSettingsPane.html", "ecm/widget/HoverHelp", "ecm/widget/ValidationTextBox", "idx/layout/TitlePane", "dijit/form/Button", "ecm/widget/HoverHelp"], function (declare, lang, string, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, MessageDialog, Request, ier_constants, messages, ier_util, Config, AddDesktopSettingsPane_html) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:AddDesktopSettingsPane_html, config:null, dirty:false, valid:true, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._desktopId.pattern = "([a-zA-Z0-9])*";
            this._desktopId.invalidMessage = this._messages.admin_addDesktopPane_idInvalid;
            this._desktopName.pattern = "([^\"*|<>?:\\\\/])*";
            this._desktopName.invalidMessage = this._messages.admin_addDesktopPane_invalidName;
            this.connect(this._addButton, "onClick", "addDesktop");
            this.connect(this._desktopName, "onChange", "_onNameInputChange");
            this.connect(this._desktopId, "onChange", "_onInputChange");
            this.connect(this._desktopDescription, "onChange", "_onInputChange");
        }, addDesktop:function () {
            var serviceParams = ier_util.getDefaultParams(null, lang.hitch(this, function (response) {
                var dialog = new MessageDialog({text:string.substitute(this._messages.admin_addDesktopPane_success, [this._desktopName.get("value")])});
                dialog.show();
                this._desktopId.set("value", "");
                this._desktopName.set("value", "");
                this._desktopDescription.set("value", "");
            }));
            serviceParams.requestParams[ier_constants.Param_Id] = this._desktopId.get("value");
            serviceParams.requestParams[ier_constants.Param_Name] = this._desktopName.get("value");
            serviceParams.requestParams[ier_constants.Param_Description] = this._desktopDescription.get("value");
            Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateIERDesktop, ier_constants.PostEncoding, serviceParams);
        }, _onNameInputChange:function () {
            this._desktopId.set("value", this._getIdValueFromName(this._desktopName.get("value")));
        }, _onInputChange:function () {
            this._addButton.set("disabled", !this.validate());
            this.onChange();
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, validate:function () {
            if (this._desktopName.get("value") == null || this._desktopName.get("value").length == 0 || this._desktopId.get("value") == null || this._desktopId.get("value").length == 0) {
                return false;
            }
            return true;
        }, _getIdValueFromName:function (name) {
            var id = "";
            if (name) {
                for (var i = 0; i < name.length; i++) {
                    var ch = name[i].charCodeAt();
                    if ((ch > 47 && ch < 58) || (ch > 64 && ch < 91) || (ch > 96 && ch < 123)) {
                        id += name[i];
                    }
                }
            }
            return id;
        }, onChange:function () {
        }});
    });
}, "ier/model/admin/Config":function () {
    define("ier/model/admin/Config", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "ecm/model/_ModelObject", "ecm/model/Desktop", "ecm/model/Request"], function (array, declare, lang, _ModelObject, Desktop, Request) {
        var Config = declare(_ModelObject, {constructor:function (id, name, values) {
            this.values = values || {};
        }, get:function (key) {
            return this.values[key];
        }, set:function (key, value) {
            this.values[key] = value;
        }});
        Config.getConfig = function (name, id, callback) {
            var repository = Desktop.getAuthenticatingRepository();
            var params = {repositoryId:repository ? repository.id : null, application:"ier", action:"get", configuration:name, id:id || "default"};
            Request.invokeService("admin/configuration", null, params, function (response) {
                if (callback) {
                    var values = response.configuration;
                    var id = values.id;
                    delete values.id;
                    var config = new Config(id, name, values);
                    callback(config);
                }
            });
        };
        Config.saveConfig = function (config, callback) {
            var repository = Desktop.getAuthenticatingRepository();
            var params = {repositoryId:repository ? repository.id : null, application:"ier", action:"save", configuration:config.name, id:config.id || "default"};
            var values = config.values || {};
            Request.postService("admin/configuration", null, params, "text/json", JSON.stringify(values), function (response) {
                if (callback) {
                    callback(response);
                }
            });
        };
        Config.deleteConfig = function (config, callback) {
            var name = null;
            var id = null;
            if (lang.isArray(config)) {
                name = config[0].name;
                id = array.map(config, function (c) {
                    return c.id;
                }).join(",");
            } else {
                name = config.name;
                id = config.id;
            }
            var repository = Desktop.getAuthenticatingRepository();
            var params = {repositoryId:repository ? repository.id : null, application:"ier", action:"delete", configuration:name, id:id};
            Request.invokeService("admin/configuration", null, params, function (response) {
                if (callback) {
                    callback(response);
                }
            });
        };
        Config.listConfig = function (name, callback) {
            var repository = Desktop.getAuthenticatingRepository();
            var params = {repositoryId:repository ? repository.id : null, application:"ier", action:"list", configuration:name, id:"default"};
            Request.invokeService("admin/configuration", null, params, function (response) {
                if (callback) {
                    var list = array.map(response.list || [], function (values) {
                        var id = values.id;
                        delete values.id;
                        return new Config(id, name, values);
                    });
                    callback(list);
                }
            });
        };
        return Config;
    });
}, "ier/widget/panes/EntityItemFoldersFiledInPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-style", "ecm/widget/FoldersFiledInPane", "dijit/form/RadioButton", "ier/util/util", "ier/messages", "dijit/_base/manager"], function (dojo_declare, dojo_lang, dom_class, dom_style, ecm_FoldersFiledInPane, RadioButton, ier_util, ier_messages, dijit_manager) {
        return dojo_declare("ier.widget.panes.EntityItemFoldersFiledInPane", [ecm_FoldersFiledInPane], {postCreate:function () {
            this.inherited(arguments);
            dom_class.add(this.domNode, "ierEntityItemFoldersFiledInPane");
            dom_style.set(this.domNode, "margin-top", "10px");
        }, render:function () {
            if (this.item && !this.rendered) {
                var self = this;
                this.item.retrieveFoldersFiledIn(function (folders, columns) {
                    self._createGrid(folders, columns);
                    var structure = self.grid.structure;
                    structure[0].formatter = dojo_lang.hitch(self, "formatRecordContainerIcon");
                    if (folders && folders.length > 1) {
                        var newCol = {field:"contentItem", name:ier_messages.recordPropDlg_securityParent, width:"80px", formatter:dojo_lang.hitch(self, "formatParentSecurityIcon")};
                        structure.unshift(newCol);
                    }
                    self.grid.setStructure(structure);
                });
                this.rendered = true;
            }
        }, getSecurityParentItemId:function () {
            return this._securityParentItemId;
        }, formatParentSecurityIcon:function (data, index) {
            var sfId = this.item.attributes["SecurityFolder"];
            var parentItemId = data.id;
            var radio = new RadioButton({checked:parentItemId == sfId, name:"ierEntityItemFoldersFiledInPaneSecurityParent", value:parentItemId});
            this.connect(radio, "onClick", dojo_lang.hitch(this, function (event) {
                this._securityParentItemId = radio.get("value");
            }));
            this.connect(radio, "onChange", dojo_lang.hitch(this, function (event) {
                if (event) {
                    this._securityParentItemId = radio.get("value");
                    this.onFiledInChanged();
                }
            }));
            this.connect(this.grid, "onSelected", dojo_lang.hitch(this, function (index) {
                var selectedRow = this.grid.getRowNode(index);
                var ws = dijit_manager.findWidgets(selectedRow);
                dojo.forEach(ws, function (w) {
                    if (w.declaredClass == "dijit.form.RadioButton") {
                        w.set("checked", "checked");
                    }
                }, this);
            }));
            return radio;
        }, formatRecordContainerIcon:function (data, index) {
            var item = this.grid.getItem(index);
            var parentItem = this.grid.store.getValue(item, "contentItem");
            var className = ier_util.getIconClass(parentItem);
            var altText = ier_util.getMimetypeTooltip(parentItem) || "";
            return "<img role=\"presentation\" class=\"" + className + " alt=\"" + altText + "\"" + " title=\"" + altText + "\" src=\"dojo/resources/blank.gif\"></img>";
        }, onFiledInChanged:function () {
        }});
    });
}, "ier/widget/tasks/TaskExecutionRecordPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-class", "dojo/dom-construct", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ier/constants", "ier/messages", "ier/widget/listView/gridModules/RowContextMenu", "dojo/text!./templates/TaskExecutionRecordPane.html", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_lang, dojo_domStyle, dojo_domClass, dojo_construct, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ecm_model_Desktop, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ier_constants, ier_messages, ier_widget_listView_RowContextMenu, templateString) {
        return dojo_declare("ier.widget.tasks.TaskExecutionRecordPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.contentList.setContentListModules(this.getContentListModules());
            this.contentList.setGridExtensionModules(this.getContentListGridModules());
        }, getContentListModules:function () {
            var array = [];
            return array;
        }, getContentListGridModules:function () {
            var array = [];
            array.push(ier_widget_listView_RowContextMenu);
            return array;
        }, createRendering:function (item) {
            if (item && this.item != item && (item instanceof ecm_model_AsyncTask)) {
                var actionsHandler = ecm_model_Desktop.getActionsHandler();
                if (actionsHandler) {
                    actionsHandler.actionTaskOpen(null, [item], dojo_lang.hitch(this, function (item, resultSet) {
                        this.contentList.setResultSet(resultSet);
                    }), null, item.resultSet, null, true);
                }
            }
            this.connect(this.contentList, "onOpenItem", dojo_lang.hitch(this, function (item, openedItemData) {
                this.onTaskExecutionRecordOpened(item, openedItemData);
            }));
        }, onTaskExecutionRecordOpened:function (item, openedItemData) {
        }});
    });
}, "ier/widget/admin/RepositorySettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/ContentPane", "ier/constants", "ier/messages", "ier/model/admin/Config", "ier/widget/ObjectSelector", "dojo/text!./templates/RepositorySettingsPane.html", "dijit/form/Button", "idx/layout/TitlePane", "ecm/widget/HoverHelp", "ier/widget/admin/SystemConfigPane"], function (declare, lang, dom_class, dom_construct, _TemplatedMixin, _WidgetsInTemplateMixin, ContentPane, constants, messages, Config, ObjectSelector, RepositorySettingsPane_html) {
        return declare([ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:RepositorySettingsPane_html, repository:null, config:null, dirty:false, valid:true, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._selector = new ObjectSelector({id:this.id + "_selector", labelId:this.id + "_selectorLabel", label:messages.admin_defaultFilePlan, objectClassName:constants.ClassName_FilePlan});
            dom_construct.place(this._selector.domNode, this._selectorContainer);
            this.connect(this._saveButton, "onClick", this._save);
            this.connect(this._resetButton, "onClick", this._reset);
            this.connect(this._selector, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._systemConfigPane, "onChange", function (dirty) {
                this._validate(dirty);
            });
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._reset();
            this._systemConfigPane.set("repository", this.repository);
        }, _save:function () {
            if (this.config) {
                var filePlan = this._selector.selectedItem;
                this.config.set("defaultFilePlan", filePlan && filePlan.getGuidId() || "");
                Config.saveConfig(this.config, lang.hitch(this, function () {
                    this._validate(false);
                }));
            }
            this._systemConfigPane.save();
        }, _reset:function () {
            this._selector.repository = this.repository;
            var defaultFilePlan = this.config && this.config.get("defaultFilePlan");
            var filePlan = defaultFilePlan && this.repository && this.repository.getFilePlan(defaultFilePlan);
            this._selector.setSelectedItem(filePlan);
            this._validate(false);
            this._systemConfigPane.reset();
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this.valid = this._selector.get("value") && this._systemConfigPane.valid;
            this._saveButton.set("disabled", !dirty || !this.valid);
            this._resetButton.set("disabled", !dirty);
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/widget/tasks/TaskParametersPane":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "dojo/dom-construct", "dojo/date/locale", "ier/constants", "ier/messages", "ier/widget/tasks/TaskDetailsPane", "dojo/text!./templates/TaskDetailsPane.html", "ecm/widget/PropertyGrid"], function (dojo_declare, dojo_domStyle, dojo_construct, dojo_date_locale, ier_constants, ier_messages, ier_widget_TaskDetailsPane, templateString, ecm_grid_PropertyGrid) {
        return dojo_declare("ier.widget.tasks.TaskParametersPane", [ier_widget_TaskDetailsPane], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            this._createPropertiesGrid(item);
        }, _createPropertiesGrid:function (item) {
            if (this.propGrid) {
                this.propGrid.destroy();
            }
            var data = {};
            var resources = {};
            var propertiesArray = [];
            if (item instanceof ecm.model.AsyncTaskInstance) {
                item = item.parent;
            }
            var parameters = item.taskRequest.specificTaskRequest[ier_constants.Param_ParameterList].split(",");
            for (var index in parameters) {
                var parameter = parameters[index];
                if (parameter) {
                    var name = parameter;
                    var label = ier_messages[parameter];
                    var value = item.taskRequest.specificTaskRequest[parameter];
                    if (value) {
                        data[name] = value;
                        resources[name + "Label"] = label || name;
                        propertiesArray.push(name);
                    }
                }
            }
            var taskProperties = propertiesArray.join(",");
            this.propGrid = new ecm_grid_PropertyGrid({data:data, properties:taskProperties, labelKeySuffix:"Label", resources:resources});
            this.propGrid.startup();
            this.propGrid.placeAt(this.gridContainer, "first");
            this.resize();
        }});
    });
}, "url:ier/widget/dialog/templates/RecordPropertiesDialogContent.html":"<div data-dojo-type=\"idx/layout/ContentPane\" class=\"ierDialogContent ierRecordPropDlgContent ierEditPropertiesDialog\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\"\r\n\t\tdata-dojo-attach-point=\"tabConatiner\"\r\n\t\tclass=\"ierDialogContentTabContainer\"\r\n\t\tstyle=\"width: 100%; height: 100%;\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\"\r\n\t\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemPropPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemDetailPane\"\r\n\t\t\ttitle=\"${_ierMessages.detail}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemDetailPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemSecurityPane\"\r\n\t\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemSecurityPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemFoldersFiledInPane\"\r\n\t\t\ttitle=\"${_ierMessages.baseDialog_filedIn}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemFiledInPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.links}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemLinksPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemLinksPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemHoldPane\"\r\n\t\t\ttitle=\"${_ierMessages.holds}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemHoldPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemHistoryPane\"\r\n\t\t\ttitle=\"${_ierMessages.historyPane_title}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemHistoryPane\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/templates/ListTypeSelector.html":"<div class=\"dijit dijitReset dijitInline\" style=\"\">\r\n    <label for=\"${id}_list_type_selection\" class=\"favoriteLabel\" dojoAttachPoint=\"listTypeSelectionLabel\">${messages.show_label}</label>\r\n    <select id=\"${id}_list_type_selection\" dojoType=\"dijit.form.Select\" \r\n        name=\"${id}_list_type_selection\" style=\"width:120px;\" dojoAttachPoint=\"listTypeSelection\">\r\n    </select>\r\n</div>\r\n", "ier/widget/layout/FilePlanFlyoutPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dijit/form/Button", "ecm/model/Desktop", "ecm/widget/FilterTextBox", "ecm/widget/layout/_LaunchBarDialogPane", "ier/constants", "ier/messages", "ier/widget/FilePlanSelectorTree", "dojo/text!./templates/FlyoutPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_lang, dojo_construct, Button, ecm_model_desktop, ecm_widget_FilterTextBox, ecm_widget_layout_LaunchBarDialogPane, ier_constants, ier_messages, ier_widget_FilePlanSelectorTree, templateString) {
        return dojo_declare("ier.widget.layout.FilePlanFlyoutPane", [ecm_widget_layout_LaunchBarDialogPane], {widgetsInTemplate:true, templateString:templateString, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this._createToolbar();
        }, setRepository:function (repository) {
            this.repository = repository;
            if (this.selected) {
                if (repository.isIERLoaded()) {
                    this._fileplanTree.setRepository(repository);
                }
            }
        }, focus:function () {
            this._filter.focus();
        }, reset:function () {
            this.setRepository(this.repository);
            this.needReset = false;
        }, loadContent:function () {
            if (!this.isLoaded) {
                var self = this;
                this._fileplanTree = ier_widget_FilePlanSelectorTree();
                this.bottomPane.domNode.appendChild(this._fileplanTree.domNode);
                this.connect(this._fileplanTree, "onFilePlanSelected", function (repository, fileplan) {
                    ecm_model_desktop.setCurrentFilePlan(fileplan);
                    self.selectContentPane(ier_constants.Feature_IERBrowseFilePlan, {fileplan:fileplan, repository:repository});
                    self.onRepositoryChange(self, repository);
                    self.closePopup();
                });
                this.isLoaded = true;
            }
        }, _createToolbar:function () {
            this._toolbarNode = dojo_construct.create("div", {"class":"toolbar"});
            this.bottomPane.domNode.appendChild(this._toolbarNode);
            this._toolbarFilterNode = dojo_construct.create("div", {"class":"filterArea", "style":"float: none"});
            this._toolbarNode.appendChild(this._toolbarFilterNode);
            this._refreshButton = new Button({label:ier_messages.refresh, "style":"float:left;  width:25%;", onClick:dojo_lang.hitch(this, function () {
                if (this._fileplanTree) {
                    this._fileplanTree.refreshRoot();
                }
            })});
            this._filter = new ecm_widget_FilterTextBox({placeholder:ier_messages.fileplanFlyoutPane_filterRepositories, "style":"float:right;"});
            this._toolbarFilterNode.appendChild(this._refreshButton.domNode);
            this._toolbarFilterNode.appendChild(this._filter.domNode);
            this._filterData = null;
            this.connect(this._filter, "_onInput", "_filterItems");
            this.connect(this._filter, "_setValueAttr", "_filterItems");
        }, _filterItems:function () {
            var filterData = this._filter.get("value");
            var treeModel = this._fileplanTree.getTreeModel();
            if (this._filterData != filterData && treeModel) {
                this._filterData = filterData;
                treeModel.applyFilter("*" + filterData + "*");
            }
        }, onRepositoryChange:function (pane, repository) {
        }});
    });
}, "ier/widget/BaseReportViewer":function () {
    define(["dojo/_base/declare", "dijit/layout/ContentPane", "ier/widget/admin/config"], function (dojo_declare, dijit_layout_ContentPane, ier_admin_config) {
        return dojo_declare("ier.widget.BaseReportViewer", [dijit_layout_ContentPane], {reportDefinitionId:null, reportName:null, repository:null, reportResultJobId:null, tableName:null, JDBCNameOfReportDatabase:ier_admin_config.getJDBCReportDBDataSource(), createRendering:function (onComplete) {
        }, view:function (reportResultJobId, onComplete) {
        }, close:function (onComplete) {
        }});
    });
}, "url:ier/widget/templates/FilePlanSelectorTree.html":"<div class=\"ierFilePlanSelectorTree\">\r\n</div>", "ier/widget/panes/ObjectStoreSecurityPane":function () {
    define(["dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/connect", "dojo/_base/array", "dojo/dom-construct", "dojo/dom-geometry", "dojo/query", "dojo/string", "dojo/dom-geometry", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ecm/widget/Button", "ecm/widget/CompositeButton", "ecm/widget/HoverHelp", "ecm/model/Permission", "idx/html", "ier/messages", "ier/widget/dialog/AddObjectStorePermissionDialog", "dojo/text!./templates/ObjectStoreSecurityPane.html"], function (declare, kernel, lang, connect, array, construct, domGeom, query, string, geometry, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin, LoggerMixin, Button, CompositeButton, HoverHelp, Permission, idxHtml, ier_messages, AddObjectStorePermissionDialog, template) {
        return declare("ier.widget.panes.ObjectStoreSecurityPane", [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin, LoggerMixin], {_template:{privileges:[{id:"RMCLASSGUIDEADMINS", label:ier_messages.record_classificationAdministrator, securityGroup:0}, {id:"RMADMINS", label:ier_messages.record_administrator, securityGroup:1}, {id:"RMMANAGERS", label:ier_messages.record_manager, securityGroup:2}, {id:"RMPRIVUSERS", label:ier_messages.record_privileged_user, securityGroup:3}, {id:"RMUSERS", label:ier_messages.record_user, securityGroup:4}], }, templateString:template, widgetsInTemplate:true, fitToParent:false, _messages:ecm.messages, _isReadonly:true, setRepository:function (repository) {
            this.repository = repository;
        }, renderPermissions:function (permissions, isReadonly) {
            this._isReadonly = isReadonly;
            this._categorizePermission(permissions);
            if (this._addButtons) {
                array.forEach(this._addButtons, function (button) {
                    button.set("disabled", isReadonly);
                });
            }
        }, _normalize:function (permissions) {
            this._sortPermissions(permissions);
            var normalizeList = [];
            array.forEach(permissions, function (permission) {
                var filteredPermission = null;
                array.some(normalizeList, function (item) {
                    if (item.grantee.id == permission.id && item.securityGroup == permission.securityGroup) {
                        filteredPermission = item;
                    }
                });
                var listItem;
                if (filteredPermission) {
                    listItem = filteredPermission;
                } else {
                    listItem = {grantee:permission.grantee, granteeType:permission.granteeType, securityGroup:permission.securityGroup};
                    normalizeList.push(listItem);
                }
            }, this);
            return normalizeList;
        }, _sortPermissions:function (permissions) {
            var sortArray = function (a, b) {
                if (a.displayName > b.displayName) {
                    return 1;
                }
                if (a.displayName < b.displayName) {
                    return -1;
                }
                return 0;
            };
            permissions.sort(sortArray);
        }, _categorizePermission:function (permissions) {
            this._privilegeList = [];
            if (this.repository.recordDatamodelType != "DoDClassified") {
                delete this._template.privileges[0];
            }
            this._loadPrivileges(this.repository);
            array.forEach(this._privileges, function (privilege) {
                if (privilege) {
                    this._privilegeList.push({id:privilege.id, name:privilege.label, securityGroup:privilege.securityGroup, permissions:[]});
                }
            }, this);
            var normalizePermissionList = this._normalize(permissions);
            if (normalizePermissionList.length > 0) {
                array.forEach(normalizePermissionList, function (permissionItem) {
                    this._assignItem(permissionItem);
                }, this);
            }
            this._renderPermissionGrouping(this._privilegeList);
            return this._privilegeList;
        }, _loadPrivileges:function (repository) {
            this._privileges = repository._isP8() ? this._template.privileges : [];
        }, _renderPermissionGrouping:function (permissionList) {
            var self = this;
            self._clear();
            self._addButtons = [];
            self._widgets = [];
            var membersDiv = construct.create("div");
            construct.place(membersDiv, self._centerPane, "only");
            array.forEach(permissionList, function (item, index) {
                if (self.repository._isP8()) {
                    var div = construct.create("div", {"class":"privilegeContainer"}, membersDiv);
                    var leftPaneDiv = construct.create("div", {"class":"leftPane", innerHTML:item.name + ":"}, div);
                    var buttonDiv = construct.create("div", {"class":"buttonPane", }, div);
                    var button = new dijit.form.Button({label:ier_messages.add_with_elipsis});
                    self._addButtons.push(button);
                    buttonDiv.appendChild(button.domNode);
                    connect.connect(button, "onClick", function (evt) {
                        self._onAdd(evt, item);
                    });
                    var members = construct.create("div", {"class":"rightPane"}, div);
                    array.forEach(item.permissions, function (perm, index) {
                        var member = construct.create("div", {"class":"member"}, members);
                        var button;
                        var buttonLabel = self.repository._isCM() ? perm.permission.grantee.id : perm.permission.grantee.displayName;
                        button = new ecm.widget.CompositeButton({label:buttonLabel, actionIconClass:"removeIcon", actionAltText:string.substitute(self._messages.remove_member, [buttonLabel])});
                        connect.connect(button, "_onActionButtonClick", function (evt) {
                            item.permissions.splice(index, 1);
                            self._renderPermissionGrouping(self._privilegeList);
                            if (self._addButtons && self._addButtons[0]) {
                                self._addButtons[0].focus();
                            }
                            self.onChange();
                        });
                        member.appendChild(button.domNode);
                        self._widgets.push(button);
                    });
                    members.appendChild(construct.create("div", {"class":"member", innerHTML:"&nbsp;"}));
                }
            });
            this.resize();
        }, _onAdd:function (evt, item) {
            var addObjectStorePermissionDialog = new AddObjectStorePermissionDialog({repository:this.repository, filteredItems:this._getCurrentGrantees(item.securityGroup), callback:lang.hitch(this, function (permissions) {
                this._addPermissions(item.securityGroup, permissions);
            })});
            addObjectStorePermissionDialog.show();
        }, _getCurrentGrantees:function (securityGroup) {
            var currentGrantees = [];
            array.some(this._privilegeList, function (privilege) {
                if (privilege.securityGroup == securityGroup) {
                    array.forEach(privilege.permissions, function (entry) {
                        currentGrantees.push(entry.permission.grantee);
                    });
                    return true;
                }
            });
            return currentGrantees;
        }, _addPermissions:function (privilegeId, permissions) {
            var privilege = null;
            array.some(this._privilegeList, function (item) {
                if (item.securityGroup == privilegeId) {
                    privilege = item;
                    return true;
                }
            });
            if (privilege) {
                array.forEach(permissions, function (permission) {
                    var item = this._getItem(privilege, permission);
                    if (!item) {
                        var itemPermission = {grantee:permission.grantee, granteeType:permission.granteeType, securityGroup:privilege.securityGroup};
                        privilege.permissions.push({permission:itemPermission});
                    }
                }, this);
                this.onChange();
            }
            this._renderPermissionGrouping(this._privilegeList);
        }, _assignItem:function (item) {
            array.some(this._privileges, function (privilege, index) {
                var privilegeBucket = this._privilegeList[index];
                if (item.securityGroup == privilegeBucket.securityGroup) {
                    privilegeBucket.permissions.push({permission:item});
                    return true;
                }
            }, this);
        }, _getItem:function (privilege, permission) {
            var item = null;
            array.some(privilege.permissions, function (entry) {
                if (entry.permission.grantee.id == permission.id) {
                    item = entry;
                    return true;
                }
            });
            return item;
        }, _removeItem:function (id) {
            array.some(this._privilegeList, function (privilege) {
                var filteredPermissions = array.filter(privilege.permissions, function (entry) {
                    return entry.permission.grantee.id != id;
                });
                if (filteredPermissions.length != privilege.permissions.length) {
                    privilege.permissions = filteredPermissions;
                    return true;
                }
            });
        }, _createHoverHelp:function (hoverHelpText, hoverHelpLink) {
            var hoverHelp = new ecm.widget.HoverHelp({message:hoverHelpText, isFocusable:true, href:hoverHelpLink ? hoverHelpLink : null});
            hoverHelp.startup();
            if (!this._hoverHelpArray) {
                this._hoverHelpArray = [];
            }
            this._hoverHelpArray.push(hoverHelp);
            return hoverHelp;
        }, resize:function () {
            var width = 0;
            var items = query(".leftPane", this.domNode);
            array.forEach(items, function (item) {
                var w = geometry.getMarginBox(item).w;
                if (w > width) {
                    width = w;
                }
            });
            if (width > 0) {
                array.forEach(items, function (item) {
                    geometry.setMarginBox(item, {w:width});
                });
            }
        }, _clear:function () {
            if (this._addButtons) {
                array.forEach(this._addButtons, function (button) {
                    if (!button._destroyed) {
                        button.destroyRecursive();
                    }
                    delete button;
                });
                this._addButtons = null;
            }
            if (this._widgets) {
                array.forEach(this._widgets, function (item) {
                    if (!item._destroyed) {
                        item.destroyRecursive();
                    }
                    delete item;
                });
                this._widgets = null;
            }
            if (this._centerPane && this._centerPane.firstChild) {
                this._centerPane.removeChild(this._centerPane.firstChild);
            }
        }, destroy:function () {
            this._clear();
            if (this._hoverHelpArray) {
                array.forEach(this._hoverHelpArray, function (item) {
                    if (!item._destroyed) {
                        item.destroyRecursive();
                    }
                    delete item;
                });
            }
            this._privileges = null;
            this.inherited(arguments);
        }, getPermissions:function () {
            var permissions = null;
            if (!this._isReadonly) {
                permissions = this._getPermissions();
            }
            return permissions;
        }, _getPermissions:function () {
            var permissionArray = [];
            array.forEach(this._privilegeList, function (privilege) {
                array.forEach(privilege.permissions, function (entry) {
                    var jsonPermission = {};
                    jsonPermission.granteeName = entry.permission.grantee.name;
                    jsonPermission.granteeType = entry.permission.granteeType;
                    jsonPermission.securityGroup = entry.permission.securityGroup;
                    permissionArray.push(jsonPermission);
                });
            });
            return permissionArray;
        }, onChange:function () {
        }, reset:function () {
            this._isReadonly = true;
            this._privilegeList = [];
            if (this._addButtons) {
                array.forEach(this._addButtons, function (button) {
                    button.set("disabled", true);
                });
            }
            this._clear();
        }});
    });
}, "ier/widget/admin/SettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/BorderContainer", "ier/messages", "ier/model/admin/Config", "dojo/text!./templates/SettingsPane.html", "dijit/form/Button", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/admin/ReportSettingsPane", "ier/widget/admin/DDContainerSettingsPane"], function (declare, lang, dom_class, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, messages, Config, SettingsPane_html) {
        return declare([BorderContainer, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:SettingsPane_html, gutters:false, desktopId:"", dirty:false, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            if (this.desktopId) {
                this._titleNode.innerHTML = messages.admin_desktop_label + ": <b>" + (this.title || "") + "</b>";
                this._deskNode.style.display = "none";
            } else {
                this._titleNode.style.display = "none";
                this._deskNode.innerHTML = messages.admin_settingsDesc;
                dom_class.add(this._barNode, "ierAdminBarLast");
            }
            this.connect(this._saveAndCloseButton, "onClick", function () {
                this._save(true);
            });
            this.connect(this._saveButton, "onClick", function () {
                this._save(false);
            });
            this.connect(this._resetButton, "onClick", this._reset);
            this.connect(this._closeButton, "onClick", this._close);
        }, startup:function () {
            this.inherited(arguments);
            this._validate(false);
            var name = (this.desktopId ? "desktop" : "settings");
            Config.getConfig(name, this.desktopId || null, lang.hitch(this, function (config) {
                this._config = config;
                this._generalPane.set("config", config);
                this._reportPane.set("config", config);
                this._ddContainerSettingsPane.set("config", config);
                this._reset();
                this.connect(this._generalPane, "onChange", function () {
                    this._validate(true);
                });
                this.connect(this._reportPane, "onChange", function () {
                    this._validate(true);
                });
                this.connect(this._ddContainerSettingsPane, "onChange", function () {
                    this._validate(true);
                });
            }));
        }, _save:function (close) {
            this._generalPane.save();
            this._reportPane.save();
            this._ddContainerSettingsPane.save();
            Config.saveConfig(this._config, lang.hitch(this, function () {
                this._validate(false);
                if (close) {
                    this._close();
                }
            }));
        }, _close:function () {
            var parent = this.getParent();
            if (parent && parent.closeChild) {
                parent.closeChild(this);
            }
        }, _reset:function () {
            this._generalPane.reset();
            this._reportPane.reset();
            this._ddContainerSettingsPane.reset();
            this._validate(false);
        }, _validate:function (dirty) {
            this.dirty = dirty;
            var valid = this._generalPane.valid && this._reportPane.valid && this._ddContainerSettingsPane.valid;
            this._saveButton.set("disabled", !dirty || !valid);
            this._saveAndCloseButton.set("disabled", !dirty || !valid);
            this._resetButton.set("disabled", !dirty);
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "url:ier/widget/admin/templates/ReportSettingsPane.html":"<div class=\"ierAdminContent\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_cognosConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_cognosGatewayServerNameBox\">${_messages.admin_reportCognosGatewayServer}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_reportCognosGatewayServer_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_cognosGatewayServerNameBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_cognosGatewayServerNameBox\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_cognosServletServerNameBox\">${_messages.admin_reportCognosServletDispatchServer}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_reportCognosServletDispathServer_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_cognosServletServerNameBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_cognosServletServerNameBox\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_cognosReportPathBox\">${_messages.admin_reportCognosReportPath}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" data-dojo-attach-point=\"_reportPathHoverHelp\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t  <div id=\"${id}_cognosReportPathBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_cognosReportPathBox\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_cognosReportNamespaceBox\">${_messages.admin_reportCognosNamespace}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_reportCognosNamespace_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_cognosReportNamespaceBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_cognosReportNamespace\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_reportEngineConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_reportEngineDataSourceBox\">${_messages.admin_reportReportEngineDataSource}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_reportReportEngineDataSource_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_reportEngineDataSourceBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_reportEngineDataSourceBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/ScheduleReportWizardDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/BaseAccordionWizardDialog", "ier/widget/panes/ReportEntryFormPane", "ier/widget/panes/ReportListingPane", "ier/widget/panes/AsyncTaskSchedulerPane", "ier/widget/panes/AddItemPane", "ier/widget/dialog/IERBaseDialogPane"], function (dojo_declare, dojo_lang, dojo_construct, dojo_style, ecm_model_Desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_dialog_BaseAccordionWizardDialog, ier_widget_ReportEntryFormPane, ier_widget_ReportListingPane, ier_widget_AsyncTaskSchedulerPane, ier_widget_AddItemPane, ier_dialog_IERBaseDialogPane) {
        return dojo_declare("ier.widget.dialog.ScheduleReportWizardDialog", [ier_dialog_BaseAccordionWizardDialog], {finishButtonLabel:ier_messages.scheduleReportDialog_scheduleReport, reportData:null, postCreate:function () {
            this.inherited(arguments);
            this.set("title", ier_messages.taskPane_scheduleReport);
            this.setResizable(true);
            if (!this.reportData) {
                this.reportListingPane = new ier_widget_ReportListingPane();
                this.addChildPane(this.reportListingPane);
                this.reportEntryFormPane = new ier_widget_ReportEntryFormPane({disabled:true});
                this.addChildPane(this.reportEntryFormPane);
                this.connect(this.reportEntryFormPane, "onInputChange", function () {
                    if (this.reportEntryFormPane.validate()) {
                        this.enablePane(this.taskSchedulerPane);
                        this.taskSchedulerPane.createRendering(this.reportEntryFormPane.repository);
                    } else {
                        this.disablePane(this.taskSchedulerPane);
                    }
                    this.updateButtonsState();
                });
            }
            this.taskSchedulerPane = new ier_widget_AsyncTaskSchedulerPane({disabled:true, showLoginInformation:true, title:ier_messages.scheduleReportDialog_setScheduleForReport});
            this.addChildPane(this.taskSchedulerPane);
            this.taskSchedulerPane.asyncTaskSchedulerPane.enableRecurrenceRadioButton.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalNumberSpinner.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalSelect.set("disabled", true);
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceRow, "display", "none");
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceIntervalRow, "display", "none");
            if (this.taskSchedulerPane.asyncTaskSchedulerPane.usernameHoverHelp) {
                dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.usernameHoverHelp.domNode, "display", "none");
            }
            if (this.taskSchedulerPane.asyncTaskSchedulerPane.passwordHoverHelp) {
                dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.passwordHoverHelp.domNode, "display", "none");
            }
            this.addItemPane = new ier_widget_AddItemPane({disabled:true, title:ier_messages.scheduleReportDialog_saveReport});
            this.addChildPane(this.addItemPane);
            this.connect(this.taskSchedulerPane, "onInputChange", function () {
                if (this.taskSchedulerPane.validate()) {
                    this.enablePane(this.addItemPane);
                } else {
                    this.disablePane(this.addItemPane);
                }
                this.updateButtonsState();
            });
            this.startup();
        }, show:function () {
            this.inherited("show", []);
            if (!this.reportData) {
                this.reportListingPane.createRendering();
                this.connect(this.reportListingPane, "onItemSelected", function (reportDefinition) {
                    this.reportEntryFormPane.createRendering(this.reportListingPane.getRepository(), reportDefinition);
                    this.addItemPane.clearValues();
                    this.selectNextPane();
                });
            } else {
                this.enablePane(this.taskSchedulerPane);
                this.taskSchedulerPane.createRendering(this.reportData.repository);
            }
        }, onPaneSelected:function (pane) {
            if (this.getCurrentPane() == this.addItemPane) {
                this._createAddItemPane();
            }
        }, onNextButtonClicked:function () {
            if (this.getCurrentPane() == this.addItemPane) {
                this._createAddItemPane();
            }
        }, _createAddItemPane:function () {
            var repository = this.reportData && this.reportData.repository ? this.reportData.repository : this.reportEntryFormPane.repository;
            this.addItemPane.createRendering(repository, repository.reportOutputSaveDirectory);
            var reportDefinition = this.reportData && this.reportData.reportDefinition ? this.reportData.reportDefinition : this.reportEntryFormPane.reportDefinition;
            this.reportTitle = reportDefinition.name + " - " + this.taskSchedulerPane.getAsyncTaskName();
            this.reportTitle = this.reportTitle.substring(0, 255);
            this.addItemPane.setDocumentTitle(this.reportTitle);
        }, onFinishButtonClicked:function () {
            if (!this.reportData) {
                this.reportData = {repository:this.reportEntryFormPane.repository, reportCriteria:this.reportEntryFormPane.getPropertiesJSON(), reportDefinition:this.reportEntryFormPane.reportDefinition};
            }
            var repository = this.reportData.repository;
            var schedule = this.taskSchedulerPane.get("schedule");
            var reportCriteria = this.reportData.reportCriteria;
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                this.onFinish(response);
                ecm_model_Desktop.taskManager.onAsyncTaskItemAdded(response);
                this.onCancel();
            }));
            var data = new Object();
            params["requestParams"][ier_constants.Param_IsRecurring] = schedule.recurring;
            params["requestParams"][ier_constants.Param_RepeatCycle] = schedule.interval;
            params["requestParams"][ier_constants.Param_StartTime] = schedule.startTime;
            params["requestParams"][ier_constants.Param_EndTime] = schedule.endTime;
            params["requestParams"][ier_constants.Param_Description2] = schedule.description;
            params["requestParams"][ier_constants.Param_Name2] = schedule.name;
            data[ier_constants.Param_UserId] = schedule.username;
            data[ier_constants.Param_Password] = schedule.password;
            data[ier_constants.Param_EmailAddress] = schedule.email;
            params["requestParams"][ier_constants.Param_ReportId] = this.reportData.reportDefinition.id;
            params["requestParams"][ier_constants.Param_ReportName] = this.reportData.reportDefinition.name;
            params["requestParams"][ier_constants.Param_RepositoryId] = repository.id;
            params["requestParams"][ier_constants.Param_P8RepositoryId] = repository.objectStoreName;
            params["requestParams"][ier_constants.Param_ServerName] = repository.serverName;
            params["requestParams"][ier_constants.Param_TableName] = this.reportData.reportDefinition.tableName;
            var savedInFolder = this.addItemPane.getSavedInFolder();
            params["requestParams"][ier_constants.Param_SaveInFolderLocation] = savedInFolder.item.id;
            params["requestParams"][ier_constants.Param_SaveInFolderLocationName] = savedInFolder.item.name;
            params["requestParams"][ier_constants.Param_SaveInRepository] = savedInFolder.item.repository.id;
            params["requestParams"][ier_constants.Param_RootDownloadLinkURL] = this.addItemPane.getRootDownloadLinkURL();
            params["requestParams"][ier_constants.Param_ReportTitle] = this.addItemPane.getDocumentTitle() || this.reportTitle;
            params["requestParams"][ier_constants.Param_ClassName] = this.addItemPane.getClassName();
            data[ier_constants.Param_Properties] = reportCriteria;
            data[ier_constants.Param_ArchiveProperties] = this.addItemPane.getProperties();
            data[ier_constants.Param_Permissions] = this.addItemPane.getPermissions();
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_ScheduleReportService, ier_constants.PostEncoding, params);
        }, onFinish:function (response) {
        }});
    });
}, "ier/widget/panes/EntityItemGeneralPane":function () {
    define(["dojo/_base/declare", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemGeneralPane.html", "ecm/widget/_FolderSelectorDropDown"], function (dojo_declare, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemGeneralPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _parentFolder:null, _saveInFolder:null, postCreate:function () {
            this.inherited(arguments);
        }, createRendering:function (repository, parentFolder) {
            this.repository = repository;
            this._parentFolder = parentFolder;
            if (parentFolder) {
                this._folderSelectorDropDown.setRoot(parentFolder);
                this._folderSelectorDropDown.setDisabled(true);
            }
            this.connect(this._folderSelectorDropDown, "onFolderSelected", function (folder) {
                this._saveInFolder = folder;
                this._folderSelectorDropDown.setDisabled(true);
            });
        }, isValidationRequired:function () {
            return false;
        }, getSavedInFolder:function () {
            return this._saveInFolder;
        }});
    });
}, "ier/model/DefensibleDisposalSchedule":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject", "ier/messages"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject, ier_messages) {
        var DefensibleDisposalSchedule = dojo_declare("ier.model.DefensibleDisposalSchedule", [ier_model_BaseEntityObject], {retentionTriggerPropertyName:null, retentionPeriod:null, constructor:function (arguments) {
            if (!arguments.id && !arguments.name) {
                this.id = "defensibleDisposalSchedule_" + new Date().getTime();
                this.name = this.retentionTriggerPropertyName;
            }
        }, getRMRetentionPeriod:function (type) {
            if (this.retentionPeriod) {
                var splitDates = this.retentionPeriod.split("-");
                if (splitDates.length == 3) {
                    if (type == "years") {
                        return parseInt(splitDates[0], 10);
                    } else {
                        if (type == "months") {
                            return parseInt(splitDates[1], 10);
                        } else {
                            if (type == "days") {
                                return parseInt(splitDates[2], 10);
                            } else {
                                if (type == "display") {
                                    return parseInt(splitDates[0], 10) + " " + ier_messages.dispositionPane_years + " - " + parseInt(splitDates[1], 10) + " " + ier_messages.dispositionPane_months + " - " + parseInt(splitDates[2], 10) + " " + ier_messages.dispositionPane_days;
                                } else {
                                    return this.retentionPeriod;
                                }
                            }
                        }
                    }
                }
            }
            return null;
        }, getRMRetentionTriggerPropertyName:function () {
            return this.retentionTriggerPropertyName;
        }});
        ier_model_BaseEntityObject.registerClass("DefensibleDisposalSchedule", DefensibleDisposalSchedule);
        return DefensibleDisposalSchedule;
    });
}, "url:ier/widget/panes/templates/AsyncTaskSchedulerPane.html":"<div class=\"taskSchedulerPane\">\r\n</div>", "url:ier/widget/admin/templates/DisplayPropertyDialogContent.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" data-dojo-props=\"gutters: false\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">\r\n\t\t<table role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>${_messages.baseDialog_class}</label></td>\r\n\t\t\t\t<td><div data-dojo-type=\"ecm/widget/ContentClassSelector\" data-dojo-attach-point=\"_classSelector\"\r\n\t\t\t\t\t\tdata-dojo-props=\"selectorStyle: 'dropdown', onlySelectable: true, defaultToFirstItem: false\"></div></td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t\t<div class=\"ierAdminSloshBucketFilterBar\">\r\n\t\t\t<label for=\"${id}_filterBox\" style=\"display: none;\">${_messages.admin_filter}</label>\r\n\t\t\t<div data-dojo-type=\"ecm/widget/FilterTextBox\" data-dojo-attach-point=\"_filterBox\"\r\n\t\t\t\tdata-dojo-props=\"intermediateChanges: true\" placeholder=\"${_messages.admin_filter}\" id=\"${id}_filterBox\" style=\"float: none;\"></div>\r\n\t\t\t<div class=\"ierAdminSloshBucketToolbar\">\r\n\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreButton\">${_messages.admin_restoreDefaults}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm/widget/SloshBucket\" data-dojo-attach-point=\"_propertySelector\" data-dojo-props=\"region: 'center'\" class=\"ierAdminPropertySelector\"></div>\r\n</div>\r\n", "ier/constants":function () {
    define("ier/constants", ["dojo/_base/declare"], function (dojo_declare) {
        var _Constants = dojo_declare("ier._Constants", null, {ApplicationPlugin:"IERApplicationPlugin", IERDesktop:"IERDesktop", IER_RootHelpLink:"http://publib.boulder.ibm.com/infocenter/p8docs/v5r1m0", PostEncoding:"application/x-www.form-urlencoded", NexusAdminClientId:"ecmClientAdmin", DispositionEventType:"ierDispositionTriggerEventType", IER_COGNOS_REPORT_URL:"${0}?b_action=cognosViewer&ui.action=run&run.prompt=false&ui.object=${1}/" + "package[@name='${2} package']/report[@name='${2}']&p_rpt_job_id=${3}&cv.header=false&ui=h1h2h3", HelpContextUrl:"/com.ibm.ier.help.doc/", DEFAULT_COGNOS_REPORT_PATH:"/content/folder[@name='IERReport']", Action_AddAction:"IERAddDispositionAction", Action_AddFilePlan:"IERAddFilePlan", Action_AddHold:"IERAddHold", Action_AddLocation:"IERAddLocation", Action_AddRecordType:"IERAddRecordType", Action_AddTransferMapping:"IERAddTransferMapping", Action_AddEventTrigger:"IERAddEventTrigger", Action_AddNamingPattern:"IERAddNamingPattern", Action_AddRecordCategory:"IERAddRecordCategory", Action_AddRecordFolder:"IERAddRecordFolder", Action_AddRecordVolume:"IERAddRecordVolume", Action_Properties:"IERProperties", Action_Refresh:"IERRefresh", Action_AddDispositionSchedule:"IERAddDispositionSchedule", Action_RunReport:"IERRunReport", Action_AddReportDefinition:"IERAddReportDefinition", Action_Delete:"IERDelete", Action_ScheduleReport:"IERScheduleReport", Action_ScheduleDispositionSweep:"IERScheduleDispositionSweep", Action_ScheduleHoldSweep:"IERScheduleHoldSweep", Action_ScheduleDDContainerConversion:"IERScheduleConversionToDDContainers", ActionType_Review:"1", ActionType_Export:"2", ActionType_Transfer:"3", ActionType_Destroy:"4", ActionType_InterimTransfer:"5", ActionType_Cutoff:"6", ActionType_VitalReview:"7", ActionType_AutoDestroy:"8", Attribute_RepositoryType:"ierRepositoryType", Attribute_Status:"status", Attribute_Type:"type", ClassName_Container:"RMFolder", ClassName_CustomObject:"CustomObject", ClassName_DispositionAction:"Action1", ClassName_DispositionSchedule:"DisposalSchedule", ClassName_DispositionTrigger:"DisposalTrigger", ClassName_Document:"Document", ClassName_ElectronicRecordFolder:"ElectronicRecordFolder", ClassName_ElectronicRecord:"ElectronicRecordInfo", ClassName_Location:"Location", ClassName_PhysicalRecord:"Markers", ClassName_Email:"Email", ClassName_EmailRecord:"EmailRecordInfo", ClassName_FilePlan:"ClassificationScheme", ClassName_HybridRecordFolder:"HybridRecordFolder", ClassName_Link:"Relation", ClassName_NamingPattern:"Pattern", ClassName_PhysicalRecordFolder:"PhysicalRecordFolder", ClassName_PhysicalContainer:"Box", ClassName_Record:"RecordInfo", ClassName_ReportDefinition:"RMReportDefinition", ClassName_RecordType:"RecordType", ClassName_RecordCategory:"RecordCategory", ClassName_RecordsManagementFolder:"ClassificationSchemes", ClassName_ReportHold:"ReportHoldings", ClassName_TransferMapping:"RMTransferMapping", ClassName_Transcript:"Transcript", ClassName_SystemConfiguration:"SystemConfiguration", ClassName_Volume:"Volume", ClassName_Hold:"RecordHold", ClassName_RecordFolder:"RecordFolder", ClassName_WorkflowDefinition:"WorkflowDefinition", DataType_Group:"xs:group", DataType_User:"xs:user", DataType_String:"xs:string", DataType_DateTime:"xs:timestamp", DataType_Cardinality_LIST:"LIST", DataType_Object:"xs:object", EntityType_ElectronicRecord:"301", EntityType_ElectronicRecordFolder:"105", EntityType_EmailRecord:"302", EntityType_DispositionAction:"200", EntityType_DispositionSchedule:"201", EntityType_DispositionTrigger:"203", EntityType_FilePlan:"100", EntityType_Hold:"216", EntityType_HybridRecordFolder:"108", EntityType_Link:"400", EntityType_Location:"215", EntityType_NamingPattern:"205", EntityType_PDFRecord:"305", EntityType_PhysicalContainer:"106", EntityType_PhysicalRecord:"303", EntityType_PhysicalRecordFolder:"110", EntityType_Record:"300", EntityType_RecordCategory:"101", EntityType_RecordFolder:"102", EntityType_RecordType:"214", EntityType_ReportDefinition:"207", EntityType_TransferMapping:"804", EntityType_Volume:"103", EntityType_Container:"1100", EntityType_ContainerAndRecord:"3001100", EventType_PredefinedDateTrigger:"1", EventType_ExternalEventTrigger:"2", EventType_InternalEventTrigger:"3", EventType_RecurringEventTrigger:"4", Feature_IERConfigure:"IERConfigure", Feature_IERBrowseFilePlan:"IERBrowseFilePlan", Feature_IERSearch:"IERSearch", Feature_IERFavorites:"IERFavorites", Feature_IERReports:"IERReports", Feature_IERAdmin:"IERAdmin", Feature_IERTasks:"IERTasks", FeaturePane_IERBrowseFilePlan:"IERBrowseFilePlan_popup", Id_RecordsManagementFolder:"{56EA3C34-4084-4709-BBE6-A1B9E35C3E7B}", Id_FilePlanFolder:"{7F29139B-04E0-442F-9B85-C71EA4988375}", Id_RootFolder:"{0F1E2D3C-4B5A-6978-8796-A5B4C3D2E1F0}", Id_ActionTypeChoiceList:"{56C6D10C-05FB-4CBD-9872-55B3F5DAFC2E}", Id_ReviewDecisionChoiceList:"{22F5F075-51D2-4D44-9235-05037611821F}", DocId_FilePlanFolder:"ClassificationScheme,null,{7F29139B-04E0-442F-9B85-C71EA4988375}", Id_ReportDefintionFolder:"{5E8189C9-C2E7-43BB-B5AF-EB5E69CAA543}", Mimetype_ElectronicRecord:"application/x-filenet-rm-electronicrecord", Mimetype_EmailRecord:"application/x-filenet-rm-emailrecord", Mimetype_PhysicalRecord:"application/x-filenet-rm-physicalrecord", Mimetype_ExternalDocument:"application/x-filenet-external", MenuType_ContentListToolbar:"ContentListToolbar", MenuType_IERFilePlanContextMenu:"IERFilePlanContextMenuType", MenuType_IERFilePlanConfigureContextMenu:"IERFilePlanConfigureContextMenuType", MenuType_IERRecordCategoryContextMenu:"IERRecordCategoryContextMenuType", MenuType_IERPhysicalBoxHybridRecordFolderContextMenu:"IERPhysicalBoxHybridRecordFolderContextMenuType", MenuType_IERElectronicRecordFolderContextMenu:"IERElectronicRecordFolderContextMenuType", MenuType_IERVolumeContextMenu:"IERVolumeContextMenuType", MenuType_IERPhysicalRecordContextMenu:"IERPhysicalRecordContextMenuType", MenuType_IERElectronicRecordContextMenu:"IERElectronicRecordContextMenuType", MenuType_IERMultipleContainerAndRecordContextMenu:"IERMultipleContainerAndRecordContextMenuType", MenuType_IERMultipleContainerContextMenu:"IERMultipleContainerContextMenuType", MenuType_IERMultipleRecordContextMenu:"IERMultipleRecordContextMenuType", MenuType_IERCustomObjectsContextMenu:"IERCustomObjectContextMenuType", MenuType_IERPropertiesOnlyCustomObjectsContextMenu:"IERPropertiesOnlyCustomObjectContextMenuType", MenuType_IERMultipleCustomObjectsContextMenu:"IERMultipleCustomObjectsContextMenuType", MenuType_IERPlaceOnHoldContextMenu:"IERPlaceOnHoldContextMenuType", MenuType_IERRemoveHoldContextMenu:"IERRemoveHoldContextMenuType", MenuType_IERConfigureFlyoutToolbarMenu:"IERConfigureFlyoutToolbarMenuType", MenuType_IERActionsConfigureToolbarMenu:"IERActionsConfigureToolbarMenuType", MenuType_IERDispositionSchedulesConfigureToolbarMenu:"IERDispositionSchedulesConfigureToolbarMenuType", MenuType_IERFilePlansConfigureToolbarMenu:"IERFilePlansConfigureToolbarMenuType", MenuType_IERHoldsConfigureToolbarMenu:"IERHoldsConfigureToolbarMenuType", MenuType_IERHoldsConfigureContextMenu:"IERHoldsConfigureContextMenuType", MenuType_IERLocationsConfigureToolbarMenu:"IERLocationsConfigureToolbarMenuType", MenuType_IERRecordTypesConfigureToolbarMenu:"IERRecordTypesConfigureToolbarMenuType", MenuType_IERReportDefinitionsConfigureToolbarMenu:"IERReportDefinitionsConfigureToolbarMenuType", MenuType_IERReportDefinitionsConfigureContextMenu:"IERReportDefinitionsConfigureContextMenuType", MenuType_IERTriggersConfigureToolbarMenu:"IERTriggersConfigureToolbarMenuType", MenuType_IERTranferMappingsConfigureToolbarMenu:"IERTransferMappingsConfigureToolbarMenuType", MenuType_IERNamingPatternsConfigureToolbarMenu:"IERNamingPatternsConfigureToolbarMenuType", MenuType_IERReportResultsContextMenu:"IERReportResultActionMenuType", MenuType_IERViewEntitiesOnHoldContextMenu:"IERViewEntitiesOnHoldContextMenuType", MenuType_IERReportsCompletedTaskContextMenu:"IERReportsCompletedTaskContextMenuType", MenuType_IERCompletedTaskContextMenu:"IERCompletedTaskContextMenuType", MenuType_IERFailedTaskContextMenu:"IERFailedTaskContextMenuType", MenuType_IERFailedRecurringTaskContextMenu:"IERFailedRecurringTaskContextMenuType", MenuType_IERScheduledTaskContextMenu:"IERScheduledTaskContextMenuType", MenuType_IERScheduledRecurringTaskContextMenu:"IERScheduledRecurringTaskContextMenuType", MenuType_IERDisabledRecurringTaskContextMenu:"IERDisabledRecurringTaskContextMenuType", MenuType_IERInProgressTaskContextMenu:"IERInProgressTaskContextMenuType", MenuType_IERInProgressTaskInstanceContextMenu:"IERInProgressTaskInstanceContextMenuType", MenuType_IERScheduledTaskInstanceContextMenu:"IERScheduledTaskInstanceContextMenuType", MenuType_IERFailedTaskInstanceContextMenu:"IERFailedTaskInstanceContextMenuType", MenuType_IERReportsCompletedTaskInstanceContextMenu:"IERReportsCompletedTaskInstanceContextMenuType", MenuType_IERCompletedTaskInstanceContextMenu:"IERCompletedTaskInstanceContextMenuType", MenuType_IERCompletedRecurringTaskContextMenu:"IERCompletedRecurringTaskContextMenuType", MenuType_IERFavoriteRecordCategoryContextMenu:"IERFavoriteRecordCategoryContextMenuType", MenuType_IERFavoriteElectronicRecordFolderContextMenu:"IERFavoriteElectronicRecordFolderContextMenuType", MenuType_IERFavoritePhysicalRecordFolderContextMenu:"IERFavoritePhysicalRecordFolderContextMenuType", MenuType_IERFavoriteVolumeContextMenu:"IERFavoriteVolumeContextMenuType", MenuType_IERFavoriteElectronicRecordContextMenu:"IERFavoriteElectronicRecordContextMenuType", MenuType_IERFavoritePhysicalRecordContextMenu:"IERFavoritePhysicalRecordContextMenuType", MenuType_IERSearchElectronicRecordContextMenu:"IERSearchElectronicRecordContextMenuType", MenuType_IERSearchPhysicalRecordContextMenu:"IERSearchPhysicalRecordContextMenuType", MenuType_IERBrowseFilePlanToolbarMenu:"IERBrowseFilePlanToolbarMenuType", MenuType_IERMultipleTasksContextMenu:"IERMultipleTasksContextMenuType", MenuType_IERHoldConditionContainerContextMenu:"IERHoldConditionContainerContextMenuType", MenuType_IERHoldConditionRecordContextMenu:"IERHoldConditionRecordContextMenuType", Param_ArchiveProperties:"archive_criterias", Param_CE_EJB_URL:"ceEJBURL", Param_ClassName:"ier_className", Param_Conditions:"ier_conditions", Param_ContainerId:"ier_containerid", Param_ContainerName:"containerName", Param_ContinuationData:"continuationData", Param_DatamodelType:"datamodelType", Param_Desktop:"desktop", Param_Description:"template_desc", Param_Description2:"description", Param_DestinationContainer:"ier_destinationContainer", Param_DispositionScheduleId:"ier_dispositionScheduleId", Param_DispositionAggregationType:"ier_aggregationType", Param_DispositionCutoffAction:"ier_dispositionCutoffAction", Param_DispositionEventOffset:"ier_dispositionEventOffset", Param_DispositionEventCutoffBase:"ier_dispositionEventCutoffBase", Param_DocId:"ier_docId", Param_Dynamic_Hold_Task:"ier_dynamic_hold_task", Param_EmailAddress:"emailAddress", Param_EndTime:"endTime", Param_EntityId:"ier_entityId", Param_EntityType:"ier_entityType", Param_Entities:"entities", Param_EventType:"ier_eventType", Param_FilterString:"ier_filterString", Param_Id:"ier_id", Param_FilePlanId:"ier_fileplanId", Param_FilePlanRepositoryId:"ier_fileplanRepositoryId", Param_FilePlanRepositoryNexusId:"ier_fileplanRepositoryNexusId", Param_FilePlanRepositoryFolderLocation:"ier_fileplanRepositoryFolderLocation", Param_HoldId:"ier_holdId", Param_Holdables:"ier_holdables", Param_Holds:"ier_holds", Param_IsRecurring:"isRecurring", Param_Label:"template_name", Param_LinkClass:"ier_linkClass", Param_LinkReason:"ier_linkReasonForExtract", Param_LinkedRecordId:"ier_linkedRecordId", Param_LocationId:"ier_locationId", Param_Name:"template_name", Param_Name2:"name", Param_NameFilter:"nameFilter", Param_NumberOfDocuments:"ier_ndocs", Param_OrderBy:"ier_orderBy", Param_OrderByDescending:"order_descending", Param_QuickSearchMoreType:"ier_quickSearchMoreType", Param_QuickSearchQueryString:"ier_quickSearchQueryString", Param_QuickSearchStartingPoint:"ier_quickSearchStartingPoint", Param_Parent:"parent", Param_PluginConfiguration:"ierPluginConfiguration", Param_P8RepositoryId:"ier_p8RepositoryId", Param_P8RepositoryGuid:"p8RepositoryGuid", Param_RecordId:"ier_recordId", Param_RepeatCycle:"repeatCycle", Param_ReportDefinitionProperties:"ier_reportdefintionProperties", Param_ReportId:"ier_reportid", Param_ReportName:"ier_reportName", Param_ReportTitle:"ier_reportTitle", Param_ReportResultsId:"ier_reportResultsId", Param_ReportResultsIds:"ier_reportResultsIds", Param_RepositoryId:"repositoryId", Param_Repository:"repository", Param_ParameterList:"parameterList", Param_ParentFolderId:"ier_parentFolderId", Param_ParentClassName:"parentClassName", Param_Password:"password", Param_PatternId:"ier_patternId", Param_PatternLevels:"ier_patternLevels", Param_PatternString:"ier_patternString", Param_Permissions:"ier_permissions", Param_Properties:"criterias", Param_PropertyName:"ier_propertyName", Param_ReasonForClose:"ier_reasonforclose", Param_ReasonForMove:"ier_reasonformove", Param_ReasonForRelocate:"ier_reasonforrelocate", Param_RecordClass:"ier_recordClass", Param_RepositoryIds:"ier_repositoryIds", Param_RetentionTriggerPropertyName:"retentionTriggerPropertyName", Param_RetentionPeriod:"retentionPeriod", Param_RetentionPeriodYears:"retentionPeriodYears", Param_RetentionPeriodMonths:"retentionPeriodMonths", Param_RetentionPeriodDays:"retentionPeriodDays", Param_RootDownloadLinkURL:"rootDownloadLinkURL", Param_SaveInFolderLocation:"ier_saveInFolderLocation", Param_SaveInFolderLocationName:"ier_saveInFolderLocationName", Param_SaveInRepository:"ier_saveInRepository", Param_SchedulePropagationLevel:"schedulePropagationLevel", Param_SecurityParentItemId:"ier_securityParentItemId", Param_ServerName:"serverName", Param_ShowAdditionalColumns:"ier_showAdditionalColumns", Param_SortBy:"sortBy", Param_SourceContainer:"ier_sourceContainer", Param_StartTime:"startTime", Param_SQL:"ier_sql", Param_SystemConfigurations:"ier_systemConfigurations", Param_TableName:"ier_tableName", Param_TableNames:"ier_tableNames", Param_TaskType:"taskType", Param_TaskStatus:"taskStatus", Param_TemplateName:"template_name", Param_Type:"type", Param_UserId:"userId", Param_StartDate:"startDate", Param_EndDate:"endDate", Param_FilterField:"filterField", param_FilterActionType:"filterActionType", param_FilterStatus:"filterStatus", Privilege_FileInFolder:"privFileInFolder", Privilege_CanDeclareRecordToContainer:"privCanDeclareRecordToContainer", Privilege_CanMoveRecordToContainer:"privCanMoveRecordToContainer", Privilege_AddRecordCategory:"privIERAddRecordCategory", Privilege_AddRecordFolder:"privIERAddRecordFolder", Privilege_TaskUser:"privTaskUserPermission", Privilege_TaskAdmin:"privTaskAdminPermission", Property_ActionName:"ActionName", Property_ActionType:"ActionType", Property_Active:"Active", Property_Aggregation:"AGGREGATION", Property_Alias:"Alias", Property_AllowedRMContainees:"AllowedRMContainees", Property_AllowedRMTypes:"AllowedRMTypes", Property_AlternateRetentions:"AlternateRetentions", Property_ApplicationName:"ApplicationName", Property_ApplyToNameOrId:"ApplyToNameOrId", Property_AssociatedRecordType:"AssociatedRecordType", Property_AssociatedWorkflow:"DefaultWorkflow", Property_Barcode:"BarcodeID", Property_CC:"CarbonCopy", Property_ChargeOutStatus:"ChargeOutStatus", Property_ChargeOutTo:"ChargeOutTo", Property_ConditionXML:"ConditionXML", Property_ContentElementPresent:"ContentElementsPresent", Property_CreateDate:"DateCreated", Property_CurrentPhaseAction:"CurrentPhaseAction", Property_CurrentPhaseDecisionDate:"CurrentPhaseDecisionDate", Property_CurrentPhaseReviewDecision:"CurrentPhaseReviewDecision", Property_CurrentPhaseExecutionDate:"CurrentPhaseExecutionDate", Property_CutoffDate:"CutoffDate", Property_CycleYears:"CycleYears", Property_CycleMonths:"CycleMonths", Property_CycleDays:"CycleDays", Property_DateClosed:"DateClosed", Property_DateLastModified:"DateLastModified", Property_DateOpened:"DateOpened", Property_DateTime:"DateTime", Property_Description:"Description", Property_DispositionSchedule:"DisposalSchedule", Property_DispositionScheduleName:"DisposalScheduleName", Property_DispositionTriggerName:"DisposalTriggerName", Property_DisposalScheduleInheritedFrom:"DisposalScheduleInheritedFrom", Property_DispositonAuthority:"AuthorisingStatute", Property_DocumentTitle:"DocumentTitle", Property_ExternalEventOccurenceDate:"ExternalEventOccurrenceDate", Property_EventType:"EventType", Property_FilePlanName:"ClassificationSchemeName", Property_FolderName:"FolderName", Property_Frequency:"ierFrequency", Property_From:"From", Property_HoldName:"HoldName", Property_HoldReason:"HoldReason", Property_HoldType:"HoldType", Property_IsDynamicHold:"IsDynamicHold", Property_Holds:"Holds", Property_HomeLocation:"HomeLocation", Property_IsDeleted:"IsDeleted", Property_Inactive:"Inactive", Property_IsVitalRecord:"IsVitalRecord", Property_LastModifier:"LastModifier", Property_LastSweepDate:"LastSweepDate", Property_SweepState:"SweepState", Property_LinkName:"LinkName", Property_Location:"Location", Property_LocationName:"LocationName", Property_MethodofDestruction:"MethodofDestruction", Property_NamingPattern:"Pattern", Property_PatternName:"PatternName", Property_PermanentRecordIndicator:"IsPermanentRecord", Property_PreventRMEntityDeletion:"PreventRMEntityDeletion", Property_ReasonForClose:"ReasonForClose", Property_ReasonForExtract:"Reason", Property_ReasonForReclassification:"ReasonForReclassification", Property_ReceivedOn:"ReceivedOn", Property_RecordPattern:"RecordPattern", Property_RecordPatternIncrementedBy:"IncrementedBy", Property_RecordCategoryIdentifier:"RecordCategoryIdentifier", Property_RecordCategoryName:"RecordCategoryName", Property_RecordFolderIdentifier:"RecordFolderIdentifier", Property_RecordFolderName:"RecordFolderName", Property_RecordedDocuments:"RecordedDocuments", Property_RecordInformation:"RecordInformation", Property_RMReportTitle:"RMReportTitle", Property_ReportName:"ReportName", Property_RetainMetadata:"RetainMetadata", Property_Reviewer:"Reviewer", Property_RMEntityDescription:"RMEntityDescription", Property_RMRetentionTriggerPropertyName:"RMRetentionTriggerPropertyName", Property_RMRetentionPeriod:"RMRetentionPeriod", Property_RMExternallyManagedBy:"RMExternallyManagedBy", Property_SentOn:"SentOn", Property_Subject:"EmailSubject", Property_SupersededBy:"SupercedingRecords", Property_Supersedes:"SupercededBy", Property_To:"To", Property_TransferOrAccessionToNARAIndicator:"TransferOrAccessionToNARAIndicator", Property_VitalRecordDeclareDate:"VitalRecordDeclareDate", Property_VitalRecordDescription:"VitalRecordDescription", Property_VitalRecordDisposalTrigger:"VitalRecordDisposalTrigger", Property_VitalRecordNextReviewDate:"VitalRecordNextReviewDate", Property_VitalRecordReviewAction:"VitalRecordReviewAction", Property_VolumeName:"VolumeName", RepositoryType_Plain:"Plain", RepositoryType_Content:"Content", RepositoryType_FilePlan:"FilePlan", RepositoryType_Combined:"Combined", DispositionMode_SimpleRetention:"DispositionMode_SimpleRetention", DispositionMode_AdvancedRetention:"DispositionMode_AdvancedRetention", ReportEntry_fileplan_browse:"fileplan_browse", ReportEntry_disposal_schedule:"disposal_schedule", ReportEntry_hold_name:"hold_name", ReportEntry_rm_entity_type:"rm_entity_type", ReportEntry_disposal_action_export:"disposal_action_export", ReportEntry_disposal_action:"disposal_action", ReportEntry_user_name:"user_name", ReportEntry_report_type:"report_type", ReportEntry_ros_name:"ros_name", ReportEntry_ros_browse:"ros_browse", ReportEntry_action:"action", ReportEntry_review_decision:"review_decision", ReportEntry_application_type:"application_type", ReportEntry_fileplan_name:"fileplan_name", ReportEntry_DateTime_MaxValue:"9999-12-31", ReportEntry_DateTime_MinValue:"1752-12-31", ReportEntry_DateTime_Format:"M/d/yyyy", ReportEntry_Settability:"readWrite", ReportEntry_Param_StringType:"String", ReportEntry_Param_DateTimeType:"DateTime", ReportWindowNamePrefix:"ReportViewer", ReportDefinitionCopy:"Copy of ", Search_application:"IER", Search_Document:"document", Search_Folder:"folder", Search_default_cbrPageSize:"50", Search_CBRType_Verity:"1", Search_CBRType_Cascade:"2", Search_CBR_Dynamic_Switching:"1", Search_CBR_QueryRankOverride_Required:"2", Service_CreateFilePlan:"ierCreateFilePlanService", Service_CloseRecordContainer:"ierCloseRecordContainerService", Service_CreateSimpleDispositionSchedule:"ierCreateSimpleDispositionScheduleService", Service_CreateRecordCategory:"ierCreateRecordCategoryService", Service_CreateRecordFolder:"ierCreateRecordFolderService", Service_CreateRecordVolume:"ierCreateRecordVolumeService", Service_EditFilePlan:"ierEditFilePlanService", Service_EditRecordContainer:"ierEditRecordContainerService", Service_CreateAction:"ierCreateActionService", Service_CreateTrigger:"ierCreateTriggerService", Service_Declare:"ierDeclareRecordService", Service_FileRecord:"ierFileRecordService", Service_GetChoiceList:"ierGetChoiceListService", Service_GetConditionResults:"ierGetConditionResults", Service_GetObjects:"ierGetObjectsService", Service_GetDispositionSchedules:"ierGetDispositionSchedules", Service_GetEntityNameFromNamingPattern:"ierGetEntityNameFromNamingPattern", Service_GetFilePlans:"ierGetFilePlans", Service_GetFilePlanRepositoriesFromDesktop:"ierGetFilePlanRepositoriesFromDesktop", Service_GetObjectConditions:"ierGetObjectConditions", Service_GetNamingPatternLevels:"ierGetNamingPatternLevels", Service_GetQuickSearchResults:"ierGetQuickSearchResults", Service_GetReportDefintions:"ierGetReportDefinitions", Service_GetRecordEntryTemplates:"ierGetRecordEntryTemplates", Service_GetRepositoryAttributes:"ierGetRepositoryAttributes", Service_MoveRecord:"ierMoveRecordService", Service_EditRecord:"ierEditRecordService", Service_OpenRecordEntryTemplate:"ierOpenRecordEntryTemplate", Service_ReopenRecordContainer:"ierReopenRecordContainerService", Service_SaveHold:"ierSaveHoldService", Service_SaveLocation:"ierSaveLocationService", Service_SaveNamingPattern:"ierSaveNamingPatternService", Service_SaveSystemConfigurations:"ierSaveSystemConfigurationsService", Service_ScheduleReportService:"ierScheduleReportService", Service_Delete:"ierDeleteService", Service_Relocate:"ierRelocateRecordContainerService", Service_ReRunReport:"ierReRunReport", Service_RunReport:"ierRunReport", Service_PlaceOnHold:"ierPlaceOnHoldService", Service_RemoveHold:"ierRemoveHoldService", Service_GetEntitiesOnHold:"ierGetEntitiesOnHoldService", Service_CopyRecord:"ierCopyRecordService", Service_Copy:"ierCopyService", Service_LinkRecord:"ierLinkRecordService", Service_GetAndSavePluginConfiguration:"ierGetAndSavePluginConfiguration", Service_Undeclare:"ierUndeclareService", Service_GetDocumentInfo:"ierGetDocumentInfoService", Service_DynamicHoldRequstService:"ierDynamicHoldRequestService", Service_GetHistory:"ierGetHistoryService", Service_GetReportResult:"ierGetReportResult", Service_GetAssociatedContentRepositories:"ierGetAssociatedContentRepositories", Service_DeleteReportResults:"ierDeleteReportResults", Service_ValidateNamingPattern:"ierValidateNamingPattern", Service_GetTaskManagerTasks:"ierGetTaskManagerTasks", Service_GetNextVolumeName:"ierGetNextVolumeNameService", Service_GetHoldsForEntity:"ierGetHoldsForEntityService", Service_RescheduleTask:"ierRescheduleTaskService", Service_DeleteTask:"ierDeleteTaskService", Service_TerminateTask:"ierTerminateTaskService", Service_ResumeTask:"ierResumeTaskService", Service_PauseTask:"ierPauseTaskService", Service_GetExecutionRecords:"ierGetExecutionRecordsService", Service_SaveReportDefinition:"ierSaveReportDefinitionService", Service_RetrieveLinks:"ierRetrieveLinksOnEntityService", Service_GetRecordFromDeclaredDocument:"ierGetRecordFromDeclaredDocumentService", Service_GetAllRecordProperties:"ierGetAllRecordPropertiesService", Service_CreateIERDesktop:"ierCreateDesktopService", Service_GetObjectStoreSecurity:"ierGetObjectStoreSecurity", Service_ObjectStoreSecurity:"ierObjectStoreSecurity", Service_GetRepositoryPermissions:"ierGetRepositoryPermissions", SchedulePropagation_None:"0", SchedulePropagation_ToAllInheritingEntities:"1", SchedulePropagation_ToImmediateSubContainersAndInheritingEntities:"2", SchedulePropagation_ToAllNonAssignedSubContainers:"3", PrincipalSearchAttribute_DisplayName:"2", PrincipalSearchAttribute_ShortName:"1", PrincipalSearchAttribute_None:"0", TaskStatus_InProgress:"16", TaskStatus_Init:"2", TaskStatus_Pending:"4", TaskStatus_Completed:"32", TaskStatus_Scheduled:"256", TaskStatus_Failed:"128", TaskStatus_Paused:"64", TaskStatus_Recurring:"-1", TaskType_Report:"Report", TaskType_DispositionSweep:"DispositionSweep", TaskType_HoldSweep:"HoldSweep", TaskType_DefensibleDisposal:"DefensibleDisposal", TaskType_ReportClass:"com.ibm.ier.plugin.tasks.RunReportTask", TaskType_DispositionSweepClass:"com.ibm.ier.plugin.tasks.RunDispositionSweepTask", TaskType_HoldSweepClass:"com.ibm.ier.plugin.tasks.RunHoldSweepTask", TaskType_DDConversionClass:"com.ibm.ier.plugin.tasks.ConvertToDefensibleDisposalContainerTask", TaskType_DDReportSweepClass:"com.ibm.ier.plugin.tasks.RunDefensibleDisposalReportSweepTask", TaskCategories_AllTasks:"AllTasks", TaskCategories_ScheduledTasks:"ScheduledTasks", TaskCategories_RecurringTasks:"RecurringTasks", TaskCategories_FailedTasks:"FailedTasks", TaskCategories_PausedTasks:"PausedTasks", TaskCategories_InProgressTasks:"InProgressTasks", TaskCategories_CompletedTasks:"CompletedTasks", TaskCategories_ReportTasks:"ReportTasks", TaskCategories_DefensibleDisposalTasks:"DefensibleDisposalTasks", TaskCategories_HoldSweepTasks:"HoldSweepTasks", WorkflowType_BasicSchedule:"Basic Schedule", ApplicationTypes:["text/html", "application/octet-stream", "application/msword", "application/mspowerpoint", "application/powerpoint", "image/pjpeg", "image/jpeg", "image/gif", "application/pdf", "text/plain", "application/xml", "text/xml", "video/avi", "image/bmp", "image/x-windows-bmp", "application/excel", "application/vnd.ms-excel", "application/x-excel"], nop:null});
        var constants = new _Constants();
        return constants;
    });
}, "ier/widget/dialog/ReScheduleReportWizardDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/string", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/util/property", "ier/widget/dialog/BaseAccordionWizardDialog", "ier/widget/panes/ReportEntryFormPane", "ier/widget/panes/AsyncTaskSchedulerPane", "ier/widget/panes/AddItemPane", "ier/widget/dialog/IERBaseDialogPane"], function (dojo_declare, dojo_lang, dojo_construct, dojo_style, dojo_string, ecm_model_Desktop, ecm_model_Request, ecm_widget_dialog_ConfirmationDialog, ecm_dialog_MessageDialog, ier_constants, ier_messages, ier_util, ier_util_dialog, property_util, ier_dialog_BaseAccordionWizardDialog, ier_widget_ReportEntryFormPane, ier_widget_AsyncTaskSchedulerPane, ier_widget_AddItemPane, ier_dialog_IERBaseDialogPane) {
        return dojo_declare("ier.widget.dialog.ReScheduleReportWizardDialog", [ier_dialog_BaseAccordionWizardDialog], {finishButtonLabel:ier_messages.reScheduleReportDialog_finishButton, data:null, task:null, postCreate:function () {
            if (!this.data.specificTaskRequest) {
                this.data.specificTaskRequest = this.data.reportTaskRequest;
            }
            this.set("title", ier_messages.reScheduleReportDialog_title);
            this.setIntroText(ier_messages.reScheduleReportDialog_description);
            this.setResizable(true);
            if (!this.task.isTaskRecurring()) {
                this.finishButtonLabel = ier_messages.reScheduleReportDialog_finishAndRunButton;
            }
            this.inherited(arguments);
            this.reportEntryFormPane = new ier_widget_ReportEntryFormPane({disabled:true});
            this.addChildPane(this.reportEntryFormPane);
            this.connect(this.reportEntryFormPane, "onInputChange", function () {
                setTimeout(dojo_lang.hitch(this, function () {
                    this._validateNextPane();
                }, 0));
            });
            this.connect(this.reportEntryFormPane, "onCompleteRendering", function () {
                this._validateNextPane();
            });
            this.connect(this.reportEntryFormPane, "onRenderAttributes", function (attributes, deferArray) {
                var propertyJSON = this.data.specificTaskRequest.criterias;
                for (var i in propertyJSON) {
                    var property = propertyJSON[i];
                    if (property.name == ier_constants.ReportEntry_hold_name) {
                        property.name = ier_constants.Property_HoldName;
                    }
                }
                property_util.setPropertiesFromPropertyJSON(attributes, propertyJSON);
            });
            this.taskSchedulerPane = new ier_widget_AsyncTaskSchedulerPane({disabled:true, showLoginInformation:true});
            this.addChildPane(this.taskSchedulerPane);
            this.taskSchedulerPane.asyncTaskSchedulerPane.enableRecurrenceRadioButton.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalNumberSpinner.set("disabled", true);
            this.taskSchedulerPane.asyncTaskSchedulerPane.intervalSelect.set("disabled", true);
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceRow, "display", "none");
            dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.reoccurenceIntervalRow, "display", "none");
            if (this.taskSchedulerPane.asyncTaskSchedulerPane.usernameHoverHelp) {
                dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.usernameHoverHelp.domNode, "display", "none");
            }
            if (this.taskSchedulerPane.asyncTaskSchedulerPane.passwordHoverHelp) {
                dojo_style.set(this.taskSchedulerPane.asyncTaskSchedulerPane.passwordHoverHelp.domNode, "display", "none");
            }
            this._setSchedulePane();
            this.addItemPane = new ier_widget_AddItemPane({disabled:true, title:ier_messages.scheduleReportDialog_saveReport, showPermissionPane:false, defaultClass:this.data.specificTaskRequest[ier_constants.Param_ClassName]});
            this.addChildPane(this.addItemPane);
            this.connect(this.addItemPane, "onRenderAttributes", function (attributes, deferArray) {
                property_util.setPropertiesFromPropertyJSON(attributes, this.data.specificTaskRequest.archive_criterias);
            });
            this.connect(this.taskSchedulerPane, "onInputChange", function () {
                setTimeout(dojo_lang.hitch(this, function () {
                    if (this.taskSchedulerPane.validate()) {
                        this.enablePane(this.addItemPane);
                    } else {
                        this.disablePane(this.addItemPane);
                    }
                    this.updateButtonsState();
                }, 0));
            });
            this.startup();
        }, _validateNextPane:function () {
            if (this.reportEntryFormPane.validate()) {
                this.enablePane(this.taskSchedulerPane);
                this.taskSchedulerPane.createRendering(this.repository);
            } else {
                this.disablePane(this.taskSchedulerPane);
            }
            this.updateButtonsState();
        }, _setSchedulePane:function () {
            var asyncTaskSchedulerPane = this.taskSchedulerPane.asyncTaskSchedulerPane;
            ier_util.setTaskSchedulerPane(asyncTaskSchedulerPane, ier_util.createTaskSchedule(this.task));
        }, show:function () {
            this.inherited("show", []);
            var repository = ecm.model.desktop.getRepositoryOfObjectStore(this.data.specificTaskRequest[ier_constants.Param_P8RepositoryId]);
            if (repository) {
                repository.loadIERRepository(dojo_lang.hitch(this, function () {
                    this.repository = repository;
                    this.enablePane(this.reportEntryFormPane);
                    this._getReportDefinition(dojo_lang.hitch(this, function (reportDefinition) {
                        this.reportDefinition = reportDefinition;
                        this.reportEntryFormPane.createRendering(this.repository, this.reportDefinition);
                    }));
                }));
            } else {
                this._displayMissingDialog();
            }
        }, _displayMissingDialog:function () {
            var messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.reScheduleReportDialog_missingReportInformation});
            messageDialog.show();
            ier_util_dialog.manage(messageDialog);
            this.onCancel();
        }, _getReportDefinition:function (callback) {
            var reportDefinitions = this.repository.reportDefinitions;
            if (reportDefinitions) {
                this.repository.retrieveReportDefinitions(dojo_lang.hitch(this, function (reportDefinitions) {
                    var reportDefinition = this.repository.getReportDefinition(this.data.specificTaskRequest[ier_constants.Param_ReportId]);
                    if (reportDefinition) {
                        callback(reportDefinition);
                    } else {
                        for (var i in reportDefinitions) {
                            var rd = reportDefinitions[i];
                            if (rd.title == this.data.specificTaskRequest[ier_constants.Param_ReportName]) {
                                reportDefinition = rd;
                            }
                        }
                        if (reportDefinition) {
                            callback(reportDefinition);
                        } else {
                            this._displayMissingDialog();
                        }
                    }
                }));
            } else {
                callback(this.repository.getReportDefinition(this.data.specificTaskRequest[ier_constants.Param_ReportId]));
            }
        }, onPaneSelected:function (pane) {
            if (this.getCurrentPane() == this.addItemPane) {
                this._createAddItemPane();
            }
        }, onNextButtonClicked:function () {
            if (this.getCurrentPane() == this.addItemPane) {
                this._createAddItemPane();
            }
        }, _createAddItemPane:function () {
            var repository = ecm.model.desktop.getRepository(this.data.specificTaskRequest[ier_constants.Param_SaveInRepository]);
            if (!repository) {
                repository = this.repository;
            }
            this.addItemPane.createRendering(this.repository, this.data.specificTaskRequest[ier_constants.Param_SaveInFolderLocation]);
            this.addItemPane.setDocumentTitle(this.data.specificTaskRequest[ier_constants.Param_ReportTitle]);
        }, onFinishButtonClicked:function () {
            if (!this.task.isTaskRecurring()) {
                var confirmDialog = new ecm_widget_dialog_ConfirmationDialog({text:ier_messages.reScheduleReportDialog_runImmediatelyConfirm, buttonLabel:ier_messages.reScheduleReportDialog_runImmediately, onExecute:dojo_lang.hitch(this, function () {
                    this._onFinishClicked();
                })});
                confirmDialog.show();
                ier_util_dialog.manage(confirmDialog);
            } else {
                this._onFinishClicked();
            }
        }, _onFinishClicked:function () {
            var schedule = this.taskSchedulerPane.get("schedule");
            var reportCriteria = this.reportEntryFormPane.getPropertiesJSON();
            this.data[ier_constants.Param_UserId] = schedule.username;
            this.data[ier_constants.Param_Password] = schedule.password;
            this.data[ier_constants.Param_EmailAddress] = schedule.email;
            var savedInFolder = this.addItemPane.getSavedInFolder();
            this.data.specificTaskRequest[ier_constants.Param_SaveInFolderLocation] = savedInFolder.item.id;
            this.data.specificTaskRequest[ier_constants.Param_SaveInRepository] = savedInFolder.item.repository.id;
            this.data.specificTaskRequest[ier_constants.Param_SaveInFolderLocationName] = savedInFolder.item.name;
            this.data.specificTaskRequest[ier_constants.Param_RootDownloadLinkURL] = this.addItemPane.getRootDownloadLinkURL();
            this.data.specificTaskRequest[ier_constants.Param_ReportTitle] = this.addItemPane.getDocumentTitle();
            this.data.specificTaskRequest[ier_constants.Param_ClassName] = this.addItemPane.getClassName();
            this.data.specificTaskRequest[ier_constants.Param_ReportId] = this.reportDefinition.id;
            this.data.specificTaskRequest[ier_constants.Param_ReportName] = this.reportDefinition.name;
            this.data.specificTaskRequest[ier_constants.Param_Properties] = reportCriteria;
            this.data.specificTaskRequest[ier_constants.Param_ArchiveProperties] = this.addItemPane.getProperties();
            this.task.reschedule(dojo_lang.hitch(this, function (response) {
                this.onFinish(response);
                this.task.refresh();
                this.onCancel();
            }), this.data);
        }, onFinish:function (response) {
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemHistoryPane.html":"<div class=\"ierEntityItemHistoryPane\" data-dojo-attach-point=\"_historyPane\" style=\"width: 100%; height: 100%; padding-top: 5px; overflow:hidden;\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.historyPane_searchCriteris}\"\r\n\t\tdata-dojo-attach-point=\"_searchCriteria\">\r\n\t\t<span class=\"criteriaFilterAria1\">\r\n\t\t\t<label for=\"${id}_typeFilter\">${_ierMessages.historyPane_typeFilter}</label>\r\n\t\t\t<select data-dojo-type=\"dijit/form/Select\" data-dojo-attach-point=\"_filterTypeSelect\" class=\"criteriaFilterSeletor\">\r\n\t\t\t\t<option value=\"ActionType\" selected>${_ierMessages.historyPane_action}</option>\r\n\t\t\t\t<option value=\"InitiatingUser\">${_ierMessages.historyPane_initiator}</option>\r\n\t\t\t\t<option value=\"EventStatus\">${_ierMessages.historyPane_status}</option>\r\n\t\t\t</select>\r\n\t\t\t<label for=\"${id}_typeFilterBy\" style=\"padding-left: 5px; padding-right: 5px;\">${_ierMessages.historyPane_filterBy}</label>\r\n\t\t\t<input data-dojo-type=\"dijit/form/TextBox\" data-dojo-attach-point=\"_filterBox\" class=\"criteriaTextBox\"\r\n\t\t\t\tstyle=\"display:none;\" placeHolder=\"${_ierMessages.pluginConfiguration_nameContainsLabel}\"/>\r\n\t\t\t<select data-dojo-type=\"dijit/form/Select\" data-dojo-attach-point=\"_actionTypeSelect\" class=\"criteriaActionTypeSeletor\">\r\n\t\t\t\t<option value=\"All\" selected>${_ierMessages.historyPane_All}</option>\r\n\t\t\t\t<option value=\"CreationEvent\">${_ierMessages.historyPane_CreationEvent}</option>\r\n\t\t\t\t<option value=\"DeletionEvent\">${_ierMessages.historyPane_DeletionEvent}</option>\r\n\t\t\t\t<option value=\"FileEvent\">${_ierMessages.historyPane_FileEvent}</option>\r\n\t\t\t\t<option value=\"RMAudit\">${_ierMessages.historyPane_RMAudit}</option>\r\n\t\t\t\t<option value=\"UpdateEvent\">${_ierMessages.historyPane_UpdateEvent}</option>\r\n\t\t\t\t<option value=\"UpdateSecurityEvent\">${_ierMessages.historyPane_UpdateSecurityEvent}</option>\r\n\t\t\t</select>\r\n\t\t\t<select data-dojo-type=\"dijit/form/Select\" data-dojo-attach-point=\"_statusSelect\" class=\"criteriaActionTypeSeletor\" style=\"display:none;\">\r\n\t\t\t\t<option value=\"All\" selected>${_ierMessages.historyPane_All}</option>\r\n\t\t\t\t<option value=\"Success\">${_ierMessages.historyPane_success}</option>\r\n\t\t\t\t<option value=\"Failure\">${_ierMessages.historyPane_failure}</option>\r\n\t\t\t</select>\r\n\t\t</span>\r\n\t\t<span class=\"criteriaFilterAria2\">\r\n\t\t\t<label for=\"${id}_dateFrom\">${_ierMessages.historyPane_dateFrom}:</label>\r\n\t\t\t<div data-dojo-type=\"ecm.widget.DatePicker\" data-dojo-attach-point=\"_startDatePicker\"\r\n\t\t\t\tdata-dojo-props=\"id: '${id}_startDate', selector: 'date', showFormatPattern: true, \r\n\t\t\t\tconstraints: {datePattern: '${_dateFormat}'}, invalidMessage: '${_invalidDateMessage}'\"\r\n\t\t\t\tdata-dojo-attach-event=\"onChange: _validateDateRange\" \r\n\t\t\t\taria-label=\"${_ierMessages.historyPane_properties_type_date_tooltip}\"> \r\n\t\t\t</div>\r\n\t\t\t<label for=\"${id}_dateTo\">${_ierMessages.historyPane_dateTo}</label>\r\n\t\t\t<div data-dojo-type=\"ecm.widget.DatePicker\" data-dojo-attach-point=\"_endDatePicker\"\r\n\t\t\t\tdata-dojo-props=\"id: '${id}_endDate', selector: 'date', showFormatPattern: true, \r\n\t\t\t\tconstraints: {datePattern: '${_dateFormat}'}, invalidMessage: '${_invalidDateMessage}'\"\r\n\t\t\t\tdata-dojo-attach-event=\"onChange: _validateDateRange\" \r\n\t\t\t\taria-label=\"${_ierMessages.historyPane_properties_type_date_tooltip}\"> \r\n\t\t\t</div>\r\n\t\t</span>\r\n\t\t<div style=\"padding-top: 10px; padding-bottom: 2px;\">\r\n\t\t\t<div id=\"${id}_searchButton\" data-dojo-attach-point=\"_searchButton\" data-dojo-type=\"dijit/form/Button\" \r\n\t\t\t\tlabel=\"${_ierMessages.historyPane_searchButton}\" class=\"idxSpecialButton\"></div>\r\n\t\t\t<div id=\"${id}_resetButton\" data-dojo-attach-point=\"_resetButton\" data-dojo-type=\"dijit/form/Button\" \r\n\t\t\t\tlabel=\"${_ierMessages.historyPane_resetButton}\"></div>\r\n\t\t\t<span data-dojo-attach-point=\"_dateRangeError\" class=\"dateRangeValidationMessage\"></span>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"ier/widget/listView/ContentList\"\r\n\t\ttitle=\"${_ierMessages.historyPane_title}\"\r\n\t\tdata-dojo-attach-point=\"_contentList\">\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/layout/templates/ConfigurePane.html":"<div class=\"ecmCenterPane ierCenterPane ierConfigurePane\">\r\n\t<div data-dojo-type=\"dijit.layout.BorderContainer\" class=\"contentPane\" data-dojo-attach-point=\"mainContainer\" data-dojo-props=\"gutters:false\">\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\" class=\"topPane\">\r\n\t\t\t<div class=\"filePlanBreadcrumbContainer\" data-dojo-attach-point=\"breadcrumbContainer\">\r\n\t\t\t\t<div data-dojo-type=\"ecm.widget.Breadcrumb\" data-dojo-attach-point=\"breadcrumb\" class=\"breadcrumb\"></div>\r\n\t\t    </div>\r\n\t\t   <div class=\"filePlanSearchBarContainer\">\r\n\t\t   \t\t<div data-dojo-type=\"ier.widget.FilePlanSearchBar\" data-dojo-attach-point=\"_filePlanSearchBar\" class=\"filePlanSearchBar\" aria-label=\"${_messages.search_for}\"></div>\r\n\t\t   </div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\" class=\"filepaneCenter\">\r\n\t\t\t<div data-dojo-type=\"idx.layout.BorderContainer\" data-dojo-attach-point=\"borderContainer\" class=\"contentPane\" data-dojo-props=\"gutters:false, design:'sidebar'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t\t<div data-dojo-attach-point=\"folderContents\" data-dojo-type=\"ier.widget.listView.ContentList\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/dialog/FilePlanPropertiesDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "ier/constants", "ier/messages", "ier/util/util", "ecm/model/Request", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/FilePlanPropertiesDialogContent.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_lang, dom_style, ier_constants, ier_messages, ier_util, ecm_model_Request, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.FilePlanPropertiesDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _messages:ier_messages, _item:null, _isReadOnly:false, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemPropertiesPane);
            this.addChildPane(this._entityItemSecurityPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
        }, setDialogMode:function (editable) {
            if (editable) {
                dom_style.set(this._saveButton.domNode, "display", "");
                dom_style.set(this._applyButton.domNode, "display", "");
                this.cancelButton.set("label", ier_messages.baseDialog_cancelButton);
            } else {
                dom_style.set(this._saveButton.domNode, "display", "none");
                dom_style.set(this._applyButton.domNode, "display", "none");
                this.cancelButton.set("label", ier_messages.baseDialog_closeButton);
            }
        }, hasEditablePane:function () {
            return (this._item.privModifyProperties || this._item.privModifyPermissions);
        }, show:function (repository, item, isReadOnly) {
            this.inherited("show", arguments);
            this._item = item;
            this._isReadOnly = isReadOnly ? isReadOnly : false;
            this.setDialogMode(this.hasEditablePane() || !isReadOnly);
            this.repository = repository;
            if (!this.repository || this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, validateInput:function () {
            var isValid = this.inherited(arguments);
            this._applyButton.set("disabled", !isValid);
            return isValid;
        }, _renderDialog:function () {
            this.set("title", ier_messages.fileplan);
            this.setIntroText(ier_messages.addFilePlanDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh01.htm"));
            this.setResizable(true);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_FilePlan, entityType:ier_constants.EntityType_FilePlan, hideContentClassSelector:true, item:this._item, isReadOnly:this._isReadOnly || !this._item.privModifyProperties});
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, this._item, null, contentClass, properties, this._isReadOnly);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _editFilePlan:function (className, criterias, permissions, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.repository.clearFilePlans();
                this._item.retrieveAttributes(dojo_lang.hitch(this, function () {
                    this._item.permissions = null;
                    this._item.refresh();
                    if (ecm.model.desktop.onConfigure) {
                        ecm.model.desktop.onConfigure(this.repository, [this._item]);
                    }
                }), false, true);
                if (callback) {
                    callback();
                }
            }));
            params.requestParams[ier_constants.Param_FilePlanRepositoryId] = this.repository.id;
            params.requestParams[ier_constants.Param_EntityId] = this._item.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_EditFilePlan, ier_constants.PostEncoding, params);
        }, _updateProperties:function (closeOnComplete) {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var className = this._entityItemPropertiesPane.getContentClass().id;
                this._editFilePlan(className, properties, permissions, closeOnComplete ? dojo_lang.hitch(this, "onCancel") : null);
            }
        }, _onClickApply:function () {
            this._updateProperties(false);
        }, _onClickSave:function () {
            this._updateProperties(true);
        }});
    });
}, "url:ier/widget/admin/templates/DisplayPropertyPane.html":"<div class=\"ecmAdminTab\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\" class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_addFolderButton\">${_messages.admin_addFolder}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_addRecordButton\">${_messages.admin_addRecord}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_editButton\">${_messages.admin_edit}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_deleteButton\">${_messages.admin_delete}</button>\r\n\t\t<div data-dojo-type=\"dijit/Menu\" data-dojo-attach-point=\"_menu\" style=\"display: none;\">\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_addFolderMenu\">${_messages.admin_addFolder}</div>\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_addRecordMenu\">${_messages.admin_addRecord}</div>\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_editMenu\">${_messages.admin_edit}</div>\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_deleteMenu\">${_messages.admin_delete}</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-attach-point=\"_gridContainer\" data-dojo-props=\"region: 'center'\" class=\"ecmContentList ierCenterPane\"></div>\r\n</div>\r\n", "ier/widget/admin/DisplayColumnPane":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/store/Memory", "dojo/string", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/BorderContainer", "idx/data/JsonStore", "ecm/model/Request", "ier/constants", "ier/messages", "ier/model/admin/Config", "ier/widget/admin/Grid", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/DisplayColumnPane.html", "dojo/text!./templates/DisplayColumnDialogContent.html", "dijit/Menu", "dijit/MenuItem", "dijit/form/Button", "dijit/form/TextBox", "dijit/layout/ContentPane", "ecm/widget/FilterTextBox", "ecm/widget/SloshBucket"], function (array, declare, lang, Memory, string, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, JsonStore, Request, constants, messages, Config, Grid, IERBaseDialog, DisplayColumnPane_html, DisplayColumnDialogContent_html) {
        function newStore(data) {
            return new JsonStore({identifier:"value", label:"name", data:data || []});
        }
        var Dialog = declare(IERBaseDialog, {contentString:DisplayColumnDialogContent_html, title:messages.admin_displayColumns, repository:null, config:null, object:null, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this.addDomNodeCSSClass("ierSmallDialog");
            this._saveButton = this.addButton(messages.admin_save, "_onSave", false, true);
            this._propertySelector.hideAvailableOnAdd = true;
            this._availableStructure = [{field:"name", name:messages.admin_availableProperties, width:"100%"}];
            this._selectedStructure = [{field:"name", name:messages.admin_selectedProperties, width:"100%"}];
            this.connect(this._filterBox, "onChange", "_onFilterChange");
            this.connect(this._restoreButton, "onClick", "_onRestore");
        }, _setObjectAttr:function (object) {
            this._set("object", object);
            this._listNode.innerHTML = object && object.name || "";
            this._filterBox.set("value", "");
            this._propertySelector.setAvailableGridModel(newStore(), this._availableStructure);
            this._propertySelector.setSelectedValuesGridModel(newStore(), this._selectedStructure);
            this._loadAvailableProperties();
        }, _loadAvailableProperties:function () {
            if (this.repository && this.object) {
                Request.invokeService("openContentClass", this.repository.type, {repositoryId:this.repository.id, objectStoreId:this.repository.objectStoreName, template_name:this.object.id, ier_config:true}, lang.hitch(this, function (response) {
                    var data = [];
                    array.forEach(response.criterias, function (c) {
                        if (!c.hidden || c.name == constants.Property_SweepState) {
                            data.push({value:c.name, name:c.label || c.name});
                        }
                    });
                    data.sort(function (a, b) {
                        return (a.name > b.name ? 1 : -1);
                    });
                    this._propertySelector.setAvailableGridModel(newStore(data), this._availableStructure);
                    this._loadSelectedProperties();
                }));
            }
        }, _loadSelectedProperties:function () {
            if (this.object) {
                var columns = this.object.columns;
                var names = this.object.names;
                var selected = {};
                var data = array.map(columns, function (c) {
                    selected[c] = c;
                    return {value:c, name:names[c] || c};
                });
                this._propertySelector.setSelectedValuesGridModel(newStore(data), this._selectedStructure, selected);
                this._propertySelector.filter({});
            }
        }, _onFilterChange:function () {
            var value = this._filterBox.get("value");
            this._propertySelector.filter({name:"*" + value + "*"});
        }, _onRestore:function () {
            if (this.object) {
                Config.getConfig("repository", "default", lang.hitch(this, function (config) {
                    this.object = {id:this.object.id, name:this.object.name};
                    this.object.columns = config.get(this.object.id + "DisplayColumns");
                    this.object.names = config.get(this.object.id + "DisplayNames");
                    this._loadSelectedProperties();
                }));
            }
        }, _onSave:function () {
            if (this.config && this.object) {
                var data = this._propertySelector.getData(this._propertySelector.getSelectedValuesGrid());
                if (data && data.length > 0) {
                    var names = this.object.names;
                    this.object.columns = array.map(data, function (d) {
                        var c = d.value;
                        names[c] = names[c] || d.name;
                        return c;
                    });
                    this.config.set(this.object.id + "DisplayColumns", this.object.columns);
                    Config.saveConfig(this.config, lang.hitch(this, function () {
                        this.onSave(this.object);
                        this.hide();
                    }));
                }
            }
        }, onSave:function (object) {
        }});
        return declare([BorderContainer, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:DisplayColumnPane_html, gutters:false, repository:null, config:null, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this._supportingWidgets = [];
            var structure = [{field:"name", name:messages.admin_list, width:"20%"}, {field:"columns", name:messages.admin_displayColumns, width:"80%", sortable:false, formatter:function (object) {
                var names = object.names;
                return array.map(object.columns, function (c) {
                    return names[c] || c;
                }).join(", ");
            }}];
            this._grid = new Grid({structure:structure, sortInitialOrder:{colId:1}});
            this._grid.placeAt(this._gridContainer.containerNode);
            this.connect(this._editButton, "onClick", "_onEdit");
            this.connect(this._editMenu, "onClick", "_onEdit");
            this.connect(this._grid, "onSelectionChange", "_onSelectionChange");
            this._grid.menu.bind(this._menu, {hookPoint:"row"});
            this._onSelectionChange();
        }, destroy:function () {
            if (this._dialog) {
                this._dialog.destroyRecursive();
            }
            this.inherited(arguments);
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._grid.setStore(new Memory({data:this._getData()}));
        }, _getData:function () {
            var data = [];
            if (this.config) {
                var values = this.config.values;
                for (var key in values) {
                    var index = key.indexOf("DisplayColumns");
                    if (index > 0) {
                        var id = key.substring(0, index);
                        var name;
                        if (id == constants.ClassName_Container) {
                            name = messages.admin_browseListName;
                        } else {
                            name = messages["admin_configureListName_" + id] || values[id + "DisplayName"] || id;
                        }
                        var columns = values[key] || [];
                        var names = values[id + "DisplayNames"] || {};
                        data.push({id:id, name:name, columns:columns, names:names});
                    }
                }
            }
            return data;
        }, _getDialog:function () {
            if (!this._dialog) {
                this._dialog = new Dialog({repository:this.repository, config:this.config});
                this.connect(this._dialog, "onSave", "_onSave");
            }
            return this._dialog;
        }, _onEdit:function () {
            var selected = this._grid.getSelected();
            var dialog = this._getDialog();
            var object = this._grid.store.get(selected[0]);
            dialog.set("object", object);
            dialog.show();
        }, _onSave:function (object) {
            this._grid.store.put(object);
        }, _onSelectionChange:function () {
            var selected = this._grid.getSelected();
            var disabled = selected.length !== 1;
            this._editButton.set("disabled", disabled);
            this._editMenu.set("disabled", disabled);
        }});
    });
}, "ier/widget/admin/Grid":function () {
    define(["dojo/_base/declare", "dojo/dom-class", "dojo/store/Memory", "gridx/Grid", "gridx/core/model/cache/Async", "gridx/modules/ColumnResizer", "gridx/modules/Focus", "gridx/modules/Menu", "gridx/modules/SingleSort", "gridx/modules/extendedSelect/Row"], function (declare, dom_class, Memory, Grid, Async, ColumnResizer, Focus, Menu, SingleSort, extendedSelectRow) {
        return declare(Grid, {cacheClass:Async, selectRowTriggerOnCell:true, sortable:true, selectable:true, compact:true, wholeRow:true, alternatingRows:true, buildRendering:function () {
            if (!this.store) {
                this.store = new Memory();
            }
            if (!this.structure) {
                this.structure = [{field:"id", name:"&nbsp;"}];
            }
            if (!this.modules) {
                this.modules = [ColumnResizer, Focus, Menu];
            }
            if (this.sortable) {
                this.modules.push(SingleSort);
            }
            if (this.selectable) {
                this.modules.push(extendedSelectRow);
            }
            this.inherited(arguments);
            dom_class.toggle(this.domNode, "compact", this.compact);
            dom_class.toggle(this.domNode, "gridxWholeRow", this.wholeRow);
            dom_class.toggle(this.domNode, "gridxAlternatingRows", this.alternatingRows);
        }, startup:function () {
            this.inherited(arguments);
            if (this.select && this.select.row) {
                this.connect(this.select.row, "onSelectionChange", "onSelectionChange");
            }
        }, getSelected:function () {
            if (this.select && this.select.row) {
                return this.select.row.getSelected();
            } else {
                return [];
            }
        }, deselectAll:function () {
            if (this.select && this.select.row) {
                this.select.row.clear();
            }
        }, onSelectionChange:function () {
        }});
    });
}, "url:ier/widget/panes/templates/DDReportSweepPane.html":"<div class=\"ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\" data-dojo-attach-point=\"containerNode\">\r\n\t<table class=\"propertyTable\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t${messages.filePlanRepository}:\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportSweepFilePlanRepositoryHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_repositorySelector\"\r\n\t\t\t\t\t\tdata-dojo-type=\"ier/widget/FilePlanRepositorySelector\"\r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_repositorySelector\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t${messages.scheduleDDReportSweep_containers}:\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportSweepContainersHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div data-dojo-type=\"ier/widget/MultipleFoldersSelector\"\r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_multipleFoldersSelector\"\r\n\t\t\t\t\t\tdata-dojo-props=\"disabled:true\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_advancedDaysTextBox\">${messages.advancedDays}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportSweepAdvancedDaysHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_advancedDaysTextBox\"\r\n\t\t\t\t\t\tdata-dojo-type=\"dijit/form/NumberTextBox\"\r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_advancedDaysTextBox\"\r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:0,places:0},trim: true, intermediateChanges: true, required: true, value:0\"\r\n\t\t\t\t\t\tstyle=\"width:300px;\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_reportOnly\">${messages.reportOnly}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportReportOnlyHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<select data-dojo-attach-point=\"_reportOnlySelector\" \r\n\t\t\t\t\t\tid=\"${id}_reportOnly\"\r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\tdata-dojo-type=\"dijit/form/Select\">\r\n\t\t\t\t\t    <option value=\"true\">${_messages.yes}</option>\r\n\t\t\t\t\t    <option value=\"false\" selected=\"true\">${_messages.no}</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<table class=\"propertyTable identedPropertyTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_connectionPointSelector\">${messages.connectionPointName}:</label>&nbsp;\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportSweepconnectionPointHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t   <div id=\"${id}_connectionPointSelector\" data-dojo-attach-point=\"_connectionPointSelector\" data-dojo-attach-event=\"onChange: onInputChange\" \r\n\t\t\t\t\t   \t\tdata-dojo-type=\"ecm.widget.FilteringSelect\" labelType=\"text\" label=\"label\" searchAttr=\"label\" identifier=\"value\" required=true maxHeight=200 style=\"width:300px;\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\t\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_workflowSelector\">${messages.scheduleDDReportSweep_ddWorkflow}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportDDWorkflowHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_workflowSelectorContainer\">\r\n\t\t\t\t\t\t<button type=\"button\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-point=\"_workflowDisabledButton\" \r\n\t\t\t\t\t\t\tdata-dojo-props=\"disabled:true\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"ecm.widget.Button\">${messages.select_with_elipsis}</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_needApprovalSelector\">${messages.needApproval}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportNeedApprovalHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<select data-dojo-attach-point=\"_needApprovalSelector\" \r\n\t\t\t\t\t\t\tid=\"${id}_needApprovalSelector\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit/form/Select\">\r\n\t\t\t\t\t\t    <option value=\"true\">${_messages.yes}</option>\r\n\t\t\t\t\t\t    <option value=\"false\" selected=\"true\">${_messages.no}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"_containerDeclareRecordToSelectorRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_containerRecordSelector\">${messages.containerToDeclareRecordTo}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.scheduleDDReportRecordContainerHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/ValidationTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-point=\"_containerRecordSelectorTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"disabled:true\"\r\n\t\t\t\t\t\t\tstyle=\"width:300px;\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"${id}_containerRecordSelector\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"ier/widget/_FolderSelectorDropDown\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-point=\"_containerRecordSelector\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"disabled:true\"\r\n\t\t\t\t\t\t\tstyle=\"width:300px;\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t\t</tbody>\r\n\t</table>\t\r\n</div>", "url:ier/widget/dialog/templates/RecordContainerPropertiesDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent ierEditPropertiesDialog\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContentTabContainer\">\r\n\t\t<div title=\"${_ierMessages.baseDialog_properties}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemPropertiesPane\">\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemDetailPane\"\r\n\t\t\ttitle=\"${_ierMessages.detail}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemDetailPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.baseDialog_disposition}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemDispositionPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemDispositionPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.baseDialog_security}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemSecurityPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemSecurityPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.links}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemLinksPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemLinksPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.holds}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemHoldPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemHoldPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.historyPane_title}\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemHistoryPane\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemHistoryPane\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "url:ier/widget/panes/templates/RecordDeclareGeneralPane.html":"\r\n<div class=\"recordDeclareGeneralPane\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr data-dojo-attach-point=\"_entryTemplateRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_entryTemplateSelector\">${_messages.declareRecordDialog_recordEntryTemplate}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_entryTemplateSelectorHoverHelp\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_entryTemplateSelectorCell\">\r\n\t\t\t\t\t<div id=\"${id}_entryTemplateSelector\"\r\n\t\t\t\t\t\tname=\"${id}_entryTemplateSelector\"\r\n\t\t\t\t\t\tclass=\"ierDropDownInput ierEntryTemplateSelector\"\r\n\t\t\t\t\t\tdata-dojo-type=\"dijit.form.FilteringSelect\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_entryTemplateSelector\"\r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:_onRecordEntryTemplateSelectorChange,onClick:_onRecordEntryTemplateSelectorInvoked,onKeyPress:_onRecordEntryTemplateSelectorInvoked\"\r\n\t\t\t\t\t\tdata-dojo-props=\"placeholder:'${_messages.declareRecordDialog_entryTemplateToolTip}', labelType:'text', label:'label', searchAttr:'label', required:false, identifier:'value'\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n</div>\r\n", "url:ier/widget/dialog/templates/TaskInformationDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"taskInformationDialog\">\r\n\t<div data-dojo-type=\"ier/widget/tasks/DDSweepTaskInformationPane\" class=\"ierDialogContent\" data-dojo-attach-point=\"_infoPane\"\r\n\t</div>\r\n</div>\r\n", "ier/widget/ReportEntryForm":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/unload", "dojo/string", "dojo/_base/array", "dojo/dom-construct", "dojo/dom-class", "dojo/dom-style", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/Messages", "ecm/model/Message", "ecm/model/AttributeDefinition", "ecm/model/Request", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/util/util", "ier/util/dialog", "ier/messages", "ier/widget/admin/config", "ier/model/FilePlanRepositoryMixin", "dojo/text!./templates/ReportEntryForm.html", "dijit/form/Button", "dijit/layout/ContentPane", "ier/widget/panes/CommonPropertiesPane"], function (dojo_declare, dojo_lang, dojo_unload, dojo_string, dojo_array, dojo_domConstruct, dojo_domClass, dojo_domStyle, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_messages, ecm_Message, ecm_model_AttributeDefinition, ecm_model_Request, ecm_widget_dialog_MessageDialog, ier_constants, ier_util, ier_util_dialog, ier_messages, ier_admin_config, ier_model_FilePlanRepositoryMixin, templateString) {
        return dojo_declare("ier.widget.ReportEntryForm", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {widgetsInTemplate:true, templateString:templateString, ier_messages:ier_messages, messages:ecm_messages, repository:null, reportDefinition:null, classAttributeDefinitions:null, reportViewer:null, isPopup:false, showActionBar:true, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._reportEntryPropertiesPane, "onChange", function () {
                this.validateInput();
                this.onChange();
            });
            this.connect(this._reportEntryPropertiesPane, "onValueSet", function () {
                this.validateInput();
                this.onChange();
            });
            this.connect(this._reportEntryPropertiesPane, "onCompleteRendering", function () {
                this.resizeCommonProperties();
                this.resize();
                this.onCompleteRendering();
            });
            this.connect(this._reportEntryPropertiesPane, "onRenderAttributes", function (attributes) {
                this.onRenderAttributes(attributes);
            });
            this.connect(this.backToParams, "click", dojo_lang.hitch(this, function () {
                this.reportViewer.close();
                this.mainStackContainer.selectedChildWidget = null;
                this.mainStackContainer.selectChild(this.mainPane);
            }));
            dojo_unload.addOnWindowUnload(dojo_lang.hitch(this, function () {
                if (this.reportViewer && this.isPopup) {
                    this.reportViewer.close();
                }
            }));
            if (!this.showActionBar) {
                dojo_domStyle.set(this.actionBar, "display", "none");
            }
        }, onRenderAttributes:function (attributes, deferArray) {
        }, getRepository:function () {
            return this.repository;
        }, getReportViewer:function () {
            var viewerClass = ecm.model.Request.getPluginResourceUrl(ier_constants.ApplicationPlugin, "ier/widget/CognosViewer.js");
            var viewerObject = null;
            require([viewerClass], dojo_lang.hitch(this, function (cls) {
                viewerObject = new cls({repository:this.repository, reportDefinitionId:this.reportDefinition.id, reportName:this.reportDefinition.name, tableName:this.reportDefinition.tableName});
            }));
            viewerObject.createRendering();
            return viewerObject;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, createRendering:function (repository, reportId, reportDefinition, onComplete) {
            this.repository = repository;
            this._reportId = reportId;
            this._reportEntryPropertiesPane.setRepository(this.repository);
            this.reportDefinition = reportDefinition;
            this._attributeDefinitions = [];
            this._contentClass = this.repository.getContentClass(ier_constants.ClassName_ReportHold);
            this._loadReportDefinition(dojo_lang.hitch(this, function () {
                if (this.isPopup) {
                    this.reportViewer = this.getReportViewer();
                    dojo_domConstruct.place(this.reportViewer.domNode, this.baseReportViewerContainer, "only");
                    dojo_domClass.add(this.mainPane.domNode, "mainPane");
                }
                this.mainContainer.resize();
                if (onComplete) {
                    onComplete();
                }
            }));
        }, resize:function () {
            this.inherited(arguments);
            this.mainContainer.resize();
        }, _loadReportDefinition:function (onComplete) {
            this.reportDefinition.loadReportDefinition(dojo_lang.hitch(this, function (reportDefinition) {
                this._reportTitle.innerHTML = reportDefinition.title;
                if (this.isPopup) {
                    window.document.title = reportDefinition.title;
                }
                if (reportDefinition.getEntryHelp()) {
                    this.setIntroText(reportDefinition.getEntryHelp());
                } else {
                    this.setIntroText(dojo_string.substitute(this.ier_messages.report_intro, [reportDefinition.title]));
                }
                this._reportDefinition = reportDefinition;
                this._totalParameters = reportDefinition.getParameterNumber();
                this._currentParameterIdx = 0;
                this._renderNextParameter();
                if (onComplete) {
                    onComplete();
                }
            }));
        }, _getAttributeDefinition:function (id) {
            for (var i in this.classAttributeDefinitions) {
                var attrDef = this.classAttributeDefinitions[i];
                if (attrDef.id == id) {
                    return attrDef;
                }
            }
        }, _renderNextParameter:function () {
            var parameters = this._reportDefinition.getParameters();
            this._currentParameter = parameters[this._currentParameterIdx];
            switch (this._currentParameter.symname) {
              case ier_constants.ReportEntry_disposal_action_export:
              case ier_constants.ReportEntry_disposal_action:
                this._renderChoiceList(ier_constants.Id_ActionTypeChoiceList);
                break;
              case ier_constants.ReportEntry_user_name:
                this._renderUserName();
                break;
              case ier_constants.ReportEntry_rm_entity_type:
                this._renderEntityType();
                break;
              case ier_constants.ReportEntry_report_type:
                this._renderReportType();
                break;
              case ier_constants.ReportEntry_ros_name:
                this._renderROSName();
                break;
              case ier_constants.ReportEntry_ros_browse:
                this._renderROSBrowse();
                break;
              case ier_constants.ReportEntry_action:
                this._renderAction();
                break;
              case ier_constants.ReportEntry_review_decision:
                this._renderChoiceList(ier_constants.Id_ReviewDecisionChoiceList);
                break;
              case ier_constants.ReportEntry_application_type:
                this._renderApplicationType();
                break;
              case ier_constants.ReportEntry_fileplan_name:
                this._renderFilePlanNames();
                break;
              default:
                this._renderDefault();
                break;
            }
        }, setIntroText:function (text) {
            if (this._introText.firstChild) {
                this._introText.firstChild.nodeValue = text;
            } else {
                var textNode = document.createTextNode(text);
                this._introText.appendChild(textNode);
            }
        }, onChange:function () {
        }, onCompleteRendering:function () {
            this.validateInput();
        }, validateInput:function () {
            var errorField = this._reportEntryPropertiesPane.validate();
            this._runButton.set("disabled", (errorField != null));
            if (ecm.model.desktop.taskManager.serviceURL != null && ecm.model.desktop.taskManager.serviceURL != "") {
                this._scheduleButton.set("disabled", (errorField != null));
            }
            return (errorField == null);
        }, resizeCommonProperties:function () {
            this._reportEntryPropertiesPane.resize();
        }, onCancel:function () {
            window.close();
        }, onRun:function () {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.reportResultId = response.reportResultId;
                this.reportViewer.reportResultJobId = this.reportResultId;
                this.reportViewer.view(this.reportResultId, dojo_lang.hitch(this, function () {
                    dojo_domStyle.set(this.backToParams, "display", "");
                    this.mainContainer.resize();
                    this.mainStackContainer.selectChild(this.resultsPane);
                }));
            }));
            params.requestParams[ier_constants.Param_ReportId] = this.reportDefinition.id;
            var data = new Object();
            data[ier_constants.Param_Properties] = this.getPropertiesJSON();
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_RunReport, ier_constants.PostEncoding, params);
        }, onScheduleReport:function () {
            var reportData = {repository:this.repository, reportCriteria:this.getPropertiesJSON(), reportDefinition:this.reportDefinition};
            var reportDialog = new ier.widget.dialog.ScheduleReportWizardDialog({reportData:reportData});
            reportDialog.show();
            ier_util_dialog.manage(reportDialog);
            this.connect(reportDialog, "onFinish", function () {
                this.onCancel();
            });
        }, getPropertiesJSON:function () {
            var properties = this._reportEntryPropertiesPane.getPropertiesJSON(true);
            if (properties) {
                dojo_array.forEach(properties, function (property) {
                    if (property.name == ier_constants.Property_HoldName) {
                        property.name = ier_constants.ReportEntry_hold_name;
                    }
                    var field = this._reportEntryPropertiesPane.getFieldWithName(property.name);
                    if (field instanceof ecm.widget.DropDownInput) {
                        property.label = field.get("title");
                    }
                }, this);
            }
            return properties;
        }, _renderDefault:function () {
            switch (this._currentParameter.datatype) {
              case ier_constants.ReportEntry_Param_StringType:
                this._renderStringParameter(this._currentParameter, ier_constants.DataType_String);
                break;
              case ier_constants.ReportEntry_Param_DateTimeType:
                this._renderDateTimeParameter(this._currentParameter);
                break;
              default:
                break;
            }
            this._onCompleteRenderingParameter();
        }, _renderChoiceList:function (choiceListId) {
            this._reportModel.retrieveChoiceList(this.repository.id, choiceListId, dojo_lang.hitch(this, function (items) {
                var choiceList = {choices:items};
                if (items.length > 0) {
                    this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, items[0].value, choiceList);
                }
                this._onCompleteRenderingParameter();
            }));
        }, _renderROSName:function () {
            this.repository.retrieveAssociatedContentRepositories(dojo_lang.hitch(this, function (items) {
                var choiceList = {choices:items};
                if (items.length > 0) {
                    this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, items[0].value, choiceList);
                }
                this._onCompleteRenderingParameter();
            }));
        }, _renderFilePlanNames:function () {
            this.repository.getFilePlans(dojo_lang.hitch(this, function (fileplans) {
                var items = [];
                for (var i in fileplans) {
                    items.push({displayName:fileplans[i].attributes.FolderName, value:fileplans[i].attributes.Name});
                }
                var choiceList = {choices:items};
                this._currentParameter.displayname = ier_messages.report_specifyFilePlan;
                this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, items[0].value, choiceList);
                this._onCompleteRenderingParameter();
            }));
        }, _renderROSBrowse:function () {
            this._onCompleteRenderingParameter();
        }, _renderUserName:function () {
            this._renderStringParameter(this._currentParameter, ier_constants.DataType_User);
            this._onCompleteRenderingParameter();
        }, _renderEntityType:function () {
            var choiceList = {choices:this._currentParameter.values};
            this._currentParameter.cardinality = ier_constants.DataType_Cardinality_LIST;
            this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, null, choiceList);
            this._onCompleteRenderingParameter();
        }, _renderAction:function () {
            var choiceList = {choices:[{displayName:this.ier_messages.report_action_opened, value:this.ier_messages.report_action_opened}, {displayName:this.ier_messages.report_action_closed, value:this.ier_messages.report_action_closed}]};
            this._currentParameter.cardinality = ier_constants.DataType_Cardinality_LIST;
            this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, null, choiceList);
            this._onCompleteRenderingParameter();
        }, _renderReportType:function () {
            this._currentParameter.isreq = true;
            this._renderStringParameter(this._currentParameter, ier_constants.DataType_String);
            this._onCompleteRenderingParameter();
        }, _renderApplicationType:function () {
            var applicationTypeItems = [];
            for (var i in ier_constants.ApplicationTypes) {
                applicationTypeItems.push({displayName:ier_constants.ApplicationTypes[i], value:ier_constants.ApplicationTypes[i]});
            }
            var applicationTypeList = {choices:applicationTypeItems};
            this._renderStringParameter(this._currentParameter, ier_constants.DataType_String, null, applicationTypeList);
            this._onCompleteRenderingParameter();
        }, _onCompleteRenderingParameter:function () {
            this._currentParameterIdx = this._currentParameterIdx + 1;
            if (this._currentParameterIdx < this._totalParameters) {
                this._renderNextParameter();
            } else {
                if (this._currentParameterIdx == this._totalParameters) {
                    this._reportEntryPropertiesPane.renderAttributes(this._attributeDefinitions, null, "create");
                    this.onCompleteRendering();
                }
            }
        }, _renderStringParameter:function (parameter, datatype, defaultValue, choiceList) {
            var criterion = new ecm_model_AttributeDefinition({id:parameter.symname, name:parameter.displayname, repositoryType:this.repository.type, dataType:(datatype == null) ? ier_constants.DataType_User : datatype, required:parameter.isreq, defaultValue:(defaultValue == null) ? [] : defaultValue, cardinality:parameter.cardinality ? parameter.cardinality : "SINGLE", settability:ier_constants.ReportEntry_Settability, choiceList:choiceList, contentClass:this._contentClass, maxLength:100, uniqueValues:true});
            this._attributeDefinitions.push(criterion);
        }, _renderDateTimeParameter:function (parameter) {
            var criterion = new ecm_model_AttributeDefinition({id:parameter.symname, name:parameter.displayname, repositoryType:this.repository.type, dataType:ier_constants.DataType_DateTime, minValue:ier_constants.ReportEntry_DateTime_MinValue, maxValue:ier_constants.ReportEntry_DateTime_MaxValue, required:parameter.isreq, cardinality:parameter.cardinality ? parameter.cardinality : "SINGLE", settability:ier_constants.ReportEntry_Settability, contentClass:this._contentClass, format:"M/d/yyyy"});
            this._attributeDefinitions.push(criterion);
        }, _nop:null});
    });
}, "ier/widget/dialog/AddDispositionScheduleDialog":function () {
    require({cache:{"url:ier/widget/dialog/templates/AddDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.baseDialog_properties}\" class=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\"></div>\r\n\t</div>\r\n</div>\r\n"}});
    define("ier/widget/dialog/AddDispositionScheduleDialog", ["dojo/_base/declare", "ier/widget/dialog/DispositionScheduleDialog", "dojo/text!./templates/AddDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane"], function (declare, DispositionScheduleDialog, AddDialogContent_html) {
        return declare(DispositionScheduleDialog, {contentString:AddDialogContent_html});
    });
}, "ier/widget/dialog/DocumentInfoDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-style", "ecm/widget/dialog/EditPropertiesDialog", "ier/messages"], function (dojo_declare, lang, domClass, domStyle, ecm_dialog_EditPropertiesDialog, ier_messages) {
        var documentInfoDialog = dojo_declare("ier.widget.dialog.DocumentInfoDialog", [ecm_dialog_EditPropertiesDialog], {postCreate:function () {
            this.inherited(arguments);
            this.set("title", ier_messages.DocumentInfoDialog_objectTitile);
            this.setIntroText(ier_messages.DocumentInfoDialog_objectIntro);
        }, show:function (item, callback, teamspace) {
            this._item = item;
            if (this._item) {
                this._callback = callback;
                this._itemEditPane._editPropertiesDialog = this;
                this._itemEditPane.setItem(item, lang.hitch(this, function () {
                    if (this._canViewItem(this._item)) {
                        domClass.remove(this._viewContentButton.domNode, "dijitHidden");
                    } else {
                        domClass.add(this._viewContentButton.domNode, "dijitHidden");
                    }
                    this.inherited("show", []);
                    domStyle.set(this._breadcrumbContainer.domNode, "display", "none");
                    domStyle.set(this._saveButton, "display", "none");
                    this.resize();
                }), teamspace);
            }
        }});
        return documentInfoDialog;
    });
}, "ier/widget/panes/ReportListingPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/aspect", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialogPane", "ier/widget/layout/ReportsFlyoutPane", "dojo/text!./templates/IERBaseDialogPane.html"], function (dojo_declare, dojo_lang, dojo_construct, dojo_style, dojo_class, dojo_aspect, ier_constants, ier_messages, ier_widget_dialog_IERBaseDialogPane, ier_widget_ReportsFlyoutPane, templateString) {
        return dojo_declare("ier.widget.panes.ReportListingPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, constants:ier_constants, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.title = ier_messages.scheduleReportDialog_selectReport;
        }, createRendering:function () {
            this.reportPane = new ier_widget_ReportsFlyoutPane({hideFilterBox:true, style:"height: 100%; width: 100%", connectOnItemselected:false});
            dojo_construct.place(this.reportPane.domNode, this.containerNode, "only");
            dojo_class.remove(this.reportPane.domNode, "ecmFlyoutPane");
            dojo_class.remove(this.reportPane.domNode, "ierFlyoutPane");
            this.connect(this.reportPane, "onReportDefinitionsRetrieved", function () {
                this.resize();
            });
            this.connect(this.reportPane.reportListing, "onItemSelected", dojo_lang.hitch(this, function (reportDefinition) {
                this.onItemSelected(reportDefinition);
            }), true);
            this.reportPane.loadContent();
            this.resize();
        }, onItemSelected:function (reportDefinition) {
        }, getRepository:function () {
            return this.reportPane.repository;
        }, resize:function () {
            this.inherited(arguments);
            if (this.reportPane) {
                this.reportPane.reportListing.resize();
                this.reportPane.borderContainer.resize();
            }
        }});
    });
}, "url:ier/widget/dialog/templates/AddNamingPatternDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.baseDialog_properties}\" class=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_entityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.namingPatternDialog_patternLevels}\" class=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/NamingPatternLevelPane\" data-dojo-attach-point=\"_levelPane\"></div>\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/admin/templates/RepositoryReportPane.html":"<div class=\"ecmAdminTab ierAdminTab\">\r\n   \t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_saveButton\">${_messages.admin_save}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_resetButton\">${_messages.admin_reset}</button>\r\n\t</div>\r\n\t<div class=\"ierAdminContent\">\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_reportTasksConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span>${_messages.admin_repositoryReportOutputDirectory}:</span>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_repositoryReportOutputDirectory_tooltip}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div class=\"dijitInline\" data-dojo-attach-point=\"_reportOutputSelectorContainer\"></div>\r\n\t\t\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_clearButton\" data-dojo-props=\"disabled: true\">${_messages.clear}</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody></table>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/model/FolderTreeModel":function () {
    define("ier/model/FolderTreeModel", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dnd/Manager", "ecm/model/_ModelObject", "ecm/model/Item", "ecm/model/Task", "ecm/model/Repository", "ecm/model/Desktop", "ier/model/RecentQuickSearch"], function (dojo_declare, dojo_lang, dojo_connect, dojo_DNDManager, ecm_model_ModelObject, ecm_model_Item, ecm_model_Task, ecm_model_Repository, ecm_model_desktop, ier_model_RecentQuickSearch) {
        var FolderTreeModel = dojo_declare("ier.model.FolderTreeModel", [ecm_model_ModelObject], {constructor:function (rootItem, showFoldersOnly, rootFolderId) {
            this.id = "Root:" + rootItem.id;
            this.name = this.id;
            this._loadedItems = {};
            this.repository = null;
            this._rootItem = rootItem;
            this.rootFolderId = rootFolderId;
            this.rootFolder = null;
            this.showFoldersOnly = showFoldersOnly || false;
            this._desktopChangeHandler = dojo_connect.connect(ecm_model_desktop, "onChange", this, "_onDesktopChanged");
        }, filter:null, _repostioryChanged:function (repository) {
            this._onDesktopChanged(repository);
        }, _onDesktopChanged:function (modelObject) {
            if (modelObject == this._rootItem.repository) {
                if (this._rootItem.repository.connected() == false) {
                    this._loadedItems = [];
                    this.reload(this._rootItem);
                } else {
                    for (var i in this._loadedItems) {
                        var item = this._loadedItems[i];
                        this.reload(item);
                    }
                }
            } else {
                if (this.isItem(modelObject) && this.isLoaded(modelObject) && modelObject.repository == this._rootItem.repository) {
                    this.reload(modelObject);
                }
            }
        }, destroy:function () {
            dojo_connect.disconnect(this._desktopChangeHandler);
        }, isLoaded:function (item) {
            return this._loadedItems[this.getIdentity(item)] ? true : false;
        }, getRoot:function (onItem) {
            onItem(this._rootItem);
        }, mayHaveChildren:function (item) {
            if (item instanceof ier.model.RecentQuickSearch && item.hasChildren()) {
                return false;
            }
            if (item instanceof ecm_model_Item) {
                return item.isFolder();
            } else {
                return true;
            }
        }, fetchNextPage:function (pagedResultSet, parentItem, onComplete) {
            this.onProcessingStarted(parentItem);
            pagedResultSet.retrieveNextPage(dojo_lang.hitch(this, function () {
                this.replaceChildren(parentItem, pagedResultSet);
                this.onProcessingComplete(parentItem);
                if (onComplete) {
                    onComplete();
                }
            }));
        }, replaceChildren:function (parentItem, results) {
            var childItems = [].concat(results.getItems());
            this._addPageForwardItem(childItems, results, parentItem);
            this.onChildrenChange(parentItem, childItems);
        }, getChildren:function (parentItem, onComplete) {
            var _this = this;
            if (parentItem && parentItem.getRepository && !parentItem.repository.connected) {
                onComplete([]);
            } else {
                this.onProcessingStarted(parentItem);
                if (parentItem instanceof ecm_model_Repository) {
                    var childItems = [];
                    this.recentQuickSearchesRoot = new ecm_model_ModelObject({id:"rootRecentQuickSearches", name:"Recent Quick Searches"});
                    childItems.push(this.recentQuickSearchesRoot);
                    parentItem.retrieveItem(this.rootFolderId, dojo_lang.hitch(this, function (rootFolder) {
                        this.rootFolder = rootFolder;
                        childItems.push(rootFolder);
                        onComplete(childItems);
                    }));
                } else {
                    if (parentItem.id == "rootRecentQuickSearches") {
                        this._rootItem.getRecentQuickSearches(dojo_lang.hitch(this, function (results) {
                            var childItems = [].concat(results);
                            onComplete(childItems);
                        }));
                    } else {
                        if (parentItem instanceof ier_model_RecentQuickSearch) {
                            var items = parentItem.getItemsClicked();
                            onComplete(items);
                        } else {
                            parentItem.retrieveFolderContents(this.showFoldersOnly, function (results) {
                                var childItems = [].concat(results.getItems());
                                if (parentItem.idPrefix) {
                                    for (var i in childItems) {
                                        var childItem = childItems[i];
                                        childItem.idPrefix = parentItem.idPrefix;
                                    }
                                }
                                _this._addPageForwardItem(childItems, results, parentItem);
                                _this._loadedItems[_this.getIdentity(parentItem)] = parentItem;
                                _this.onProcessingComplete(parentItem);
                                onComplete(childItems);
                            }, null, false, false, this._teamspaceId, this._filterType);
                        }
                    }
                }
            }
        }, _addPageForwardItem:function (children, resultSet, parentItem) {
            var continuable = resultSet.hasContinuation();
            if (continuable) {
                var id = "continuation_" + new Date().getTime();
                var moreLink = new ecm_model_Item(id, ecm.messages.more_paging_link, resultSet.repository, null, null, resultSet, parentItem);
                moreLink.continuationData = resultSet.getContinuationData();
                moreLink.pagedResultSet = resultSet;
                children.push(moreLink);
                parentItem.moreLink = moreLink;
            }
        }, isItem:function (something) {
            if (something && something.isInstanceOf && something.isInstanceOf(ecm_model_Item)) {
                return true;
            }
            return false;
        }, fetchItemByIdentity:function (keywordArgs) {
        }, getIdentity:function (item) {
            if (item.idPrefix) {
                return item.idPrefix + item.id;
            } else {
                return item.id;
            }
        }, getLabel:function (item) {
            return item.name;
        }, reload:function (parent) {
            this.onProcessingStarted(parent);
            var _this = this;
            if (parent.unloadFolderContents != null) {
                parent.unloadFolderContents();
            }
            this.getChildren(parent, function (newChildren) {
                _this.onChildrenChange(parent, newChildren);
                for (var i in newChildren) {
                    _this.onChange(newChildren[i]);
                }
            });
        }, onChange:function (item) {
        }, onChildrenChange:function (parent, newChildrenList) {
        }, onProcessingStarted:function (item) {
        }, onProcessingComplete:function (item) {
        }});
        return FolderTreeModel;
    });
}, "ier/model/actions/RemoveHoldAction":function () {
    define("ier/model/actions/RemoveHoldAction", ["dojo/_base/declare", "ecm/model/Action", "ier/util/util"], function (dojo_declare, ecm_model_action, util) {
        return dojo_declare("ier.model.actions.RemoveHoldAction", [ecm_model_action], {canPerformAction:function (repository, itemList, listType, teamspace, resultSet) {
            var canPerform = this.inherited(arguments);
            if (canPerform) {
                return util.getRealItem(itemList[0]).attributes["OnHold"];
            } else {
                return canPerform;
            }
        }});
    });
}, "ier/widget/dialog/NamingPatternDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/model/ResultSet", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/NamingPatternDialogContent.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane", "ier/widget/panes/NamingPatternLevelPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_model_ResultSet, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.NamingPatternDialog", [ier_dialog_IERBaseDialog], {title:ier_messages.namingPatternDialog_title, contentString:contentString, postCreate:function () {
            this.inherited(arguments);
            this.setIntroText(this._ierMessages.namingPatternDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh02.htm"));
            this.setResizable(true);
            this.addChildPane(this._entityItemPropertiesPane);
            this.addChildPane(this._levelPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
        }, show:function (repository, item) {
            this.inherited(arguments);
            this.repository = repository;
            this.item = item;
            if (!item) {
                this.set("title", this._ierMessages.namingPatternDialog_add_title);
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this._applyButton.domNode.style.display = "none";
            }
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                this._entityItemPropertiesPane.resize();
                this.resize();
            });
            this.resize();
        }, validateInput:function () {
            var valid = this.inherited(arguments);
            this._applyButton.set("disabled", !valid);
            return valid;
        }, _renderDialog:function () {
            this._entityItemPropertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_NamingPattern, defaultNameProperty:ier_constants.Property_PatternName, entityType:ier_constants.EntityType_NamingPattern, hideContentClassSelector:true, item:this.item});
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
            var patternId = (this.item && this.item.id);
            if (patternId) {
                this.repository.getNamingPatternLevels(patternId, dojo_lang.hitch(this, function (levels) {
                    this._levelPane.set("repository", this.repository);
                    this._levelPane.set("levels", levels);
                }));
            } else {
                this._levelPane.set("repository", this.repository);
                this._levelPane.set("levels", []);
            }
        }, onAdd:function (items) {
        }, _save:function (close) {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var patternLevels = this._levelPane.get("levels");
                var patternId = (this.item && this.item.id);
                this.repository.saveNamingPattern(properties, patternLevels, patternId, dojo_lang.hitch(this, function (resultSet) {
                    this.onAdd(resultSet.getItems());
                    if (close) {
                        this.hide();
                    }
                }));
            }
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "ier/widget/dialog/ObjectListDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/event", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-class", "dojo/dom-style", "dojo/keys", "ecm/Messages", "ier/constants", "ier/messages", "ier/util/dialog", "ier/widget/dialog/IERBaseDialog", "ier/widget/dialog/SelectVersionsDialog", "dojo/text!./templates/ObjectListDialog.html", "ier/widget/listView/gridModules/ObjectListRowContextMenu", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "ier/widget/listView/ContentList", "ier/widget/FilePlanSearchBar"], function (dojo_declare, dojo_event, dojo_lang, dojo_array, dojo_class, dojo_style, dojo_keys, ecm_messages, ier_constants, ier_messages, ier_util_dialog, ier_dialog_IERBaseDialog, ier_widget_dialog_SelectVersionsDialog, contentString, ier_widget_listView_ObjectListRowContextMenu) {
        return dojo_declare("ier.widget.dialog.ObjectListDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, ier_messages:ier_messages, messages:ecm_messages, _entityType:null, showVersionSelection:false, autofocus:true, refocus:true, disableContextMenu:false, createLabel:ier_messages.baseDialog_addButton, showCreateButton:false, connectonRowDblClick:true, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "objectListDialog");
            this._objectContentList.multiSelect = false;
            this._selectButton = this.addButton(ier_messages.baseDialog_select, "_onSelectItem", true, true);
            if (this.showCreateButton) {
                this._createButton = this.addButton(this.createLabel, "_onCreateButtonClicked", false, false);
                dojo_style.set(this._createButton.domNode, "float:left");
            }
            this.connect(ecm.model.desktop, "onChange", "_onDesktopChanged");
            if (this.connectonRowDblClick) {
                this.connect(this._objectContentList, "onRowDblClick", "_onSelectItem");
            }
            this.connect(this._objectContentList, "onRowSelectionChange", "onInputChange");
            this.connect(this._filePlanSearchBar, "onSearchButtonClicked", "_onSearchButtonClicked");
            this._objectContentList.setGridExtensionModules(this.getContentListGridModules());
        }, getContentListGridModules:function () {
            var array = [];
            if (!this.disableContextMenu) {
                array.push(ier_widget_listView_ObjectListRowContextMenu);
            }
            return array;
        }, show:function (repository, objectClass) {
            this.inherited("show", []);
            this._objectClass = objectClass;
            this.repository = repository;
            if (!this.title) {
                var classTitle = null;
                if (!this.propertyName) {
                    if (this.contentClass) {
                        classTitle = this.contentClass.name;
                    } else {
                        if (objectClass) {
                            classTitle = objectClass;
                        } else {
                            classTitle = null;
                        }
                    }
                }
                if (classTitle) {
                    this.title = ier_messages.objectSelector_title + classTitle;
                } else {
                    this.title = ier_messages.objectSelector_objectTitle;
                }
            }
            this.setTitle(this.title);
            this.retrieveObjects();
            this.resize();
        }, _filterItems:function () {
            var filterData = this.filter.get("value");
            if (this._filterData != filterData) {
                this._filterData = filterData;
                var resultSet = this._objectContentList.getResultSet();
                if (!filterData || filterData.length == 0) {
                    resultSet.removeFilter();
                } else {
                    resultSet.applyFilter("*" + filterData + "*");
                }
                this._objectContentList.setResultSet(resultSet);
            }
        }, _onDesktopChanged:function (modelObject) {
            var update = false;
            var func = dojo_lang.hitch(this, function (changedModel) {
                if (changedModel.getClassName) {
                    var className = changedModel.getClassName();
                    return className && (className == this._objectClass || className == this.propertyName);
                }
            });
            if (dojo_lang.isArray(modelObject)) {
                update = dojo_array.some(modelObject, func);
            } else {
                update = func(modelObject);
            }
            if (update) {
                this.retrieveObjects();
            }
        }, _onSearchButtonClicked:function (value) {
            this._filterString = value;
            this.retrieveObjects();
        }, onInputChange:function () {
            var valid = this.validate();
            this.setButtonEnabled(this._selectButton, valid);
            return valid;
        }, _onSelectItem:function () {
            var valid = this.onInputChange();
            if (valid) {
                var selectedObjects = this._objectContentList.getSelectedItems();
                if (this.showVersionSelection) {
                    var dialog = new ier_widget_dialog_SelectVersionsDialog();
                    this.connect(dialog, "onSelected", function (item) {
                        this.onSelect([item]);
                        dialog.hide();
                        this.onCancel();
                    });
                    dialog.show(selectedObjects[0], this.repository);
                    ier_util_dialog.manage(dialog);
                } else {
                    this.onSelect(selectedObjects);
                    this.onCancel();
                }
            }
        }, _onCreateButtonClicked:function () {
            var createDialog = this.onCreateButtonClicked();
            if (createDialog && createDialog.onAdd) {
                this.connect(createDialog, "onAdd", function (items) {
                    this._onDesktopChanged(items);
                });
            }
        }, onCreateButtonClicked:function () {
        }, setEntityType:function (entityType) {
            this._entityType = entityType;
        }, setPropertyClassName:function (propertyName) {
            this.propertyName = propertyName;
        }, onSelect:function (selectedItems) {
        }, validate:function () {
            var selectedObjects = this._objectContentList.getSelectedItems();
            var valid = selectedObjects != null && selectedObjects.length > 0;
            return valid;
        }, retrieveObjects:function () {
            var additionalParams = [];
            additionalParams[ier_constants.Param_Type] = this.type;
            if (this.propertyName) {
                additionalParams[ier_constants.Param_PropertyName] = this.propertyName;
                additionalParams[ier_constants.Param_ClassName] = this.contentClass.id;
            }
            this.repository.retrieveObjects(this._objectClass, this._filterString, dojo_lang.hitch(this, function (resultSet) {
                this._objectContentList.setResultSet(resultSet);
                this.resize();
                this.onInputChange();
            }), false, additionalParams);
        }, nop:null});
    });
}, "ier/widget/tasks/TaskDetailsPane":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "dojo/dom-construct", "dojo/date/locale", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ier/constants", "ier/messages", "dojo/text!./templates/TaskDetailsPane.html", "ecm/widget/PropertyGrid"], function (dojo_declare, dojo_domStyle, dojo_construct, dojo_date_locale, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ier_constants, ier_messages, templateString, ecm_grid_PropertyGrid) {
        return dojo_declare("ier.widget.tasks.TaskDetailsPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            if (item != this.item) {
                this.item = item;
                this._createTaskDetailsGrid(item);
            }
        }, _createTaskDetailsGrid:function (item) {
            if (this.taskPropGrid) {
                this.taskPropGrid.destroy();
            }
            var data = {};
            var resources = {};
            var propertiesArray = [];
            for (var name in item.attributes) {
                var value = item.attributes[name];
                var label = this.getLabel(name);
                value = this.getValue(name, value);
                if (value && name != "taskRequest" && name != "errors" && label != null) {
                    data[name] = value;
                    resources[name + "Label"] = label || name;
                    propertiesArray.push(name);
                }
            }
            var taskProperties = propertiesArray.join(",");
            this.taskPropGrid = new ecm_grid_PropertyGrid({data:data, properties:taskProperties, labelKeySuffix:"Label", resources:resources});
            this.taskPropGrid.startup();
            this.taskPropGrid.placeAt(this.gridContainer, "first");
            this.resize();
        }, getLabel:function (name) {
            if (name == "ier_reportName") {
                return ier_messages.reportDefDialog_reportNameFieldName;
            } else {
                var message = ier_messages[name];
                if (message) {
                    return message;
                }
            }
            return null;
        }, getValue:function (name, value) {
            if (name == "type") {
                return this.getTaskTypeDisplayName(value);
            } else {
                return this.item.getDisplayValue(name);
            }
        }, getTaskTypeDisplayName:function (type) {
            if (type == ier_constants.TaskType_ReportClass) {
                return ier_messages.reports;
            } else {
                if (type == ier_constants.TaskType_DispositionSweepClass) {
                    return ier_messages.dispositionSweeps;
                } else {
                    if (type == ier_constants.TaskType_HoldSweepClass) {
                        return ier_messages.holdSweeps;
                    } else {
                        return type;
                    }
                }
            }
        }, _addValue:function (name, item, data, resources, propertiesArray) {
            var value = item.taskRequest.specificTaskRequest[name];
            var label = this.getLabel(name);
            if (value) {
                data[name] = value;
                resources[name + "Label"] = label || name;
                propertiesArray.push(name);
            }
        }});
    });
}, "url:ier/widget/panes/templates/HoldConditionPane.html":"<div class=\"ierHoldConditionPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\" data-dojo-attach-point=\"_conditionTabContainer\">\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.record}\" data-dojo-attach-point=\"_recordTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordInfo: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm1\" data-dojo-props=\"showContentContains: true\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton1\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane1\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList1\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordCategory}\" data-dojo-attach-point=\"_recordCategoryTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordCategory: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm2\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton2\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane2\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList2\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordFolder}\" data-dojo-attach-point=\"_recordFolderTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordFolder: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm3\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton3\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane3\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList3\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordVolume}\" data-dojo-attach-point=\"_recordVolumeTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordVolume: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm4\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton4\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane4\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList4\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/panes/FilePlanRepositoryPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/widget/layout/_RepositorySelectorMixin", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/FilePlanRepositoryPane.html"], function (dojo_declare, dojo_lang, ecm_widget_layout_RepositorySelectorMixin, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.FilePlanRepositoryPane", [ier_widget_dialog_IERBaseDialogPane, ecm_widget_layout_RepositorySelectorMixin], {templateString:templateString, setRepository:function (repository) {
            this.repository = repository;
            if (repository) {
                this.repositorySelector.getDropdown().set("value", repository.id);
            }
        }, loadContent:function () {
        }, createRendering:function (repository, item, isReadOnly) {
            this.createRepositorySelector();
            this.setRepositoryTypes("p8");
            this.doRepositorySelectorConnections();
            this.addChildWidget(this.repositorySelector);
            this.setPaneDefaultLayoutRepository();
            if (this.repositorySelector.getNumRepositories() > 1) {
                this._repositorySelectorArea.appendChild(this.repositorySelector.domNode);
            }
            if (repository) {
                this.setRepository(repository);
            }
            if (item || isReadOnly) {
                this.repositorySelector.getDropdown().set("disabled", true);
            }
        }, destroy:function () {
            if (this.repositorySelector) {
                this.repositorySelector.destroyRecursive();
            }
            this.inherited(arguments);
        }, _nop:null});
    });
}, "ier/widget/CognosViewer":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/string", "dojo/request/iframe", "dojo/dom-class", "dojo/dom-style", "ecm/model/Request", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/util/dialog", "ier/util/util", "ier/widget/BaseReportViewer", "ier/messages", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/text!./templates/CognosViewer.html", "dijit/layout/ContentPane", "dijit/layout/BorderContainer"], function (dojo_declare, dojo_lang, dojo_string, dojo_request_iframe, dojo_domClass, dojo_domStyle, ecm_model_Request, ecm_widget_dialog_MessageDialog, ier_constants, ier_util_dialog, ier_util, ier_widget_BaseReportViewer, ier_messages, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, templateString) {
        return dojo_declare("ier.widget.CognosViewer", [ier_widget_BaseReportViewer, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {widgetsInTemplate:true, templateString:templateString, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
        }, createRendering:function (onComplete) {
            if (onComplete) {
                onComplete();
            }
        }, view:function (reportResultJobId, onComplete) {
            this.reportServerName = ecm.model.desktop.reportSettings.cognosGatewayServerName;
            this.cognosReportPath = ecm.model.desktop.reportSettings.cognosReportPath;
            if (this.cognosReportPath == null || this.cognosReportPath == "") {
                this.cognosReportPath = ier_constants.DEFAULT_COGNOS_REPORT_PATH;
            }
            if (!this.reportServerName) {
                ier_util_dialog.showMessage(messages.report_noReportServerName);
            } else {
                this.enableWaitState();
                var reportURL = dojo_string.substitute(ier_constants.IER_COGNOS_REPORT_URL, [this.reportServerName, this.cognosReportPath, this.reportName, reportResultJobId]);
                this.viewer.src = reportURL;
                if (this.viewer.attachEvent) {
                    this.viewer.attachEvent("onload", dojo_lang.hitch(this, function () {
                        this.disableWaitState();
                    }));
                } else {
                    this.viewer.onload = dojo_lang.hitch(this, function () {
                        this.disableWaitState();
                    });
                }
            }
            this.mainContainer.resize();
            if (onComplete) {
                onComplete();
            }
        }, enableWaitState:function () {
            dojo_domClass.add(document.body, "ecmWait");
            dojo_domStyle.set(this.reportLoadingText, "display", "");
            dojo_domStyle.set(this.resultsPane.domNode, "display", "none");
        }, disableWaitState:function () {
            dojo_domStyle.set(this.reportLoadingText, "display", "none");
            dojo_domStyle.set(this.resultsPane.domNode, "display", "");
            dojo_domClass.remove(document.body, "ecmWait");
        }, close:function (onComplete) {
            if (this.reportResultJobId) {
                var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    if (onComplete) {
                        onComplete();
                    }
                }));
                params.requestParams[ier_constants.Param_ReportResultsIds] = this.reportResultJobId;
                params.requestParams[ier_constants.Param_TableNames] = this.tableName;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_DeleteReportResults, ier_constants.PostEncoding, params);
            } else {
                if (onComplete) {
                    onComplete();
                }
            }
        }});
    });
}, "ier/widget/FilePlanSelectorTree":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/Tree", "ecm/LoggerMixin", "ecm/model/Desktop", "ecm/model/Repository", "ier/model/FilePlan", "ier/model/FilePlansTreeModel", "dojo/text!./templates/FilePlanSelectorTree.html"], function (dojo_declare, dojo_lang, dojo_connect, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_Tree, ecm_LoggerMixin, ecm_model_desktop, ecm_model_Repository, ier_model_FilePlan, ier_model_FilePlansTreeModel, templateString) {
        return dojo_declare("ier.widget.FilePlanSelectorTree", [ecm_LoggerMixin, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {templateString:templateString, widgetsInTemplate:true, _style:"tree", getIconClass:null, getRowClass:null, postCreate:function () {
            this.inherited(arguments);
            this._createRendering();
            var repository = ecm_model_desktop.getAuthenticatingRepository();
            this.setRepository(repository);
        }, setRepository:function (repository) {
            var itemNode = this._tree.getNodesByItem(repository);
            if (repository.isIERLoaded() && itemNode && itemNode.length > 0) {
                this._tree._expandNode(itemNode[0]);
            }
        }, getTreeModel:function () {
            return this._treeModel;
        }, clearSelection:function () {
            if (this._tree && this._tree.selectedItems) {
                var selectedNodes = this._tree.getNodesByItem(this._tree.selectedItems[0]);
                if (selectedNodes && selectedNodes.length > 0) {
                    selectedNodes[0].setSelected(false);
                }
            }
        }, refreshRoot:function () {
            this._createTree();
        }, setStyle:function (style) {
            this._style = style;
        }, _createRendering:function () {
            this._createTree();
        }, _createTree:function () {
            if (this._dropdown) {
                this._dropdown.destroy();
            }
            if (this._tree) {
                this._tree.destroy();
            }
            if (!this._treeModel) {
                this._treeModel = new ier_model_FilePlansTreeModel();
            }
            if (this._treeOnClickHandler) {
                dojo_connect.disconnect(this._treeOnClickHandler);
            }
            if (this._treeOnOpenHandler) {
                dojo_connect.disconnect(this._treeOnOpenHandler);
            }
            this.getIconClass = this.getIconClass ? this.getIconClass : function (item, opened) {
                if (item instanceof ecm_model_Repository) {
                    return "ecmRepositoryIcon";
                } else {
                    if (item instanceof ier_model_FilePlan) {
                        return "filePlanIcon";
                    } else {
                        return "";
                    }
                }
            };
            this.getRowClass = this.getRowClass ? this.getRowClass : function (item, opened) {
                if (item instanceof ecm_model_Repository) {
                    return "ecmFolderNotSelectable";
                }
            }, this._tree = new dijit_Tree({model:this._treeModel, showRoot:false, persist:false, getIconClass:this.getIconClass, getRowClass:this.getRowClass, style:"padding:5px"});
            this._treeOnClickHandler = this.connect(this._tree, "onClick", "_onTreeClick");
            this._treeOnOpenHandler = this.connect(this._tree, "onOpen", "_onTreeNodeOpen");
            this.domNode.appendChild(this._tree.domNode);
        }, _onTreeClick:function (item, node, evt) {
            if (item instanceof ecm_model_Repository) {
                this._tree._expandNode(node);
            } else {
                if (item instanceof ier_model_FilePlan) {
                    this.onFilePlanSelected(item.repository, item);
                } else {
                }
            }
        }, _onTreeNodeOpen:function (item, node) {
        }, onFilePlanSelected:function (repository, fileplan) {
        }});
    });
}, "url:ier/widget/tasks/templates/TasksListingPane.html":"<div data-dojo-attach-point=\"containerNode\" style=\"padding: 0; margin-right:5px; margin-bottom:3px; width:100%;height:90%;\">\t\r\n\t<div data-dojo-type=\"ier/widget/listView/ContentList\" data-dojo-attach-point=\"taskContentList\"></div>\r\n</div>\r\n", "ier/widget/dialog/SelectVersionsDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Request", "ier/messages", "ier/util/util", "ier/constants", "ier/model/ResultSet", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/SelectVersionsDialogContent.html", "dijit/layout/ContentPane", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_lang, dojo_class, Request, ier_messages, ier_util, ier_constants, ResultSet, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.SelectVersionsDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, selectedObject:null, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierMediumDialog");
            this.set("title", ier_messages.selectVersionDialog_title);
            this.setResizable(true);
            this.workflowVersionsList.multiSelect = false;
            this._selectButton = this.addButton(ier_messages.baseDialog_select, "_onClickSelect", true, true);
        }, show:function (item, repository) {
            this.inherited("show", []);
            this.item = item;
            this.repository = repository;
            this._getWorkflowVersions();
        }, _setupGridConnections:function () {
            if (this._onSelectionChangeHandler) {
                this.disconnect(this._onSelectionChangeHandler);
            }
            if (this._onRowDblClickHandler) {
                this.disconnect(this._onRowDblClickHandler);
            }
            this._onSelectionChangeHandler = this.connect(this.workflowVersionsList, "onRowSelectionChange", function (selectedItems) {
                this.selectedObject = selectedItems[0];
                this.validateInput();
            });
            this._onRowDblClickHandler = this.connect(this.workflowVersionsList, "onRowDblClick", function (item) {
                this.onSelected(item);
                this.validateInput();
                this.hide();
            });
        }, _getWorkflowVersions:function () {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                var resultSet = new ResultSet(response);
                this.workflowVersionsList.setResultSet(resultSet);
                this._setupGridConnections();
            }));
            params.requestParams[ier_constants.Param_EntityId] = this.item.id;
            Request.postPluginService(ier_constants.ApplicationPlugin, "ierGetWorkflowVersions", ier_constants.PostEncoding, params);
        }, onSelected:function (item) {
        }, validateInput:function () {
            if (this._selectButton) {
                this.setButtonEnabled(this._selectButton, this.selectedObject != null);
            }
        }, _onClickSelect:function () {
            this.onSelected(this.selectedObject);
            this.hide();
        }});
    });
}, "url:ier/widget/templates/FolderSelector.html":" <div class=\"ecmFolderSelector\">\r\n \t<div dojoType=\"ier.widget.FolderTree\"\r\n\t\tdojoAttachPoint=\"_folderTree\"\r\n\t\tdojoAttachEvent=\"onItemSelected: onFolderSelect, onItemDblClick: _onTreeDblClick\"\r\n\t\tshowFoldersOnly=\"true\"\r\n\t\tenableCtxMenu=\"false\"\r\n\t\tclass=\"folderTree\">\r\n\t</div>\r\n\t<div class=\"includeSubfolders\" \r\n\t\t\tdojoAttachPoint=\"_includeSubfoldersNode\" \r\n\t\t\tid=\"${id}_includeSubfoldersNode\">\r\n\t\t<input dojoType=\"dijit.form.CheckBox\" \r\n\t\t\tdojoAttachPoint=\"_includeSubfoldersCheckBox\" \r\n\t\t\t\tid=\"${id}_includeSubfolders\" value=\"\" type=\"checkbox\"/>\r\n\t\t<label for=\"${id}_includeSubfolders\" >${_messages.include_subfolders}</label>\t\t\r\n\t</div>\r\n</div>", "ier/widget/search/SearchInDropDown":function () {
    define(["dojo/_base/declare", "ecm/widget/search/SearchInDropDown", "ecm/widget/FolderSelector", "ier/widget/FolderSelector"], function (dojo_declare, ecm_widget_SearchInDropDown, ecm_widget_FolderSelector, ier_widget_FolderSelector) {
        return dojo_declare("ier.widget.search.SearchInDropDown", [ecm_widget_SearchInDropDown], {allowOnlySameDomainRepositories:false, useIERFolderSelector:false, getAvailableRepositoriesForSelection:function () {
            if (this.allowOnlySameDomainRepositories) {
                var repositories = [];
                for (var i in ecm.model.desktop.repositories) {
                    var repository = ecm.model.desktop.repositories[i];
                    if (repository.serverName == this.repository.serverName) {
                        repositories.push(repository);
                    }
                }
                return repositories;
            } else {
                return ecm.model.desktop.repositories;
            }
        }, createFolderSelector:function (params) {
            var methodName = "createFolderSelector";
            if (this.useIERFolderSelector) {
                return new ier_widget_FolderSelector(params);
            } else {
                return new ecm_widget_FolderSelector(params);
            }
        }});
    });
}, "url:ier/widget/dialog/templates/ObjectListDialog.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" class=\"ierDialogContent\"\r\n\tdata-dojo-attach-point=\"mainContainer\" \r\n\tdata-dojo-props=\"gutters:false\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" \r\n\t\tdata-dojo-props=\"region:'top'\" class=\"filterContainer\">\r\n\t\t<div class=\"filterArea\" data-dojo-attach-point=\"filterArea\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/FilePlanSearchBar\" \r\n\t\t\t\tdata-dojo-attach-point=\"_filePlanSearchBar\" class=\"filter\" aria-label=\"${ier_messages.search_for}\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" \r\n\t\tdata-dojo-props=\"region:'center'\">\r\n\t\t<div data-dojo-type=\"ier/widget/listView/ContentList\" \r\n\t\t\tdata-dojo-attach-point=\"_objectContentList\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/panes/templates/EntityItemGeneralPane.html":"<div class=\"entityItemGeneralPane\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr data-dojo-attach-point=\"_entityItemSaveInRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\" data-dojo-attach-point=\"_targetLocationRequired\">*</span>\r\n\t\t\t\t\t${_messages.baseDialog_saveIn}:\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_targetLocation\"\r\n\t\t\t\t\t\tclass=\"folderSelectorControl\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_folderSelectorDropDown\"\r\n\t\t\t\t\t\tdata-dojo-type=\"ecm.widget._FolderSelectorDropDown\"\r\n\t\t\t\t\t\tdata-dojo-props=\"isRequired:true\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n</div>\r\n", "ier/widget/tasks/ReportTaskDetailsPane":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "dojo/dom-construct", "dojo/date/locale", "ier/constants", "ier/messages", "ier/widget/tasks/TaskDetailsPane", "dojo/text!./templates/TaskDetailsPane.html", "ecm/widget/PropertyGrid"], function (dojo_declare, dojo_domStyle, dojo_construct, dojo_date_locale, ier_constants, ier_messages, ier_widget_TaskDetailsPane, templateString, ecm_grid_PropertyGrid) {
        return dojo_declare("ier.widget.tasks.ReportTaskDetailsPane", [ier_widget_TaskDetailsPane], {createRendering:function (item) {
            this.inherited(arguments);
            if (this.informationPane) {
                var reportParametersTab = this.informationPane.getTab("reportParameters");
                if (reportParametersTab) {
                    reportParametersTab.createRendering(item);
                }
            }
        }});
    });
}, "ier/widget/admin/AdminGrid":function () {
    define(["dojo/_base/declare", "dojo/_base/event", "dojo/_base/lang", "dojo/keys", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/focus", "dijit/form/Button", "dijit/registry", "dojox/grid/DataGrid", "ecm/MessagesMixin", "ecm/widget/admin/ActionMenu", "ier/widget/admin/AdminCheckBox", "dojo/text!./templates/AdminGrid.html", "dijit/layout/BorderContainer"], function (dojo_declare, dojo_event, dojo_lang, dojo_keys, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_focus, dijit_form_Button, dijit_registry, dojox_grid_DataGrid, ecm_MessagesMixin, ecm_widget_admin_ActionMenu, ier_widget_admin_AdminCheckBox, templateString) {
        return dojo_declare("ier.widget.admin.AdminGrid", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_MessagesMixin], {templateString:templateString, widgetsInTemplate:true, isResultSetSorted:true, postCreate:function () {
            this.inherited(arguments);
        }, destroy:function () {
            if (this._actionMenuCreator) {
                this._actionMenuCreator.destroy();
            }
            this.inherited(arguments);
        }, setActions:function (actions) {
            this._actions = actions;
        }, setData:function (structure, store, actions) {
            this.setActions(actions);
            this._theGrid = new dojox_grid_DataGrid({region:"center", store:store, structure:structure, selectionMode:"extended", plugins:{}}, document.createElement("div"));
            if (this.isResultSetSorted) {
                this.connect(this._theGrid, "_onFetchComplete", function () {
                    if (this._theGrid.sortInfo == 0) {
                        this._theGrid.sortInfo = 2;
                        this._theGrid.views.views[0].renderHeader();
                    }
                });
            }
            this._theGrid.doheaderclick = dojo_lang.hitch(this, "doheaderclick", this._theGrid);
            this.borderContainer.addChild(this._theGrid);
            this._theGrid.startup();
            this.resize();
            this.connect(this._theGrid, "onRowDblClick", function (evt) {
                this.onRowDblClick(this._theGrid.getItem(evt.rowIndex), evt);
            });
            this.connect(this._theGrid.selection, "onChanged", function (evt) {
                this.onSelectionChanged(this._theGrid.selection.getSelected(), evt);
            });
            this.connect(this._theGrid, "onRowContextMenu", "_doContextMenu");
            this.connect(this._theGrid, "onKeyDown", function (evt) {
                if (evt.keyCode === dojo_keys.F10 && evt.shiftKey) {
                    this._doContextMenu(evt);
                    dojo_event.stop(evt);
                } else {
                    if (evt.ctrlKey && evt.keyCode == 65) {
                        dojo_event.stop(evt);
                        this._theGrid.selection.selectRange(0, this._theGrid.get("rowCount") - 1);
                    } else {
                        if (evt.keyCode == dojo_keys.ENTER || evt.keyCode == dojo_keys.SPACE) {
                            var widget = dijit_registry.getEnclosingWidget(evt.target);
                            if (widget && (widget instanceof ier_widget_admin_AdminCheckBox || widget instanceof dijit_form_Button)) {
                                this.handleClickAction(widget);
                            } else {
                                if (widget) {
                                    var cellNode = widget.getCellNode(this._theGrid.selection.selectedIndex, evt.target.cellIndex);
                                    if (cellNode && cellNode.firstChild) {
                                        cellWidget = dijit_registry.getEnclosingWidget(cellNode.firstChild);
                                        this.handleClickAction(cellWidget);
                                    }
                                }
                            }
                            this._theGrid.focus.setFocusIndex(this._theGrid.selection.selectedIndex, evt.target.cellIndex);
                        }
                    }
                }
            });
        }, handleClickAction:function (widget) {
            if (widget && (widget instanceof ier_widget_admin_AdminCheckBox || widget instanceof dijit_form_Button)) {
                if (widget.get("disabled") == false) {
                    if (widget instanceof ier_widget_admin_AdminCheckBox) {
                        widget.onClickAction(widget, widget.get("checked"));
                    } else {
                        widget.clickAction(widget);
                    }
                    if (widget) {
                        dijit_focus.focus(widget);
                        widget.domNode.focus();
                    }
                }
            }
        }, onAction:function (items, action) {
        }, onRowDblClick:function (modelItem, evt) {
        }, onSelectionChanged:function (selectedModelItems) {
        }, clearSelection:function () {
            this._theGrid.selection.clear();
        }, getSelected:function () {
            return this._theGrid.selection.getSelected();
        }, setStore:function (store) {
            this._theGrid.store.close();
            this._theGrid.sortInfo = 0;
            this._theGrid.setStore(store);
        }, filter:function (data) {
            this.clearSelection();
            this._theGrid.queryOptions = {ignoreCase:true};
            this._theGrid.filter(data);
        }, _doContextMenu:function (evt) {
            if (evt.cellIndex < 0) {
                return;
            }
            var byKey = (evt.keyCode === dojo_keys.F10);
            if (!byKey && !this._theGrid.selection.isSelected(evt.rowIndex)) {
                this._theGrid.selection.clear();
                this._theGrid.selection.select(evt.rowIndex);
            }
            var items = this.getSelected();
            if (items.length > 0) {
                if (!this._actionMenuCreator) {
                    this._actionMenuCreator = new ecm_widget_admin_ActionMenu();
                    this.connect(this._actionMenuCreator, "onAction", "onAction");
                }
                var menu = this._actionMenuCreator.createMenu(this._actions, items);
                var coords = (!byKey ? {x:evt.pageX, y:evt.pageY} : null);
                menu._openMyself({target:evt.target, coords:coords});
            }
        }, doheaderclick:function (grid, evt) {
            if (evt.cellNode && !evt.cell._props.nosort) {
                grid.setSortIndex(evt.cell.index);
            }
            grid.onHeaderClick(evt);
        }, resize:function () {
            if (this._theGrid) {
                this._theGrid.resize();
            }
            this.borderContainer.resize();
        }, getGrid:function () {
            return this._theGrid;
        }, getStore:function () {
            return this._theGrid.store;
        }});
    });
}, "url:ier/widget/admin/templates/AdminGrid.html":"<div class=\"ecmAdminGrid\" dojoAttachPoint=\"containerNode\" style=\"padding:0;\">\r\n\t<div dojoType=\"dijit.layout.BorderContainer\" dojoAttachPoint=\"borderContainer\" gutters=\"false\" baseClass=\"ecmBorderBaseClass\" style=\"width: 100%; height: 100%;\"> \r\n\t\t<!-- grid goes here -->\r\n\t</div>\r\n</div>", "ier/widget/layout/ReportsFlyoutPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-construct", "dojo/dom-class", "ecm/widget/layout/_RepositorySelectorMixin", "ecm/widget/layout/_LaunchBarDialogPane", "ier/widget/ReportListing", "ier/constants", "ier/messages", "ier/util/util", "dijit/form/Button", "dojo/text!./templates/FlyoutPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_lang, dojo_domStyle, dojo_domConstruct, dojo_domClass, ecm_widget_layout_RepositorySelectorMixin, ecm_widget_layout_LaunchBarDialogPane, ier_widget_ReportListing, ier_constants, ier_messages, ier_util, dijit_Button, templateString, dijit_BorderContainer, dijit_ContentPane) {
        return dojo_declare("ier.widget.layout.ReportsFlyoutPane", [ecm_widget_layout_LaunchBarDialogPane, ecm_widget_layout_RepositorySelectorMixin], {widgetsInTemplate:true, templateString:templateString, hideFilterBox:false, connectOnItemselected:true, messages:null, postCreate:function () {
            this.inherited(arguments);
            this.setRepositoryTypes("p8");
            this.createRepositorySelector();
            this.doRepositorySelectorConnections();
            if (this.repositorySelector.getNumRepositories() > 1) {
                this.topPane.domNode.appendChild(this.repositorySelector.domNode);
            }
            dojo_domClass.add(this.repositorySelector.domNode, "ierReportFilePlanSelector");
            this.refreshButton = new dijit_Button({label:ier_messages.refresh, onClick:dojo_lang.hitch(this, function () {
                this.reportListing.refreshListing();
            })});
            dojo_domClass.add(this.refreshButton.domNode, "ierRefreshButton");
            this.topPane.domNode.appendChild(this.refreshButton.domNode);
            this.noRepositoryNode = dojo_domConstruct.create("div", {innerHTML:ier_messages.reportPane_selectAValidFilePlanRepository, style:"display:none; text-align:center; margin-top:30px"});
            this.noReportNode = dojo_domConstruct.create("div", {innerHTML:ier_messages.report_noReportsInstalled, style:"display:none; text-align:center; margin-top:30px"});
            this.reportListing = new ier_widget_ReportListing({hideFilterBox:this.hideFilterBox});
            this.bottomPane.domNode.appendChild(this.noRepositoryNode);
            this.bottomPane.domNode.appendChild(this.noReportNode);
            this.bottomPane.domNode.appendChild(this.reportListing.domNode);
            dojo_domStyle.set(this.reportListing.domNode, "height", "100%");
            this.reportListing.resize();
            if (this.connectOnItemselected) {
                this.connect(this.reportListing, "onItemSelected", "onItemSelected");
            }
            this.connect(this.reportListing, "onReportDefinitionsRetrieved", "onReportDefinitionsRetrieved");
        }, loadContent:function () {
            this.inherited(arguments);
            this.setPaneDefaultLayoutRepository();
            if (this.repository && this.repository.connected) {
                this.setRepository(this.repository);
            }
        }, onItemSelected:function (selectedItem) {
            ier_util.runReport(this.repository, selectedItem.id);
            this.closePopup();
        }, setRepository:function (repository) {
            if (repository) {
                this.repository = repository;
                if (this.repository.isIERLoaded()) {
                    this._setRepository();
                } else {
                    this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                        this._setRepository();
                    }));
                }
            }
        }, _setRepository:function () {
            if (this.repository.isFilePlanRepository()) {
                dojo_domStyle.set(this.noReportNode, "display", "none");
                dojo_domStyle.set(this.noRepositoryNode, "display", "none");
                dojo_domStyle.set(this.reportListing.domNode, "display", "");
                this.isLoaded = true;
                this.reportListing.setRepository(this.repository);
                this.reportListing.resize();
                if (this.repositorySelector.getDropdown().options[0].value == "_blankRepository") {
                    this.repositorySelector.getDropdown().removeOption("_blankRepository");
                }
                this.repositorySelector.getDropdown().set("value", this.repository.id);
                this.refreshButton.set("disabled", false);
            } else {
                dojo_domStyle.set(this.noRepositoryNode, "display", "");
                dojo_domStyle.set(this.noReportNode, "display", "none");
                dojo_domStyle.set(this.reportListing.domNode, "display", "none");
                this.repositorySelector.getDropdown().options.unshift({value:"_blankRepository", label:ier_messages.reportPane_selectAFilePlanRepositoryLabel});
                this.repositorySelector.getDropdown().set("value", "_blankRepository");
                this.refreshButton.set("disabled", true);
            }
        }, onReportDefinitionsRetrieved:function (reportDefinitions) {
            var reportitems = reportDefinitions.length;
            if (reportitems == null || reportitems.length == 0) {
                dojo_domStyle.set(this.noReportNode, "display", "");
                dojo_domStyle.set(this.reportListing.domNode, "display", "none");
            } else {
                dojo_domStyle.set(this.noReportNode, "display", "none");
                dojo_domStyle.set(this.reportListing.domNode, "display", "");
            }
        }});
    });
}, "ier/model/ReportResult":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/LoggerMixin", "ecm/model/_ModelObject", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_LoggerMixin, ecm_model_ModelObject, ier_constants, ier_util) {
        return dojo_declare("ier.model.ReportResult", [ecm_model_ModelObject], {createDate:null, creator:null, isCurrentUserCreator:function () {
        }, deleteResults:function () {
        }});
    });
}, "ier/widget/TilesList":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/keys", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/registry", "ecm/LoggerMixin", "ier/widget/TilesListItem", "ier/messages", "dojo/text!./templates/TilesList.html", "ecm/widget/FilterTextBox", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_array, dojo_lang, dojo_domAttr, dojo_domClass, dojo_domConstruct, dojo_style, dojo_keys, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_registry, ecm_LoggerMixin, ier_widget_TilesListItem, ier_messages, template) {
        return dojo_declare("ier.widget.TilesList", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:template, widgetsInTemplate:true, canTabToItem:false, store:null, query:null, listItems:null, selectedItem:null, _resizeHandle:null, hideFilterBox:false, sortAttributeKey:null, constructor:function () {
            this.messages = ecm.messages;
        }, postCreate:function () {
            this.inherited(arguments);
            this._fetch();
            this.connect(this.filter, "_onInput", "_filterItems");
            this.connect(this.filter, "_setValueAttr", "_filterItems");
            if (this.hideFilterBox) {
                dojo_style.set(this.filterArea, "display", "none");
            }
        }, destroy:function () {
            this.filter.destroy();
            this.clearList();
            if (this.actions) {
                dojo_array.forEach(this.actions, function (action, index) {
                    action.destroy();
                });
            }
            this.inherited(arguments);
        }, postMixInProperties:function () {
            this._filterText = ier_messages.localFilter;
        }, getItems:function () {
            return this.listItems;
        }, _filterItems:function () {
            var filterData = this.filter.get("value");
            if (this._filterData != filterData) {
                if (this.query == null) {
                    this.query = {"name":"*" + filterData + "*"};
                } else {
                    if (this.query.title) {
                        this.query.title = "*" + filterData + "*";
                    } else {
                        this.query.name = "*" + filterData + "*";
                    }
                }
                this._filterData = filterData;
                this._fetch();
            }
        }, resize:function (newSize, currentSize) {
            clearTimeout(this._resizeHandle);
            this._resizeHandle = setTimeout(dojo_lang.hitch(this, function () {
                this._asynchResize(newSize, currentSize);
            }), 100);
        }, _asynchResize:function (newSize, currentSize) {
            if (this.domNode) {
                this.bc.resize(arguments);
            }
        }, setStore:function (jsonStore) {
            if (this.store) {
                this.store.close();
                delete this.store;
            }
            this.store = jsonStore;
            this._fetch();
        }, setActions:function (actions) {
            if (this.actions) {
                dojo_array.forEach(this.actions, function (action, index) {
                    action.destroy();
                });
            }
            if (actions != null) {
                var self = this;
                self.actions = actions;
                dojo_array.forEach(this.actions, function (action) {
                    dojo_domClass.add(action.domNode, "action");
                    dojo_domConstruct.place(action.domNode, self.actionsArea, "last");
                    action.startup();
                });
            }
        }, setQuery:function (query) {
            this.query = query;
            this._fetch();
        }, _fetch:function () {
            if (this.store != null) {
                try {
                    if (this.query != null) {
                        this.store.fetch({query:this.query, queryOptions:{ignoreCase:true}, sort:this.sortAttributeKey ? this.sortAttributeKey : null, onBegin:dojo_lang.hitch(this, "_onFetchBegin"), onComplete:dojo_lang.hitch(this, "_onFetchComplete"), onError:dojo_lang.hitch(this, "_onFetchError")});
                    } else {
                        this.store.fetch({onBegin:dojo_lang.hitch(this, "_onFetchBegin"), onComplete:dojo_lang.hitch(this, "_onFetchComplete"), onError:dojo_lang.hitch(this, "_onFetchError"), sort:this.sortAttributeKey ? this.sortAttributeKey : null});
                    }
                }
                catch (e) {
                    this._onFetchError(e);
                }
            }
        }, _onFetchBegin:function () {
            this.clearList();
        }, clearList:function () {
            if (this.listItems && this.listItems.length > 0) {
                for (var i = 0; i < this.listItems.length; i++) {
                    this.listItems[i].destroy();
                }
            }
            this.listItems = [];
        }, _onFetchComplete:function (items) {
            if (items && items.length > 0) {
                this.listDiv = dojo_domConstruct.create("div", {});
                for (var i in items) {
                    if (items[i]) {
                        var listItem = new ier_widget_TilesListItem({item:items[i], store:this.store, id:this.id + items[i].id});
                        this.connect(listItem, "onListItemClick", "_onListItemClick");
                        this.connect(listItem, "onListItemDoubleClick", "_onListItemDoubleClick");
                        if (this.canTabToItem) {
                            domAttr.set(listItem.domNode, "tabindex", 0);
                        }
                        this.listItems.push(listItem);
                        listItem.setItem(items[i]);
                        dojo_domConstruct.place(listItem.domNode, this.listDiv, "last");
                    }
                }
                dojo_domConstruct.place(this.listDiv, this.bottomContainer.domNode, "only");
            }
            this.onFetchComplete();
        }, _onFetchError:function (e) {
            throw e;
            this.logError(e);
            this.onFetchError(e);
        }, onFetchComplete:function (e) {
        }, onFetchError:function (e) {
        }, addItem:function (item) {
            if (this.store) {
                if (!this.listDiv) {
                    this.listDiv = dojo_domConstruct.create("div", {});
                    dojo_domConstruct.place(this.listDiv, this.bottomContainer.domNode, "only");
                }
                var obj = this.store.newItem(item);
                obj.originalItem = item;
                this.store.save();
                var listItem = new ier_widget_TilesListItem({item:obj, store:this.store, id:obj.id});
                this.connect(listItem, "onListItemClick", "_onListItemClick");
                this.connect(listItem, "onListItemDoubleClick", "_onListItemDoubleClick");
                if (this.canTabToItem) {
                    domAttr.set(listItem.domNode, "tabindex", 0);
                }
                this.listItems.push(listItem);
                listItem.setItem(obj);
                dojo_domConstruct.place(listItem.domNode, this.listDiv, "last");
            }
        }, removeItem:function (id) {
            for (var i in this.listItems) {
                var item = this.listItems[i].getItem();
                if (id == this.store.getValue(item, "id")) {
                    this.store.deleteItem(item);
                    this.listItems[i].destroy();
                    this.listItems.splice(i, 1);
                    this.store.save();
                    break;
                }
            }
        }, updateItem:function (item) {
            this.removeItem(item.id);
            this.addItem(item);
        }, getSelectedItem:function () {
            if (this.selectedItem && this.selectedItem.item) {
                return this.store.getValue(this.selectedItem.item, "originalItem");
            }
            return this.selectedItem;
        }, onItemSelected:function (selectedItem) {
        }, _onListItemKey:function (evt) {
            if (evt.charOrCode == dojo_keys.ENTER || evt.charOrCode == " ") {
                this._onListItemClick(evt);
            }
        }, _onListItemClick:function (evt) {
            var tilesListItem = dijit_registry.getEnclosingWidget(evt.target);
            if (tilesListItem != null) {
                if (this.selectedItem && this.selectedItem.domNode) {
                    dojo_domClass.remove(this.selectedItem.domNode, "ierTilesListItemSelected");
                }
                this.selectedItem = tilesListItem;
                dojo_domClass.add(this.selectedItem.domNode, "ierTilesListItemSelected");
                this.onItemSelected(this.getSelectedItem());
            }
        }, _onListItemDoubleClick:function (evt) {
            var tilesListItem = dijit_registry.getEnclosingWidget(evt.target);
            if (tilesListItem != null) {
                if (this.selectedItem) {
                    dojo_domClass.remove(this.selectedItem.domNode, "ierTilesListItemSelected");
                }
                this.selectedItem = tilesListItem;
                dojo_domClass.add(this.selectedItem.domNode, "ierTilesListItemSelected");
                this.onItemSelected(this.selectedItem);
                this.onListItemDoubleClick(this.selectedItem);
            }
        }, onListItemDoubleClick:function (selectedItem) {
        }});
    });
}, "ier/widget/dialog/AddLocationDialog":function () {
    define(["dojo/_base/declare", "ier/widget/dialog/LocationDialog", "dojo/text!./templates/AddDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane"], function (declare, LocationDialog, AddDialogContent_html) {
        return declare(LocationDialog, {contentString:AddDialogContent_html});
    });
}, "url:ier/widget/templates/DispositionPropagationSelector.html":"<div data-dojo-type=\"dijit.layout.ContentPane\">\r\n\t<select data-dojo-attach-point=\"_dispositionPropagationSelect\" name=\"${id}_propagationSelect\" data-dojo-attach-event=\"onChange:onChange\" \r\n\tdata-dojo-type=\"dijit/form/Select\">\r\n    <option value=\"${constants.SchedulePropagation_None}\">${messages.entityItemDispositionPane_propagation_none}</option>\r\n    <option value=\"${constants.SchedulePropagation_ToAllInheritingEntities}\" selected=\"selected\">${messages.entityItemDispositionPane_propagation_toAllInheritingEntities}</option>\r\n    <option value=\"${constants.SchedulePropagation_ToImmediateSubContainersAndInheritingEntities}\">${messages.entityItemDispositionPane_propagation_toImmediateChildrenAndInheritingEntities}</option>\r\n\t<option value=\"${constants.SchedulePropagation_ToAllNonAssignedSubContainers}\">${messages.entityItemDispositionPane_propagation_toAllNonAssignedSubContainers}</option>\r\n\t</select>\r\n\t<div data-dojo-attach-point=\"propagationHoverHelp\" data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.entityItemDispositionPane_noPropagationHoverHelp}\"></div>\r\n</div>\r\n\r\n", "ier/widget/layout/ConfigurePane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/event", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/keys", "dijit/form/Select", "ecm/widget/dialog/MessageDialog", "ecm/widget/layout/_RepositorySelectorMixin", "ecm/widget/layout/_LaunchBarPane", "ier/constants", "ier/messages", "ier/model/FilePlan", "ier/util/dialog", "dojo/text!./templates/ConfigurePane.html", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/DocInfo", "ier/widget/listView/modules/ConfigureToolbar", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "idx/layout/BorderContainer", "ecm/widget/Breadcrumb", "ier/widget/listView/ContentList", "ier/widget/FilePlanSearchBar"], function (dojo_declare, dojo_array, dojo_connect, dojo_event, dojo_lang, dojo_class, dojo_construct, dojo_style, dojo_keys, dijit_form_Select, ecm_widget_dialog_MessageDialog, ecm_widget_layout_RepositorySelectorMixin, ecm_widget_layout_LaunchBarPane, ier_constants, ier_messages, ier_model_FilePlan, ier_util_dialog, templateString, ier_widget_listView_RowContextMenu, ier_widget_listView_DocInfo, ier_widget_listView_ConfigureToolbar) {
        return dojo_declare("ier.widget.layout.ConfigurePane", [ecm_widget_layout_LaunchBarPane, ecm_widget_layout_RepositorySelectorMixin], {templateString:templateString, _messages:ier_messages, widgetsInTemplate:true, resultSet:null, postCreate:function () {
            this.inherited(arguments);
            this.doContentListConnections();
            this.setRepositoryTypes("p8");
            this.createRepositorySelector();
            this.doRepositorySelectorConnections();
            this.connect(ecm.model.desktop, "onChange", function (modelObject) {
                if (this.repository && this.repository.isFilePlanRepository()) {
                    this._onFilePlanChanged(modelObject, dojo_lang.hitch(this, function (filePlan) {
                        if (filePlan.deleted) {
                            this.repository.clearFilePlans();
                        }
                    }));
                }
            });
        }, setBreadCrumbData:function () {
            var configureLinksWidget = this.getConfigureLinksSelectorMenuForBreadCrumb();
            var breadcrumbData = new Array();
            breadcrumbData.push({domNode:this.repositorySelector.domNode, preserveDom:true, title:ier_messages.repository});
            breadcrumbData.push({domNode:configureLinksWidget, preserveDom:true, title:ier_messages.configure});
            this.breadcrumb.setData(breadcrumbData);
        }, getContentListGridModules:function () {
            var array = [];
            array.push(ier_widget_listView_RowContextMenu);
            return array;
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ier_widget_listView_ConfigureToolbar});
            array.push({moduleClass:ier_widget_listView_DocInfo, showPreview:false});
            return array;
        }, destroy:function () {
            if (this._repositoryOnConfigureHandle) {
                this.disconnect(this._repositoryOnConfigureHandle);
                delete this._repositoryOnConfigureHandle;
            }
            this.inherited(arguments);
        }, setParams:function (params) {
            if (params && params.entityType && params.className && params.repository) {
                this.entityType = params.entityType;
                this.setClassName(params.className);
                this.repository = params.repository;
                this.setRepository(this.repository, true);
            }
        }, getConfigureLinksSelectorMenuForBreadCrumb:function () {
            var selectOptions = [];
            selectOptions.push({label:"<div class=\"onHoldIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_holds, value:ier_constants.ClassName_Hold});
            selectOptions.push({label:"<div class=\"locationIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_locations, value:ier_constants.ClassName_Location});
            selectOptions.push({label:"<div class=\"namingPatternIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_namingPatterns, value:ier_constants.ClassName_NamingPattern});
            selectOptions.push({label:"<div class=\"filePlanIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_filePlans, value:ier_constants.ClassName_FilePlan});
            selectOptions.push({label:"<div class=\"reportIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_reportDefinitions, value:ier_constants.ClassName_ReportDefinition});
            selectOptions.push({label:"<div class=\"dispositionScheduleIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_dispositionSchedules, value:ier_constants.ClassName_DispositionSchedule});
            selectOptions.push({label:"<div class=\"dispositionActionIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_actions, value:ier_constants.ClassName_DispositionAction});
            selectOptions.push({label:"<div class=\"dispositionTriggerIcon configureIconSelectOptions\"></div>" + ier_messages.configurePane_triggers, value:ier_constants.ClassName_DispositionTrigger});
            this.linkDropdown = new dijit_form_Select({options:selectOptions, id:"configureSelector_" + this.id, "aria-label":ier_messages.configure});
            dojo_class.add(this.linkDropdown.dropDown.domNode, "ecmScrollMenu");
            this.connect(this.linkDropdown, "onChange", function (value) {
                if (value != this.className) {
                    this.setClassName(value);
                    this.setRepository(this.repository, true);
                    this._clearFilter();
                }
            });
            var node = dojo_construct.create("div");
            dojo_construct.place(this.linkDropdown.domNode, node, "only");
            return node;
        }, _clearFilter:function () {
            this._filterString = null;
            this._filePlanSearchBar.set("value", "");
        }, loadContent:function () {
            this.folderContents.setContentListModules(this.getContentListModules());
            this.folderContents.setGridExtensionModules(this.getContentListGridModules());
            this.setBreadCrumbData();
            this.setPaneDefaultLayoutRepository();
            if (this.repository) {
                if (!this.className) {
                    this.setClassName(ier_constants.ClassName_Hold);
                }
                this.setRepository(this.repository, true);
            }
            this.isLoaded = true;
        }, reset:function () {
            this.setRepository(this.repository, true);
        }, setRepository:function (repository) {
            if (repository && this.selected) {
                if (repository.isIERLoaded()) {
                    this._connectToConnections(repository);
                    this._setRepositoryCompleted(repository);
                } else {
                    repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                        this._connectToConnections(repository);
                        this._setRepositoryCompleted(repository);
                    }));
                }
            }
            if (repository == null && this.repository) {
                this.folderContents.reset();
                if (this.linkDropdown) {
                    this.linkDropdown.destroy();
                }
            }
        }, _connectToConnections:function (repository) {
            if (this._repositoryOnConfigureHandle) {
                this.disconnect(this._repositoryOnConfigureHandle);
            }
            if (repository) {
                this._repositoryOnConfigureHandle = this.connect(repository, "onConfigure", dojo_lang.hitch(this, function (repository, items) {
                    this._setRepositoryCompleted(repository, items, true);
                }));
            }
        }, _setRepositoryCompleted:function (repository, items, noClearFilter) {
            if (repository != null) {
                if (repository.isFilePlanRepository()) {
                    this.repository = repository;
                    var refresh = true;
                    if (items) {
                        var className = this.className;
                        refresh = dojo_array.some(items, function (item) {
                            if (item && item.getClassName() == className) {
                                return true;
                            }
                        });
                    }
                    if (refresh) {
                        if (!noClearFilter) {
                            this._clearFilter();
                        }
                        this._retrieveCustomObjects();
                    }
                } else {
                    ier_util_dialog.showMessage(ier_messages.no_fileplans_available);
                    this.repositorySelector.getDropdown().set("value", this.repository.id);
                }
            } else {
                this.folderContents.setRepository(null);
            }
        }, _onFilePlanChanged:function (modelObject, callback) {
            var func = dojo_lang.hitch(this, function (changedModel) {
                if (changedModel instanceof ier_model_FilePlan) {
                    callback(changedModel);
                }
            });
            if (dojo_lang.isArray(modelObject)) {
                dojo_array.forEach(modelObject, func);
            } else {
                func(modelObject);
            }
        }, setClassName:function (className) {
            this.className = className;
            this.linkDropdown.set("value", this.className);
        }, _onSearchButtonClicked:function (value) {
            this._filterString = value;
            this._retrieveCustomObjects();
        }, _retrieveCustomObjects:function (sortColum) {
            var entityType = this.className == ier_constants.ClassName_ReportDefinition ? ier_constants.EntityType_ReportDefinition : null;
            this.repository.retrieveObjects(this.className, this._filterString, dojo_lang.hitch(this, function (resultSet) {
                resultSet.sortFunc = dojo_lang.hitch(this, this._retrieveCustomObjects);
                this.resultSet = resultSet;
                this._setToolbarDef();
                this.folderContents.setResultSet(resultSet);
                resultSet.onChange(resultSet);
                this.resize();
            }), true, null, entityType, sortColum);
        }, _setToolbarDef:function () {
            if (this.className && this.resultSet) {
                if (this.className == ier_constants.ClassName_Hold) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERHoldsConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_Location) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERLocationsConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_DispositionSchedule) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERDispositionSchedulesConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_DispositionAction) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERActionsConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_DispositionTrigger) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERTriggersConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_FilePlan) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERFilePlansConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_NamingPattern) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERNamingPatternsConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_RecordType) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERRecordTypesConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_TransferMapping) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERTranferMappingsConfigureToolbarMenu;
                }
                if (this.className == ier_constants.ClassName_ReportDefinition) {
                    this.resultSet.toolbarDef = ier_constants.MenuType_IERReportDefinitionsConfigureToolbarMenu;
                }
            }
        }, doContentListConnections:function () {
            this.connect(this._filePlanSearchBar, "onSearchButtonClicked", "_onSearchButtonClicked");
        }});
    });
}, "ier/widget/dialog/CloseRecordContainerDialog":function () {
    require({cache:{"url:ier/widget/dialog/templates/CloseRecordContainerDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<br>\r\n   \t<div class=\"field\">\r\n   \t\t<label for=\"${id}_reasonFor\" >\r\n   \t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n   \t\t\t${_ierMessages.closeRecordContainerDialog_reasonForClosePrompt}:\r\n   \t\t</label>\r\n   \t\t<br>\r\n   \t\t<input id=\"${id}_reasonFor\"\r\n   \t\t\tdata-dojo-type=\"ecm.widget.ValidationTextBox\" class=\"ierDropDownInput\"\r\n   \t\t\tstyle=\"margin-top:5px;\"\r\n   \t\t\tdata-dojo-props=\"required:true\"\r\n   \t\t\tdata-dojo-attach-point=\"_reasonForClose\"\r\n\t\t\tdata-dojo-attach-event=\"onKeyUp: _onNameChange\">\r\n\t</div>\r\n</div>\r\n"}});
    define("ier/widget/dialog/CloseRecordContainerDialog", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/Messages", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/CloseRecordContainerDialogContent.html", "dijit/layout/ContentPane", "ecm/widget/ValidationTextBox"], function (dojo_declare, dojo_lang, dojo_class, ecm_messages, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.CloseRecordContainerDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _container:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierVerySmallDialog");
            this.okButton = this.addButton(ier_messages.closeRecordContainerDialog_closeButton, "_onClickClose", false, true);
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.setTitle(ier_messages.closeRecordContainerDialog_title);
            this.setIntroText(ier_messages.closeRecordContainerDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh08.htm"));
            this.okButton.set("disabled", true);
            this.repository = repository;
            this._items = items;
            this._reasonForClose.set("missingMessage", ecm_messages.property_missingMessage);
            var promptMessage = ecm_messages.properties_type_string_tooltip;
            promptMessage += ", " + ecm_messages.properties_maxLength_tooltip + 64;
        }, _onNameChange:function () {
            this.okButton.set("disabled", this._reasonForClose.get("value").length > 0 ? false : true);
        }, _getReasonLength:function (repository) {
            var contentClass = repository.getContentClass(ier_constants.ClassName_RecordCategory);
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                for (var i in attributeDefinitions) {
                    var attributeDefinition = attributeDefinitions[i];
                    if (attributeDefinition.id == ier_constants.Property_ReasonForClose) {
                        this._reasonForClose.set("maxLength", attributeDefinition.maxLength);
                        break;
                    }
                }
            }));
        }, _onClickClose:function () {
            var reasonForClose = this._reasonForClose.get("value");
            var items = this._items;
            for (var i in items) {
                items[i].close(reasonForClose, dojo_lang.hitch(this, function (recordContainer) {
                    recordContainer.onChange([recordContainer]);
                    this.onCancel();
                }));
            }
        }});
    });
}, "ier/widget/dialog/AddNamingPatternDialog":function () {
    define(["dojo/_base/declare", "ier/widget/dialog/NamingPatternDialog", "dojo/text!./templates/AddNamingPatternDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane"], function (declare, NamingPatternDialog, AddNamingPatternDialogContent_html) {
        return declare(NamingPatternDialog, {contentString:AddNamingPatternDialogContent_html});
    });
}, "ier/util/dialog":function () {
    define(["ecm/widget/dialog/MessageDialog"], function (MessageDialog) {
        var dialogs = [];
        function cleanup() {
            for (var i = dialogs.length - 1; i >= 0; i--) {
                var dialog = dialogs[i];
                if (!dialog.open) {
                    dialogs.splice(i, 1);
                    dialog.destroyRecursive();
                }
            }
        }
        function manage(dialog) {
            cleanup();
            if (dialog) {
                dialogs.push(dialog);
            }
        }
        function showMessage(text) {
            var dialog = new MessageDialog({text:text});
            dialog.show();
            manage(dialog);
        }
        return {cleanup:cleanup, manage:manage, showMessage:showMessage};
    });
}, "ier/widget/layout/JobsFlyoutPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/data/ItemFileReadStore", "dijit/form/Button", "dijit/ToolbarSeparator", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/layout/_LaunchBarDialogPane", "ier/widget/TilesList", "ier/messages", "ier/widget/ListTypeSelector", "dojo/text!./templates/FlyoutPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_array, dojo_lang, dojo_data_ItemFileReadStore, dijit_form_Button, dijit_ToolbarSeparator, ecm_model_desktop, ecm_model_Request, ecm_widget_layout_LaunchBarDialogPane, ier_widget_TilesList, ier_messages, ier_widget_ListTypeSelector, templateString) {
        return dojo_declare("ier.widget.layout.JobsFlyoutPane", [ecm_widget_layout_LaunchBarDialogPane], {widgetsInTemplate:true, templateString:templateString, messages:ier_messages, store:null, postCreate:function () {
        }, loadContent:function () {
            this.inherited(arguments);
            if (!this.isLoaded) {
                this._createActivityStream();
                this.isLoaded = true;
            }
        }, _createActivityStream:function () {
            var options = [];
            options.push({text:"All", value:"*", isSelected:"true"});
            options.push({text:"DispositionSweep", value:"DispositionSweep"});
            options.push({text:"HoldSweep", value:"HoldSweep"});
            options.push({text:"Report", value:"Report"});
            this._tileList = new ier_widget_TilesList();
            this.bottomPane.domNode.appendChild(this._tileList.domNode);
            var listTypeSelector = new ier_widget_ListTypeSelector(options);
            this._loadActions("JobFlyoutToolbar", listTypeSelector, this._tileList);
            this.connect(listTypeSelector, "onChange", function (selected) {
                if (this.query == null) {
                    this.query = {"type":selected};
                } else {
                    this.query.type = selected;
                }
                this._tileList.setQuery(this.query);
            });
            var jsonURL = ecm_model_Request.getPluginResourceUrl("IERApplicationPlugin", "ier/widget/test/status.json");
            var store = new dojo_data_ItemFileReadStore({url:jsonURL});
            this._tileList.setStore(store);
        }, _loadActions:function (toolbarName, selector, list) {
            var buttons = [];
            if (selector) {
                buttons.push(selector);
            }
            if (toolbarName) {
                ecm_model_desktop.loadMenuActions(toolbarName, dojo_lang.hitch(this, function (actions) {
                    dojo_array.forEach(actions, function (action) {
                        if (action.id == "Separator") {
                            var separator = new dijit_ToolbarSeparator();
                            buttons.push(separator);
                        } else {
                            var toolbarButton = new dijit_form_Button({label:action.name});
                            toolbarButton.action = action;
                            if (selector != null && selector.declaredClass == "ecm.widget.RepositorySelector") {
                                this.connect(toolbarButton, "onClick", function () {
                                    var selectedItems = [];
                                    if (list.getSelectedItem() != null) {
                                        selectedItems.push(list.getSelectedItem().item);
                                    }
                                    var dropDown = selector.getDropdown();
                                    if (dropDown != null) {
                                        action.performAction(ecm_model_desktop.getRepository(dropDown.get("value")), selectedItems);
                                    }
                                });
                            } else {
                                this.connect(toolbarButton, "onClick", function () {
                                    if (list.getSelectedItem() != null) {
                                        var selectedItems = [];
                                        selectedItems.push(list.getSelectedItem().item);
                                        action.performAction(ecm_model_desktop.getRepository(list.getSelectedItem().item.repositoryId), selectedItems);
                                    }
                                });
                            }
                            buttons.push(toolbarButton);
                        }
                    });
                    list.setActions(buttons);
                }));
            } else {
                list.setActions(buttons);
            }
        }});
    });
}, "url:ier/widget/admin/templates/RepositorySecurityPane.html":"<div class=\"ecmAdminTab ierAdminTab\">\r\n\t<div style=\"margin: 10px;\">${_messages.objectStoreSecurityDialog_warning}</div>\r\n\t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreDefaultsButton\">${_messages.admin_restoreDefaults}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_runButton\">${_messages.admin_runSecurityScript}</button>\r\n\t</div>\r\n\t<div class=\"ierAdminContent\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemObjectStoreSecurityPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemObjectStoreSecurityPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/panes/DDReportSweepPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/data/ItemFileWriteStore", "dojo/store/DataStore", "dijit/registry", "ecm/model/Desktop", "ecm/widget/UnselectableFolder", "ecm/widget/FolderSelectorCallback", "ier/widget/dialog/IERBaseDialogPane", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/ObjectSelector", "ier/model/DefensibleDisposalSchedule", "dojo/text!./templates/DDReportSweepPane.html", "ecm/widget/HoverHelp", "idx/form/NumberTextBox", "ecm/widget/ValidationTextBox", "ier/widget/_FolderSelectorDropDown", "ier/widget/FilePlanRepositorySelector", "ier/widget/MultipleFoldersSelector"], function (dojo_declare, dojo_lang, dojo_domConstruct, dojo_style, dojo_class, ItemFileWriteStore, DataStore, dijit_registry, Desktop, ecm_UnselectableFolder, ecm_FolderSelectorCallback, IERBaseDialogPane, ier_constants, ier_messages, ier_util, ObjectSelector, DefensibleDisposalSchedule, templateString) {
        return dojo_declare("ier.widget.panes.DDReportSweepPane", [IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, folder:null, properties:null, postCreate:function () {
            this.title = ier_messages.scheduleDDReportSweep_title;
            this._repositorySelector.setFilePlanRepositories(Desktop.getP8Repositories());
            this.connect(this._repositorySelector, "onSelect", dojo_lang.hitch(this, function (repositories) {
                var repository = repositories[0];
                if (repository && repository != this.repository) {
                    this.setRepository(repository);
                    if (this._repositorySelector.getDropdown().options[0].value == "_blankRepository") {
                        this._repositorySelector.getDropdown().removeOption("_blankRepository");
                    }
                }
            }));
            this.connect(this._reportOnlySelector, "onChange", dojo_lang.hitch(this, function (value) {
                if (value == "true") {
                    this._disableReportOnlyFields(true);
                } else {
                    if (!this.workflowSelector || this.repository != this.workflowSelector.repository || !this.workflowSelector.repository) {
                        this._createReportOnlyFields();
                    }
                    this._disableReportOnlyFields(false);
                }
            }));
            this._repositorySelector.getDropdown().options.unshift({value:"_blankRepository", label:ier_messages.reportPane_selectAFilePlanRepositoryLabel});
            this._repositorySelector.getDropdown().set("value", "_blankRepository");
            var folderSelectorCallback = new ecm_FolderSelectorCallback(ier_constants.Privilege_CanDeclareRecordToContainer, ier_messages.declareRecordDialog_notAllowedToDeclareToFolder);
            this._containerRecordSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            this.connect(this._containerRecordSelector, "onFolderSelected", "onInputChange");
            this._disableFields(true);
        }, setRepository:function (repository, callback) {
            if (repository && repository != this.repository) {
                if (repository.isIERLoaded()) {
                    this._setRepository(repository, callback);
                } else {
                    repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                        this._setRepository(repository, callback);
                    }));
                }
            }
            if (repository == null) {
                this._disableFields(true);
            }
        }, _setRepository:function (repository, callback) {
            this.repository = repository;
            this._disableFields(false);
            this._multipleFoldersSelector.createRendering(this.repository);
            if (this._reportOnlySelector.get("value") == "false") {
                this._createReportOnlyFields();
            }
            var declareRecord = this.repository.defensibleSweepSettings.defensibleSweepAlwaysDeclareRecord;
            if (!declareRecord || declareRecord == "false") {
                this._containerRecordSelector.setDisabled(true);
                dojo_style.set(this._containerDeclareRecordToSelectorRow, "display", "none");
            } else {
                this._containerRecordSelector.setDisabled(false);
                dojo_style.set(this._containerDeclareRecordToSelectorRow, "display", "");
            }
            if (callback) {
                callback(repository);
            }
        }, createRendering:function (repository, item) {
            if (this.repository) {
                this._repositorySelector.getDropdown().set("value", this.repository.id);
            }
        }, validate:function () {
            if (this.repository == null || this._advancedDaysTextBox.get("value") == null || this._reportOnlySelector.get("value") == null) {
                return false;
            }
            this._connectionPointSelector.validate();
            if (this._reportOnlySelector.get("value") == "false") {
                if (this._connectionPointSelector.get("value") == null || this._connectionPointSelector.get("value") == "" || this._needApprovalSelector.get("value") == null || this.workflowSelector.get("value") == null || this.workflowSelector.get("value") == "" || (!this._containerRecordSelector.getDisabled() && this._containerRecordSelector.get("value") == null)) {
                    return false;
                }
            }
            return true;
        }, isValidationRequired:function () {
            return true;
        }, _disableFields:function (disable) {
            this._advancedDaysTextBox.set("disabled", disable);
            this._reportOnlySelector.set("disabled", disable);
            this._multipleFoldersSelector.set("disabled", disable);
            if (this._reportOnlySelector.get("value") == "false") {
                this._disableReportOnlyFields(disable);
            }
        }, _disableReportOnlyFields:function (disable) {
            this._connectionPointSelector.set("disabled", disable);
            this._needApprovalSelector.set("disabled", disable);
            if (this.workflowSelector) {
                this.workflowSelector.set("disabled", disable);
            }
            if (this._containerRecordSelector) {
                if (disable) {
                    dojo_class.add(this._containerRecordSelector.domNode, "dijitComboBoxDisabled");
                } else {
                    dojo_class.remove(this._containerRecordSelector.domNode, "dijitComboBoxDisabled");
                }
                this._containerRecordSelector.setDisabled(disable);
            }
        }, _createReportOnlyFields:function () {
            if (this.repository) {
                if (this._containerRecordSelector) {
                    this._containerRecordSelector.setRoot(this.repository);
                    dojo_style.set(this._containerRecordSelectorTextBox.domNode, "display", "none");
                    dojo_style.set(this._containerRecordSelector.domNode, "display", "");
                    var propertiesRecordContainerId = this.properties ? this.properties.containerToDeclareRecordId : null;
                    var recordContainerId = propertiesRecordContainerId ? propertiesRecordContainerId : this.repository.defensibleSweepSettings.defensibleDisposalRecordContainerId;
                    if (recordContainerId) {
                        this.repository.retrieveItem(recordContainerId, dojo_lang.hitch(this, function (itemRetrieved) {
                            this._containerRecordSelector.setSelected(itemRetrieved);
                        }));
                    }
                }
                this._createWorkflowSelector(this.repository);
                this._connectionPoints = null;
                this._setConnectionPoints();
            }
        }, onInputChange:function () {
        }, _createWorkflowSelector:function (repository) {
            if (!this.workflowSelector) {
                this.workflowSelector = new ObjectSelector({label:ier_messages.scheduleDDReportSweep_containers, labelId:this.id + "_workflowSelector", showVersionSelection:true, type:ier_constants.WorkflowType_BasicSchedule, disableContextMenu:true, });
                dojo_domConstruct.place(this.workflowSelector.domNode, this._workflowSelectorContainer, "only");
            }
            this.workflowSelector.setRepository(repository);
            this.workflowSelector.setObjectClassName(ier_constants.ClassName_WorkflowDefinition);
            if (this.workflowSelector) {
                this.connect(this.workflowSelector, "onChange", "onInputChange");
            }
            var propertiesWorkflowId = this.properties ? this.properties.defensibleDisposalWorkflowId : null;
            var defaultWorkflowId = propertiesWorkflowId ? propertiesWorkflowId : this.repository.defensibleSweepSettings.defensibleDisposalWorkflowId;
            if (defaultWorkflowId) {
                this.repository.retrieveItem(defaultWorkflowId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this.workflowSelector.setSelectedItem(itemRetrieved);
                }), "WorkflowDefinition");
            }
            dojo_style.set(this._workflowDisabledButton.domNode, "display", "none");
        }, _setConnectionPoints:function () {
            if (this._connectionPoints == null) {
                var repositoryId = this.repository.id;
                var params = {action:"list", repositoryId:repositoryId};
                ecm.model.Request.invokeServiceAPI("p8/listConnectionPoints", null, {requestParams:params, requestCompleteCallback:dojo_lang.hitch(this, function (response) {
                    if (response != null) {
                        this._connectionPoints = response.list;
                        this._setConnectionPointSelector();
                        this._setConnectPointValue();
                    }
                })});
            } else {
                this._setConnectionPointSelector();
                this._setConnectPointValue();
            }
        }, _setConnectPointValue:function () {
            var connPoint = null;
            if (this.properties && this.properties.connectionPoint) {
                connPoint = this.properties.connectionPoint;
            } else {
                if (this.repository.connectionPoint) {
                    var cp = this.repository.connectionPoint.split(":");
                    if (cp && cp[0]) {
                        connPoint = cp[0];
                    }
                } else {
                    connPoint = null;
                }
            }
            this._connectionPointSelector.set("value", connPoint);
        }, _setConnectionPointSelector:function () {
            if (this._connectionPointSelector.store && this._connectionPointSelector.store.store) {
                this._connectionPointSelector.store.store.close();
            }
            var storeData = [];
            for (var i = 0; i < this._connectionPoints.length; i++) {
                var connPoint = this._connectionPoints[i].split(":");
                if (connPoint && connPoint[0]) {
                    storeData.push({"value":connPoint[0], "label":connPoint[0]});
                }
            }
            this._connectionPointSelector.store = new DataStore({"store":new ItemFileWriteStore({data:{identifier:"value", label:"label", items:storeData}})});
        }, _setPropertiesAttr:function (properties) {
            if (properties) {
                this.properties = properties;
                this.setRepository(properties.repository, dojo_lang.hitch(this, function (repository) {
                    this._repositorySelector.getDropdown().set("value", repository.id);
                    if (this._multipleFoldersSelector) {
                        var propertiesRecordContainerId = this.properties ? this.properties.containerIds : null;
                        if (propertiesRecordContainerId) {
                            this.repository.retrieveItem(propertiesRecordContainerId, dojo_lang.hitch(this, function (itemRetrieved) {
                                this._multipleFoldersSelector.addSelectedFolder(itemRetrieved);
                            }));
                        }
                    }
                    this._advancedDaysTextBox.set("value", properties.advancedDays);
                    this._reportOnlySelector.set("value", properties.reportOnly);
                    this._needApprovalSelector.set("value", properties.needApproval);
                }));
            }
        }, _getPropertiesAttr:function () {
            var reportOnly = this._reportOnlySelector.get("value");
            return {repository:this.repository, containerIds:this._multipleFoldersSelector.get("value"), containerNames:this._multipleFoldersSelector.getSelectedNames(), advancedDays:this._advancedDaysTextBox.get("value"), reportOnly:this._reportOnlySelector.get("value"), connectionPoint:reportOnly == "false" ? this._connectionPointSelector.get("value") : null, needApproval:reportOnly == "false" ? this._needApprovalSelector.get("value") : null, defensibleDisposalWorkflowId:reportOnly == "false" ? this.workflowSelector.get("value") : null, containerToDeclareRecordId:reportOnly == "false" && this._containerRecordSelector ? this._containerRecordSelector.get("value") : null};
        }});
    });
}, "url:ier/widget/admin/templates/DDContainerSettingsPane.html":"<div class=\"ierAdminContent ierCommonPropertiesPane ecmCommonPropertiesPane\">\r\n\t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreDefaultsButton\">${_messages.admin_restoreDefaults}:</button>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_ddContainerSettings_performanceTuning}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_threadCountTextBox\">${_messages.admin_ddContainerSettings_threadCount}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_threadCountHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_threadCountTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_threadCountTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_queryPageSizeTextBox\">${_messages.admin_ddContainerSettings_queryPageSize}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_queryPageSizeHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_queryPageSizeTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_queryPageSizeTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_updateBatchSizeTextBox\">${_messages.admin_ddContainerSettings_updateBatchSize}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_updateBatchSizeHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_updateBatchSizeTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_updateBatchSizeTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_contentSizeLimitTextBox\">${_messages.admin_ddContainerSettings_contentSizeLimit}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_contentSizeLimitHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_contentSizeLimitTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_contentSizeLimitTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_linkCacheSizeLimitTextBox\">${_messages.admin_ddContainerSettings_linkCacheSizeLimit}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_linkCacheSizeLimitHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_linkCacheSizeLimitTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_linkCacheSizeLimitTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_onHoldContainerCacheSizeLimitTextBox\">${_messages.admin_ddContainerSettings_OnHoldContainerCacheSizeLimit}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_OnHoldContainerCacheSizeLimitHoverHelp}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_onHoldContainerCacheSizeLimitTextBox\" data-dojo-type=\"dijit/form/NumberTextBox\" data-dojo-attach-point=\"_onHoldContainerCacheSizeLimitTextBox\" \r\n\t\t\t\t\t\tdata-dojo-props=\"constraints:{min:1,places:0}, trim: true, intermediateChanges: true, required: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/layout/templates/FlyoutPane.html":"<div class=\"ecmFlyoutPane ierFlyoutPane\">\r\n\t<div data-dojo-attach-point=\"borderContainer\" data-dojo-type=\"dijit.layout.BorderContainer\" class=\"flyoutContainer\" data-dojo-props=\"gutters:false\" style=\"width: 98%\">\r\n\t\t<div data-dojo-attach-point=\"topPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\" class=\"flyoutContainerTop\">\r\n\t\t\t<div class=\"title\">${title}</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"bottomPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\" class=\"flyoutContainerBottom\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/tasks/ReportTaskResultsPane":function () {
    require({cache:{"url:ier/widget/tasks/templates/TaskPane.html":"<div class=\"taskPane\" style=\"width: 100%; height: 100%;\" dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"container\" style=\"padding-top: 10px;\">\r\n\t</div>\r\n</div>"}});
    define("ier/widget/tasks/ReportTaskResultsPane", ["dojo/_base/declare", "dojo/_base/json", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-construct", "dijit/registry", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/form/Button", "ecm/LoggerMixin", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/util", "dojo/text!./templates/TaskPane.html"], function (dojo_declare, dojo_json, dojo_lang, dojo_domStyle, dojo_construct, dijit_registry, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, Button, ecm_LoggerMixin, ecm_dialog_MessageDialog, ier_constants, ier_messages, ier_util, templateString) {
        return dojo_declare("ier.widget.tasks.ReportTaskResultsPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            this.item = item;
            var resultsContainer = dojo_construct.create("div", {"class":"ierCommonPropertiesPane ecmCommonPropertiesPane"});
            if (item.results) {
                var tableNode = dojo_construct.toDom("<table class=\"propertyTable\" role=\"presentation\"></table>");
                var report = item.results.reportResultDocumentId;
                if (report) {
                    var tr = dojo_construct.create("tr");
                    var td1 = dojo_construct.create("td", {"class":"propertyRowLabel", "style":"width: 5%;"});
                    var label = dojo_construct.create("label", {"for":this.id + "_" + "viewReportResult", "innerHTML":item.taskRequest.specificTaskRequest[ier_constants.Param_ReportTitle]});
                    td1.appendChild(label);
                    var td2 = dojo_construct.create("td", {"class":"propertyRowLabel"});
                    var button = new Button({label:ier_messages.taskResultsPane_downloadReport, reportId:report, onClick:dojo_lang.hitch(this, function (evt) {
                        var button = dijit_registry.getEnclosingWidget(evt.target);
                        var repository = ier_util.getRepository(item.results.reportResultRepositorySymbolicName, item.taskRequest[ier_constants.Param_CE_EJB_URL]);
                        repository.retrieveItem(button.reportId, dojo_lang.hitch(this, function (itemRetrieved) {
                            ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                                if (actionsHandler) {
                                    actionsHandler["actionDownloadAll"](repository, [itemRetrieved]);
                                }
                            }));
                        }));
                    })});
                    var button2 = new Button({label:ier_messages.taskResultsPane_viewReportLink, reportId:report, onClick:dojo_lang.hitch(this, function (evt) {
                        var button = dijit_registry.getEnclosingWidget(evt.target);
                        var repository = ier_util.getRepository(item.results.reportResultRepositorySymbolicName, item.taskRequest[ier_constants.Param_CE_EJB_URL]);
                        repository.retrieveItem(button.reportId, dojo_lang.hitch(this, function (itemRetrieved) {
                            ecm.model.desktop.getActionsHandler(dojo_lang.hitch(this, function (actionsHandler) {
                                if (actionsHandler) {
                                    actionsHandler["actionShowHyperlink"](repository, [itemRetrieved], null, null, null, null);
                                }
                            }));
                        }));
                    })});
                    td2.appendChild(button.domNode);
                    td2.appendChild(button2.domNode);
                    tr.appendChild(td1);
                    tr.appendChild(td2);
                    tableNode.appendChild(tr);
                }
                resultsContainer.appendChild(tableNode);
                dojo_construct.place(resultsContainer, this.container, "only");
            }
        }});
    });
}, "ier/widget/layout/FavoritePane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Desktop", "ecm/model/Favorite", "ecm/widget/ActionMenu", "ecm/widget/FavoritesTree", "ecm/widget/layout/FavoritesPane", "ecm/widget/listView/gridModules/RowContextMenu", "ecm/widget/listView/modules/Toolbar", "ier/util/menu", "ier/util/util", "ier/widget/layout/_SearchPaneMixin", "ier/widget/listView/modules/DocInfo", "ier/widget/listView/modules/FilePlanToolbar"], function (declare, lang, dojo_dom_class, desktop, Favorite, ActionMenu, FavoritesTree, FavoritesPane, RowContextMenu, Toolbar, menu, util, _SearchPaneMixin, DocInfo, FilePlanToolbar) {
        var _ActionMenu = declare(ActionMenu, {createMenu:function (actions) {
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    var a = actions[i];
                    if (a.id == "Link" || a.id == "SendEmailForSearches") {
                        actions.splice(i, 1);
                        i--;
                    }
                }
            }
            return this.inherited(arguments);
        }});
        var _Toolbar = declare(FilePlanToolbar, {createToolButtons:function () {
            this._actionMenuCreator = new _ActionMenu();
            this.inherited(arguments);
        }, getParentFolder:function () {
            var parentFolder = this.inherited(arguments);
            if (parentFolder && parentFolder.isIERFavorite) {
                parentFolder = parentFolder.item;
            }
            return parentFolder;
        }, loadContextMenu:function (selectedItems, callback) {
            desktop.loadMenuActions(menu.getFavoriteContextMenuType(selectedItems), callback);
        }, onToolbarButtonsCreated:function () {
            if (!this.getParentFolder()) {
                Toolbar.prototype.onToolbarButtonsCreated.apply(this, arguments);
            } else {
                this.inherited(arguments);
            }
        }, updateToolbarState:function () {
            if (!this.getParentFolder()) {
                Toolbar.prototype.updateToolbarState.apply(this, arguments);
            } else {
                this.inherited(arguments);
            }
        }});
        var _RowContextMenu = declare(RowContextMenu, {loadContextMenu:function (selectedItems, callback) {
            this._actionMenuCreator = new _ActionMenu();
            desktop.loadMenuActions(menu.getFavoriteContextMenuType(selectedItems), callback);
        }});
        return declare(FavoritesPane, {constructor:function () {
            var getMimeClass = Favorite.prototype.getMimeClass;
            lang.extend(Favorite, {getMimeClass:function () {
                var iconClass = util.getIconClass(this);
                if (!iconClass && !this.item && this.objectId) {
                    if (this.repository) {
                        _SearchPaneMixin.prototype._adaptRepository.call(this, this.repository);
                    }
                    this.retrieveFavorite(lang.hitch(this, function () {
                        desktop.onFavoriteUpdated([this]);
                    }));
                }
                return iconClass || getMimeClass.call(this);
            }, isIERFavorite:true});
            var getIconClass = FavoritesTree.prototype.getIconClass;
            var _onContextMenu = FavoritesTree.prototype._onContextMenu;
            lang.extend(FavoritesTree, {getIconClass:function (item) {
                var iconClass = null;
                if (item) {
                    iconClass = (item.isIERFavorite ? item.getMimeClass() : util.getIconClass(item));
                }
                return iconClass || getIconClass.call(this, item);
            }, getActionsMenuType:function (item) {
                return menu.getFavoriteContextMenuType([item]);
            }, _onContextMenu:function (evt) {
                this._actionMenuCreator = new _ActionMenu();
                _onContextMenu.call(this, evt);
            }});
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_dom_class.add(this.domNode, "ierCenterPane");
        }, getContentListModules:function () {
            var modules = this.inherited(arguments);
            util.replaceModule(modules, "toolbar", _Toolbar);
            util.replaceModule(modules, "rightPane", {moduleClass:DocInfo, showPreview:false});
            return modules;
        }, getContentListGridModules:function () {
            var modules = this.inherited(arguments);
            util.replaceModule(modules, "rowContextMenu", _RowContextMenu);
            return modules;
        }});
    });
}, "ier/widget/layout/FilePlanPane":function () {
    define(["dojo/_base/declare", "dojo/_base/event", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-construct", "dojo/dom-style", "dojo/aspect", "dijit/form/DropDownButton", "dijit/popup", "dijit/TooltipDialog", "dojox/layout/ResizeHandle", "ecm/model/Desktop", "ecm/widget/dialog/MessageDialog", "ecm/widget/layout/_RepositorySelectorMixin", "ecm/widget/layout/_LaunchBarPane", "ier/constants", "ier/messages", "ier/model/FilePlan", "ier/util/dialog", "ier/util/menu", "ier/util/util", "ier/widget/layout/FilePlanFlyoutPane", "dojo/text!./templates/FilePlanPane.html", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/DocInfo", "ier/widget/listView/modules/FilePlanToolbar", "ier/widget/dialog/ObjectStoreSecurityDialog", "ier/widget/FilePlanSearchBar", "ier/widget/FolderTree", "ier/widget/listView/ContentList", "ier/widget/panes/ItemPropertiesDisplayPane", "ier/widget/QuickSearchList", "dijit/layout/StackContainer"], function (dojo_declare, dojo_event, dojo_lang, dojo_array, dojo_construct, dojo_style, dojo_aspect, dijit_form_DropDownButton, dijit_popup, dijit_TooltipDialog, dojox_layout_ResizeHandle, ecm_model_desktop, ecm_widget_dialog_MessageDialog, ecm_widget_layout_RepositorySelectorMixin, ecm_widget_layout_LaunchBarPane, ier_constants, ier_messages, ier_model_FilePlan, ier_util_dialog, ier_util_menu, ier_util, ier_widget_layout_FilePlanFlyoutPane, templateString, ier_widget_listView_RowContextMenu, ier_widget_listView_DocInfo, ier_widget_listView_FilePlanToolbar, ObjectStoreSecurityDialog) {
        return dojo_declare("ier.widget.layout.FilePlanPane", [ecm_widget_layout_LaunchBarPane, ecm_widget_layout_RepositorySelectorMixin], {templateString:templateString, _messages:ier_messages, widgetsInTemplate:true, defaultFilePlanId:ier_constants.DocId_FilePlanFolder, fileplan:null, postCreate:function () {
            this.inherited(arguments);
            this.doBrowseConnections();
            this.connect(ecm_model_desktop, "onLogout", function (repository) {
                this.setRepository(null);
                this.isLoaded = false;
                this.fileplan = null;
                if (this.folderContents) {
                    this.folderContents.reset();
                }
            });
            this.connect(ecm_model_desktop, "onLogin", function (repository) {
                if (this.selected) {
                    var repository = this.getDefaultLayoutRepository();
                    if (repository && repository.connected) {
                        if (!this.isLoaded) {
                            this.loadContent();
                        } else {
                            this.setRepository(repository);
                        }
                    } else {
                        if (repository) {
                            this.connectToRepository(repository, function (repo) {
                                if (!this.isLoaded) {
                                    this.loadContent();
                                } else {
                                    this.setRepository(repo);
                                }
                            });
                        }
                    }
                }
            });
            this.connect(ecm_model_desktop, "onChange", function (modelObject) {
                this._onFilePlanChanged(modelObject, dojo_lang.hitch(this, function (fileplan) {
                    if (this.fileplan.id == fileplan.id && fileplan.deleted) {
                        var defaultFilePlan = this.repository.defaultFilePlan || ier_util.getGuidId(this.defaultFilePlanId);
                        var fp = this.repository.getFilePlan(defaultFilePlan);
                        if (fp) {
                            this.fileplan = fp;
                            this.setRepository(this.repository);
                        } else {
                            this.fileplan = null;
                            this.setRepository(null);
                        }
                        this.needReset = true;
                    }
                }));
            });
            this._createFilePlanSelector();
            this.mainContainer.resize();
        }, _onFilePlanChanged:function (modelObject, callback) {
            var func = dojo_lang.hitch(this, function (changedModel) {
                if (changedModel instanceof ier_model_FilePlan) {
                    callback(changedModel);
                }
            });
            if (dojo_lang.isArray(modelObject)) {
                dojo_array.forEach(modelObject, func);
            } else {
                func(modelObject);
            }
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ier_widget_listView_FilePlanToolbar});
            array.push({moduleClass:ier_widget_listView_DocInfo, showPreview:false});
            return array;
        }, getContentListGridModules:function () {
            var array = [];
            array.push(ier_widget_listView_RowContextMenu);
            return array;
        }, setParams:function (params) {
            if (params) {
                if (this.fileplan != params.fileplan || (this.fileplan == params.fileplan && this.repository != params.repository)) {
                    this.fileplan = params.fileplan;
                    if (!this.isLoaded) {
                        this.repository = params.repository;
                        this.loadContent();
                    } else {
                        this.setRepository(params.repository, true);
                    }
                }
            } else {
                if (!this.isLoaded && this.selected && this.repository) {
                    this.loadContent();
                }
            }
        }, loadContent:function () {
            this.folderContents.setContentListModules(this.getContentListModules());
            this.folderContents.setGridExtensionModules(this.getContentListGridModules());
            this.setPaneDefaultLayoutRepository();
            if (this.repository && this.repository.connected) {
                this.setRepository(this.repository, true);
                this.isLoaded = true;
            }
        }, reset:function () {
            this.setRepository(this.repository);
            this.needReset = false;
        }, setRepository:function (repository, reload) {
            if (repository != this.repository) {
                this.clear();
            }
            this.repository = repository;
            if (this.selected) {
                if (!repository) {
                    this._setRepositoryCompleted(repository);
                } else {
                    if (repository.isIERLoaded()) {
                        this._setRepositoryCompleted(repository);
                    } else {
                        repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                            this._setRepositoryCompleted(repository);
                        }));
                    }
                }
            }
        }, _setRepositoryCompleted:function (repository) {
            if (repository && !repository.isFilePlanRepository()) {
                ier_util_dialog.showMessage(ier_messages.no_fileplans_available);
            } else {
                if (repository) {
                    if (repository.securityRunDate == null) {
                        if (!this.objectStoreSecurityDialog) {
                            this.objectStoreSecurityDialog = new ObjectStoreSecurityDialog({showWarning:true, });
                            this.connect(this.objectStoreSecurityDialog, "onFinished", dojo_lang.hitch(this, function (response) {
                                if (response && response.securityRunDate) {
                                    this.repository.securityRunDate = response.securityRunDate;
                                }
                            }));
                            this.connect(this.objectStoreSecurityDialog, "onHide", dojo_lang.hitch(this, function () {
                                this._setRepositoryCompleted(this.repository);
                            }));
                        }
                        this.objectStoreSecurityDialog.show(this.repository);
                    } else {
                        this._loadFilePlan();
                    }
                } else {
                    this.folderTree.setRepository(null);
                    this.folderContents.setResultSet(null);
                    this.breadcrumb.clear();
                }
            }
        }, _loadFilePlan:function () {
            this._filePlanDropDown.loadContent();
            var rootId = null;
            if (this.fileplan) {
                rootId = this.fileplan.getGuidId();
            } else {
                var defaultFilePlan = this.repository.defaultFilePlan || ier_util.getGuidId(this.defaultFilePlanId);
                this.fileplan = this.repository.getFilePlan(defaultFilePlan);
                ecm_model_desktop.setCurrentFilePlan(this.fileplan);
                rootId = this.fileplan && this.fileplan.getGuidId() || this.defaultFilePlanId;
            }
            this.folderTree.setFolder(this.fileplan);
            this.openItem(this.fileplan);
        }, clear:function () {
            if (this.folderTree) {
                this.folderTree.setRepository(null);
            }
            if (this.folderContents) {
                this.folderContents.setResultSet(null);
            }
        }, destroy:function () {
            if (this.objectStoreSecurityDialog) {
                this.objectStoreSecurityDialog.destroy();
            }
            this.inherited(arguments);
        }, openItem:function (item) {
            this.mainStackContainer.selectChild(this.folderContents);
            if (!this.folderContents.getResultSet() || !this.folderContents.getResultSet().isResultSetForItem(item)) {
                this.folderContents.openItem(item);
                this.mainContainer.resize();
            }
        }, doBrowseConnections:function () {
            this.connect(this.folderTree, "onItemSelected", dojo_lang.hitch(this, function (item) {
                this.openItem(item);
            }));
            this.connect(this.folderTree, "onOpenItem", dojo_lang.hitch(this, function (item, data) {
                if (data && data.isInstanceOf && (data.isInstanceOf(ecm.model.ResultSet))) {
                    this.folderContents.setResultSet(data);
                    this.mainStackContainer.selectChild(this.folderContents);
                } else {
                    this.openItem(item);
                }
            }));
            this.connect(this.folderContents, "onOpenItem", dojo_lang.hitch(this, function (item, data) {
                if (data.isInstanceOf && data.isInstanceOf(ecm.model.ResultSet) && item.getPath) {
                    var path = null;
                    path = item.getPath();
                    var breadcrumbData = [];
                    for (var i = 0; i < path.length; i++) {
                        var pathItem = path[i];
                        var label = pathItem.name;
                        if (pathItem instanceof ier_model_FilePlan) {
                            label = pathItem.repository.name + " : " + pathItem.name;
                        }
                        breadcrumbData.push({label:label, item:pathItem});
                    }
                    this.breadcrumb.setData(breadcrumbData);
                    this.noRefresh = false;
                    if (!this.folderTree.isPathSelected(path)) {
                        this.folderTree.set("path", path);
                    }
                }
            }));
            this.connect(this.breadcrumb, "onClick", function (breadcrumb) {
                this.noRefresh = true;
                var breadcrumbData = this.breadcrumb.getData();
                var path = [];
                for (var i = 0; i < breadcrumbData.length; i++) {
                    path.push(breadcrumbData[i].item);
                }
                this.openItem(path[path.length - 1]);
            });
        }, _createFilePlanSelector:function () {
            var title = ier_messages.filePlanPane_selectFilePane;
            var dropDown = new ier_widget_layout_FilePlanFlyoutPane({title:title, resizable:true});
            if (dropDown.topPane) {
                dojo_style.set(dropDown.topPane.domNode, "display", "none");
            }
            var dialog = new dijit_TooltipDialog({"class":"ierFlyoutTooltipDialog", autofocus:false});
            dialog.set("content", dropDown);
            this.connect(dialog, "onOpen", function () {
                dialog.startup();
            });
            this.connect(dropDown, "closePopup", function () {
                dijit_popup.close(dialog);
            });
            this.connect(dropDown, "selectContentPane", function () {
                this.selectContentPane.apply(this, arguments);
            });
            this.connect(dropDown, "onRepositoryChange", function () {
                this.onRepositoryChange.apply(this, arguments);
            });
            var resizeHandle = new dojox_layout_ResizeHandle({targetId:dialog.id});
            dojo_construct.place(resizeHandle.domNode, dialog.domNode);
            var filePlanSelector = new dijit_form_DropDownButton({label:title, showLabel:false, "class":"ierFilePlanSelector", iconClass:"filePlanIcon", dropDown:dialog});
            dojo_construct.place(filePlanSelector.domNode, this._filePlanSelectorContainer);
            this.connect(filePlanSelector.domNode, "oncontextmenu", function (evt) {
                dojo_event.stop(evt);
                return false;
            });
            this._filePlanDropDown = dropDown;
        }});
    });
}, "ier/widget/search/SearchTab":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/dom-class", "dijit/form/Select", "ecm/model/SearchConfiguration", "ecm/widget/search/SearchTab", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/DocInfo", "ier/widget/listView/modules/FilePlanToolbar"], function (array, declare, dom_class, Select, SearchConfiguration, SearchTab, constants, messages, util, RowContextMenu, DocInfo, FilePlanToolbar) {
        return declare("ier.widget.search.SearchTab", SearchTab, {postCreate:function () {
            this.inherited(arguments);
            dom_class.add(this.searchContainerNode, "ierCenterPane");
            this.connect(this.searchForm, "onSearchCriteriaLoad", function () {
                var node = this.searchForm.textSearchFormInputArea.parentNode;
                if (node) {
                    if (this.searchTemplate.objectType == SearchConfiguration.prototype.OBJECT_TYPE.DOCUMENT) {
                        var text = this.searchForm._textSearchTexts && this.searchForm._textSearchTexts[0];
                        text && text.set("disabled", true);
                        this.repository.retrieveAssociatedContentRepositories(function (items) {
                            if (array.some(items || [], function (item) {
                                return !!item.textSearchType;
                            })) {
                                text && text.set("disabled", false);
                            }
                        });
                    } else {
                        dom_class.toggle(node, "dijitHidden", true);
                    }
                }
            });
            this.connect(this.searchResults, "setGridExtensionModules", function () {
                var modules = this.searchResults.getGridExtensionModules();
                util.replaceModule(modules, "rowContextMenu", RowContextMenu);
            });
            this.connect(this.searchResults, "setContentListModules", function () {
                var modules = this.searchResults.getContentListModules();
                util.replaceModule(modules, "toolbar", FilePlanToolbar);
                util.replaceModule(modules, "rightPane", {moduleClass:DocInfo, showPreview:false});
            });
        }});
    });
}, "url:ier/widget/panes/templates/AddItemPane.html":"<div class=\"ecmMoveFileDialog\" data-dojo-type=\"dijit.layout.BorderContainer\" gutters=\"false\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<table class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr data-dojo-attach-point=\"_entityItemSaveInRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\" data-dojo-attach-point=\"_targetLocationRequired\">*</span>\r\n\t\t\t\t\t\t${_messages.baseDialog_saveIn}:\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ier.widget.search.SearchInDropDown\" \r\n\t\t\t\t\t\t\tclass=\"dijitInline\"\r\n\t\t\t\t\t\t\tdropdownid=\"${id}_folderLocation\"\r\n\t\t\t\t\t\t\tshowIncludeSubFolders=\"false\"\r\n\t\t\t\t\t\t\tshowRepositoryTeamspace=\"true\"\r\n\t\t\t\t\t\t\tselectRootInitially=\"false\"\r\n\t\t\t\t\t\t\tisRequired=\"true\"\r\n\t\t\t\t\t\t\tdisplayForSearch=\"false\"\r\n\t\t\t\t\t\t\tdisplaySelectTeamspacesNode=\"false\",\r\n\t\t\t\t\t\t\tallowOnlySameDomainRepositories=\"true\"\r\n\t\t\t\t\t\t\tdata-dojo-attach-point=\"folderSelector\">\r\n\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\t \r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_messages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\"\r\n\t\tdata-dojo-attach-point=\"securityTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>", "url:ier/widget/dialog/templates/AddObjectStorePermissionDialogContent.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\">\r\n\t<div data-dojo-attach-point=\"_userGroupSelector\" region=\"center\" data-dojo-type=\"dijit/layout/ContentPane\"></div>\r\n</div>\r\n", "url:dijit/layout/templates/AccordionButton.html":"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n", "url:ier/widget/panes/templates/RecordDeclarePropertiesPane.html":"<div class=\"recordDeclarePropertiesPane\" data-dojo-attach-point=\"containerNode\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr data-dojo-attach-point=\"_repositorySelectorRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\" data-dojo-attach-point=\"_entryTemplateSelectorLabelRequired\">*</span>\r\n\t\t\t\t\t<div class=\"dijitInline\" id=\"${id}_repositoryLabel\" for=\"${id}_repositorySelector\" data-dojo-attach-point=\"_repositoriesLabel\">${_messages.declareRecordDialog_repositories}:</div>\r\n\t\t\t\t\t<label for=\"${id}_repositoryDisabledTextBox\" style=\"display: none;\" id=\"${id}_repositoriesDisabledLabel\" data-dojo-attach-point=\"_repositoriesDisabledLabel\" >\r\n\t\t\t\t\t${_messages.declareRecordDialog_repositories}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_repositorySelectorHoverHelp\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_repositoryDisabledTextBox\"\r\n\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\"\r\n\t\t\t\t\t\tvalue readonly aria-readonly=\"true\"\r\n\t\t\t\t\t\tstyle=\"display: none;\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"_repositorySelector\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\" data-dojo-attach-point=\"_folderSelectorLabelCell\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_folderSelectorDisabled\" data-dojo-attach-point=\"_fileplanLocationDisabledLabel\">${_messages.declareRecordDialog_fileplanLocation}:</label>\t\t\t\t\t\r\n\t\t\t\t\t<div class=\"dijitInline\" id=\"${id}_fileplanLocationLabel\" style=\"display:none\" data-dojo-attach-point=\"_fileplanLocationLabel\">\r\n\t\t\t\t\t${_messages.declareRecordDialog_fileplanLocation}:</div>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_folderSelectorHoverHelp\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t\t\t<div id=\"${id}_folderSelectorDisabled\" data-dojo-type=\"dijit.form.TextBox\" \r\n\t\t\t\t\t\tdisabled=\"disabled\"\r\n\t\t\t\t\t\tclass=\"ierDropDownInput\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_folderSelectorDisabled\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr data-dojo-attach-point=\"_contentClassSelectorRow\">\r\n\t\t\t\t<td class=\"propertyRowLabel\" data-dojo-attach-point=\"_contentClassSelectorLabelCell\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_contentClassSelectorDisabled\" data-dojo-attach-point=\"_contentClassSelectorDisabledLabel\">${_messages.declareRecordDialog_recordClass}:</label>\t\r\n\t\t\t\t\t<div class=\"dijitInline\" id=\"${id}_contentClassLabel\" style=\"display:none\" data-dojo-attach-point=\"_contentClassLabel\" >\r\n\t\t\t\t\t${_messages.declareRecordDialog_recordClass}:</div>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_contentClassSelectorHoverHelp\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_contentClassSelectorCell\">\r\n\t\t\t\t\t<div id=\"${id}_contentClassSelectorDisabled\" data-dojo-type=\"dijit.form.TextBox\" \r\n\t\t\t\t\t\tdisabled=\"disabled\"\r\n\t\t\t\t\t\tclass=\"ierDropDownInput\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"_contentClassSelectorDisabled\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t<div class=\"commonPropertiesDiv\" data-dojo-attach-point=\"_commonPropertiesDiv\">\r\n\t\t<div data-dojo-type=\"ier.widget.panes.CommonPropertiesPane\" data-dojo-attach-point=\"_commonProperties\" style=\"padding-top:7px\"></div>\r\n\t</div>\r\n</div>", "ier/widget/layout/IERMainLayout":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-class", "ecm/Messages", "ecm/model/Desktop", "ecm/model/Feature", "ecm/widget/layout/LaunchBarContainer", "ecm/widget/layout/_LaunchBarPane", "ecm/widget/layout/MainLayout", "ecm/widget/dialog/ErrorDialog", "ier/constants", "ier/messages", "ier/model/SearchTemplate", "ier/util/util"], function (dojo_declare, dojo_array, dojo_lang, dojo_style, dojo_class, ecm_messages, ecm_model_desktop, ecm_model_Feature, ecm_widget_layout_LaunchBarPane, ecm_widget_layout_LaunchBarContainer, ecm_widget_layout_MainLayout, ErrorDialog, ier_constants, ier_messages, SearchTemplate, ier_util) {
        return dojo_declare("ier.widget.layout.IERMainLayout", [ecm_widget_layout_MainLayout], {configurePaneFeature:null, adminPaneFeature:null, taskPaneFeature:null, postCreate:function () {
            this.inherited(arguments);
            this.connect(ecm_model_desktop, "onLogout", function () {
                this._clearSelectedPanes();
            });
            this.connect(ecm_model_desktop, "onLogin", function () {
                if (this.defaultFeatureId) {
                    var button = this.launchBarContainer.getButtonByID(this.defaultFeatureId);
                    if (this.launchBarContainer.selectContentPane) {
                        this.launchBarContainer.selectContentPane(button, this.defaultFeatureId, null);
                    }
                    var defaultFeatureButton = this.launchBarContainer.getButtonByID(this.defaultFeatureId);
                    if (defaultFeatureButton && defaultFeatureButton.feature) {
                        ecm_model_desktop.helpContext = defaultFeatureButton.feature.helpContext;
                    }
                    var authenticatingRepository = ecm_model_desktop.getAuthenticatingRepository();
                    var isRecordsManagerOrAdmin = authenticatingRepository && authenticatingRepository.isRecordsManagerOrAdministrator() ? true : false;
                    var isTaskFeatureVisible = ecm_model_desktop.taskManager.isTaskUser() || ecm_model_desktop.taskManager.isTaskAdmin();
                    this.hideOrShowFeaturePane(isTaskFeatureVisible, this.taskPaneFeature);
                    this.hideOrShowFeaturePane(isRecordsManagerOrAdmin, this.adminPaneFeature);
                    this.hideOrShowFeaturePane(isRecordsManagerOrAdmin, this.configurePaneFeature);
                }
                this._setBannerAndLaunchbarState();
            });
            this.connect(this.launchBarContainer, "onFeaturePanelCreated", function (panel) {
                this.connect(panel, "onOpenItem", function (item, data) {
                    item = item.item || item;
                    if (item && item.isInstanceOf && item.isInstanceOf(SearchTemplate) && (!data || data.openNewTab === true || data.openNewTab === false)) {
                        this._openSearch(item, {tabType:"search", openNewTab:data && data.openNewTab || false});
                    }
                });
                this.connect(panel, "onEditItem", function (item) {
                    item = item.item || item;
                    if (item && item.isInstanceOf && item.isInstanceOf(SearchTemplate)) {
                        this._openSearch(item.item || item, {tabType:"searchbuilder"});
                    }
                });
            });
        }, _setBannerAndLaunchbarState:function () {
            if (ecm.model.desktop.getRequestParam("sideChrome") == 0) {
                if (!dojo_class.contains(this.getBanner().domNode, "dijitHidden")) {
                    dojo_class.add(this.getBanner().domNode, "dijitHidden");
                }
                this.launchBarContainer.hideButtonBar();
                this.mainContainer.resize();
            } else {
                if (ecm.model.desktop.getRequestParam("sideChrome") == 1) {
                    if (!dojo_class.contains(this.getBanner().domNode, "dijitHidden")) {
                        dojo_class.add(this.getBanner().domNode, "dijitHidden");
                    }
                    this.mainContainer.resize();
                } else {
                    if (ecm.model.desktop.getRequestParam("sideChrome") == 2) {
                        this.launchBarContainer.hideButtonBar();
                        this.mainContainer.resize();
                    }
                }
            }
        }, _clearSelectedPanes:function () {
            dojo_array.forEach(this.launchBarContainer.getButtons(), function (button) {
                if (button && button.lastSelectedPane) {
                    button.lastSelectedPane = null;
                }
            });
        }, onLayoutLoaded:function () {
            this._setupRepositorySyncing();
        }, createErrorDialog:function () {
            return new ErrorDialog({messageProductId:"FNRRM"});
        }, getAvailableFeatures:function () {
            return [new ecm_model_Feature({id:ier_constants.Feature_IERFavorites, name:ier_messages.favorites, separator:false, iconUrl:"favoritesLaunchIcon", featureClass:"ier.widget.layout.FavoritePane", popupWindowClass:null, featureTooltip:ecm_messages.launchbar_favorites, popupWindowTooltip:null, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh00.htm"}), new ecm_model_Feature({id:ier_constants.Feature_IERBrowseFilePlan, name:ier_messages.fileplans, separator:false, iconUrl:"browseLaunchIcon", featureClass:"ier.widget.layout.FilePlanPane", popupWindowClass:"ier.widget.layout.FilePlanFlyoutPane", featureTooltip:ier_messages.fileplans_tooltip, popupWindowTooltip:null, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh00.htm"}), new ecm_model_Feature({id:ier_constants.Feature_IERSearch, name:ier_messages.search, separator:false, iconUrl:"searchLaunchIcon", featureClass:"ier.widget.layout.SearchPane", popupWindowClass:"ier.widget.layout.SearchFlyoutPane", featureTooltip:ecm_messages.launchbar_search, popupWindowTooltip:ecm_messages.launchbar_search_popup, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh22.htm"}), this.taskPaneFeature = new ecm_model_Feature({id:ier_constants.Feature_IERTasks, name:ier_messages.tasks, separator:false, iconUrl:"launcherJobsIcon", featureClass:"ier.widget.layout.TaskPane", popupWindowClass:null, featureTooltip:ier_messages.tasks_tooltip, popupWindowTooltip:null, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh31.htm"}), this.configurePaneFeature = new ecm_model_Feature({id:ier_constants.Feature_IERConfigure, name:ier_messages.configure, separator:false, iconUrl:"launcherConfigureIcon", featureClass:"ier.widget.layout.ConfigurePane", popupWindowClass:null, featureTooltip:ier_messages.configure_tooltip, popupWindowTooltip:null, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh01.htm"}), this.adminPaneFeature = new ecm_model_Feature({id:ier_constants.Feature_IERAdmin, name:ier_messages.administration, separator:false, iconUrl:"adminLaunchIcon", featureClass:"ier.widget.layout.AdminiPane", featureTooltip:ier_messages.administration_tooltip, popupWindowTooltip:null, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh00.htm"}), new ecm_model_Feature({id:"workPane", name:ecm.model.desktop.getConfiguredLabelsvalue("work"), separator:false, iconUrl:"workLaunchIcon", featureClass:"ecm.widget.layout.WorkPane", popupWindowClass:"ecm.widget.layout.WorkFlyoutPane", featureTooltip:ecm.messages.launchbar_work, popupWindowTooltip:ecm.messages.launchbar_work_popup, preLoad:false, helpContext:ier_constants.HelpContextUrl + "frmovh00.htm"})];
        }, setFeatures:function (selectedFeatures, defaultFeature) {
            var features = this.mergeFeatures(this.getAvailableFeatures(), selectedFeatures, defaultFeature);
            for (var index in features) {
                var feature = features[index];
                if (feature.id == ier_constants.NexusAdminClientId) {
                    features.splice(index, 1);
                }
            }
            var layout = {selectedPane:defaultFeature, buttons:features};
            this.launchBarContainer.setLayout(layout);
            this.defaultFeatureId = defaultFeature;
            this.onLayoutLoaded();
            this.mainContainer.resize();
        }, setLayoutConfig:function (layoutConfig, layoutCategories, layoutDefaultCategory) {
            this.inherited(arguments);
        }, _setupRepositorySyncing:function () {
            var panes = this.launchBarContainer.getChildPanes();
            for (var i in panes) {
                var child = panes[i];
                if (child && child instanceof ecm_widget_layout_LaunchBarPane && child.onRepositoryChange) {
                    this.connect(child, "onRepositoryChange", function (currentPane, repository) {
                        if (repository.isIERLoaded()) {
                            this._setAllChildPanesRepositories(panes, currentPane, repository);
                        } else {
                            repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                                this._setAllChildPanesRepositories(panes, currentPane, repository);
                            }));
                        }
                    });
                }
            }
        }, _setAllChildPanesRepositories:function (panes, currentPane, repository) {
            for (var j in panes) {
                var pane = panes[j];
                if (pane.UUID && pane.UUID) {
                    if (pane.UUID != ier_constants.Feature_IERFavorites && pane.UUID != ier_constants.Feature_IERJobs && pane.UUID != ier_constants.FeaturePane_IERJobs && pane.UUID != ier_constants.Feature_IERAdmin) {
                        this._setPaneRepository(currentPane, pane, repository);
                    }
                }
            }
        }, _setPaneRepository:function (currentPane, pane, repository) {
            if (pane && currentPane != pane) {
                pane.setRepository(repository);
                pane.needReset = true;
            }
        }, doesFeatureExistInLaunchBarContainer:function (featureId) {
            var buttons = this.launchBarContainer.getButtons();
            return (buttons[featureId] != null);
        }, addOrRemoveFeaturePane:function (permission, feature) {
            if (!permission) {
                this.launchBarContainer.removeFeatureFromLayout(feature);
            } else {
                if (!this.doesFeatureExistInLaunchBarContainer(feature.id)) {
                    this.launchBarContainer.addFeatureToContainer(feature);
                }
            }
        }, hideOrShowFeaturePane:function (permission, feature) {
            var button = this.launchBarContainer.getButtons()[feature.id];
            if (button) {
                if (!permission) {
                    dojo_style.set(button.domNode, "display", "none");
                } else {
                    dojo_style.set(button.domNode, "display", "");
                }
            }
        }, _openSearch:function (searchTemplate, params) {
            var button = this.launchBarContainer.getButtonByID(ier_constants.Feature_IERSearch);
            if (button) {
                params = dojo_lang.mixin({selected:true, closable:true}, params);
                params.repository = searchTemplate.repository;
                if (params.tabType == "searchbuilder") {
                    params.searchTemplate = searchTemplate;
                    params.UUID = searchTemplate.generateUUID();
                } else {
                    params.searchTemplate = searchTemplate.clone();
                }
                this.launchBarContainer.selectContentPane(button, ier_constants.Feature_IERSearch, params);
            }
        }, getFeature:function (featureId) {
            if (ecm_model_desktop.features && featureId) {
                for (var i in ecm_model_desktop.features) {
                    var feat = ecm_model_desktop.features[i];
                    if (feat.id == featureId) {
                        return feat;
                    }
                }
            }
            return null;
        }, });
    });
}, "ier/widget/listView/modules/FilePlanToolbar":function () {
    define("ier/widget/listView/modules/FilePlanToolbar", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dijit/registry", "ecm/model/Desktop", "ier/widget/listView/modules/Toolbar", "ier/constants", "ier/util/menu"], function (dojo_declare, dojo_array, dojo_lang, dijit_registry, Desktop, ier_widget_listView_modules_Toolbar, ier_constants, ier_util_menu) {
        return dojo_declare("ier.widget.listView.modules.FilePlanToolbar", [ier_widget_listView_modules_Toolbar], {isConfigure:false, preload:function () {
            this.inherited(arguments);
            this.connect(Desktop, "onChange", function (changedModels) {
                if (dojo_lang.isArray(changedModels)) {
                    for (var i in changedModels) {
                        var changedModel = changedModels[i];
                        if (changedModel && this.getParentFolder() && changedModel.id == this.getParentFolder().id) {
                            this.contentList.getResultSet().parentFolder = changedModel;
                            this.updateToolbarState();
                        }
                    }
                }
            });
        }, onToolbarButtonsCreated:function (toolbarButtons) {
            this.inherited(arguments);
            if (this.getParentFolder()) {
                this.updateContentListToolbar(this.getParentFolder());
            }
            this.setupAddContainerButtons(this.findToolbarButton(toolbarButtons, ier_constants.Action_AddRecordCategory));
            this.setupAddContainerButtons(this.findToolbarButton(toolbarButtons, ier_constants.Action_AddRecordFolder));
            this.setupAddContainerButtons(this.findToolbarButton(toolbarButtons, ier_constants.Action_AddRecordVolume));
            this.setupAddContainerButtons(this.findToolbarButton(toolbarButtons, ier_constants.Action_AddFilePlan));
        }, createToolButtons:function () {
            this.contentList.getResultSet().toolbarDef = ier_constants.MenuType_IERBrowseFilePlanToolbarMenu;
            this.inherited(arguments);
        }, updateToolbarState:function (action) {
            this.inherited(arguments);
            if (this.getParentFolder()) {
                this.updateContentListToolbar(this.getParentFolder());
            }
            dojo_array.forEach(this.getToolbarButtons(), function (toolbarButton) {
                var action = toolbarButton.action;
                var canPerform = false;
                if (action && (action.id == ier_constants.Action_AddRecordCategory || action.id == ier_constants.Action_AddRecordFolder || action.id == ier_constants.Action_AddRecordVolume || action.id == ier_constants.Action_AddFilePlan)) {
                    for (var j = 0; j < action.privileges.length && !canPerform; j++) {
                        var privilege = action.privileges[j];
                        var parentFolder = this.getParentFolder();
                        if (parentFolder && parentFolder.hasPrivilege(privilege)) {
                            canPerform = true;
                        }
                    }
                    toolbarButton.set("disabled", !canPerform);
                }
            }, this);
        }, updateContentListToolbar:function (item) {
            var addRecordCategoryButton = this.getToolbarButton(ier_constants.Action_AddRecordCategory);
            var addRecordFolderButton = this.getToolbarButton(ier_constants.Action_AddRecordFolder);
            var addRecordVolumeButton = this.getToolbarButton(ier_constants.Action_AddRecordVolume);
            ier_util_menu.updateAddContainersToolbar(item, addRecordCategoryButton, addRecordFolderButton, addRecordVolumeButton);
        }});
    });
}, "ier/widget/dialog/ObjectStoreSecurityDialog":function () {
    require({cache:{"url:ier/widget/dialog/templates/ObjectStoreSecurityDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier/widget/panes/EntityItemObjectStoreSecurityPane\"></div>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/dialog/ObjectStoreSecurityDialog", ["dojo/_base/declare", "dojo/_base/lang", "dojo/string", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/dialog/ConfirmationDialog", "ier/constants", "ier/messages", "ier/util/util", "ier/model/ResultSet", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/ObjectStoreSecurityDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemObjectStoreSecurityPane"], function (dojo_declare, dojo_lang, dojo_string, ecm_model_desktop, ecm_model_Request, ecm_widget_dialog_ConfirmationDialog, ier_constants, ier_messages, ier_util, ier_model_ResultSet, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.ObjectStoreSecurityDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _messages:ier_messages, showWarning:false, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemSecurityPane);
            this._runButton = this.addButton(ier_messages.baseDialog_runButton, "_onClickRun", true, true);
        }, show:function (repository) {
            this.inherited("show", arguments);
            this.repository = repository;
            if (this.showWarning) {
                this.setMessage(dojo_string.substitute(ier_messages.noSecurityRunDate_available, [this.repository.name]), "error");
            }
            if (!this.repository || this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderDialog:function () {
            this.set("title", ier_messages.objectStoreSecurityDialog_title);
            this.setIntroText(ier_messages.objectStoreSecurityDialog_description);
            this.setResizable(true);
            this._entityItemSecurityPane.createRendering(this.repository, null, null, null, null, this._isReadOnly);
            this.resize();
            this.validateInput();
        }, _saveSecurity:function () {
            if (!this.confirmRunSecurity) {
                this.confirmRunSecurity = new ecm_widget_dialog_ConfirmationDialog({text:ier_messages.objectStoreSecurityDialog_confirmation, buttonLabel:ier_messages.baseDialog_runButton, onExecute:dojo_lang.hitch(this, function () {
                    this._entityItemSecurityPane.saveSecurity(dojo_lang.hitch(this, function (response) {
                        this.onFinished(response);
                        this.onCancel();
                    }));
                })});
            }
            this.confirmRunSecurity.show();
        }, destroy:function () {
            if (this.confirmRunSecurity) {
                this.confirmRunSecurity.destroy();
            }
            this.inherited(arguments);
        }, onFinished:function (response) {
        }, _onClickRun:function () {
            if (this.validateInput()) {
                this._saveSecurity();
            }
        }});
    });
}, "ier/widget/FilePlanRepositorySelector":function () {
    define(["dojo/_base/declare", "dojo/dom-class", "dojox/collections/ArrayList", "ecm/model/Desktop", "ecm/widget/RepositorySelector"], function (dojo_declare, dojo_class, dojox_collections_ArrayList, ecm_model_desktop, ecm_widget_RepositorySelector) {
        return dojo_declare("ier.widget.FilePlanRepositorySelector", [ecm_widget_RepositorySelector], {_filePlanRepositories:[], postCreate:function () {
            this.inherited(arguments);
            if (this.repositoryTypes != null && this.repositoryTypes.length > 0) {
                this.repositoryTypes = new dojox_collections_ArrayList(this.repositoryTypes.split(","));
            }
            dojo_class.add(this.domNode, "ecmRepositorySelector");
        }, setFilePlanRepositories:function (repositories) {
            this._filePlanRepositories = repositories;
            if (ecm_model_desktop.desktopLoaded) {
                this._createRendering();
            } else {
                this.connect(ecm_model_desktop, "onDesktopLoaded", "_createRendering");
            }
        }, getRepositories:function () {
            return this._filePlanRepositories;
        }});
    });
}, "url:ier/widget/dialog/templates/MoveRecordDialog.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t<tbody>   \r\n\t\t<tr data-dojo-attach-point=\"_reasonForRow\">\r\n\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t<label for=\"${id}_reasonFor\">${_messages.moveRecordDialog_reasonForMovePrompt}:</label>\r\n\t\t</td>\r\n\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_reasonForCell\">\r\n\t\t\t<div id=\"${id}_reasonFor\"\r\n\t\t\t\tdata-dojo-type=\"ecm.widget.ValidationTextBox\" \r\n\t\t\t\tdata-dojo-attach-point=\"_reasonForMove\"\r\n\t\t\t\tdata-dojo-attach-event=\"onKeyUp: _onNameChange\"\r\n\t\t\t\tstyle=\"width:300px\">\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</td>\r\n\t\t</tr>\r\n\t\r\n\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t${_messages.fileRecordDialog_fileplanLocation}:\r\n\t\t</td>\r\n\t\t<td class=\"propertyRowValue\">\r\n\t\t\t<div data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t</div>\r\n\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t</table>\r\n\r\n</div>", "ier/widget/dialog/CopyRecordDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/FolderSelectorCallback", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/_FolderSelectorDropDown", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/CopyRecordDialog.html", "dijit/layout/ContentPane", "ecm/widget/HoverHelp", "ecm/widget/TextBox", "ecm/widget/ValidationSimpleTextarea"], function (dojo_declare, dojo_lang, dojo_class, ecm_model_desktop, ecm_model_Request, ecm_widget_FolderSelectorCallback, ier_constants, ier_messages, ier_util, ier_widget_FolderSelectorDropDown, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.CopyRecordDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _record:null, _fp_repository_location:null, _messages:ier_messages, _items:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierSmallDialog");
            this.okButton = this.addButton(ier_messages.copyRecordDialog_copyButton, "_onClickCopy", false, true);
            this._description.set("value", "");
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.repository = repository;
            this._items = items;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this._setPropertyLengths(this.repository);
            var props = items[0];
            this._documentTitle.set("value", ier_messages.copyRecordDialog_documentTitleIntro + props.name);
        }, _renderDialog:function () {
            this.setTitle(ier_messages.copyRecordDialog_title);
            this.okButton.set("disabled", true);
            if (this._folderSelector) {
                this._folderSelector.destroy();
                this._folderSelector = null;
            }
            this._folderSelector = new ier_widget_FolderSelectorDropDown();
            this._folderSelector.selectRootInitially = false;
            this._folderSelector.preventSelectRoot = true;
            this.addChildWidget(this._folderSelectorCell);
            this._folderSelectorCell.appendChild(this._folderSelector.domNode);
            this._setFolderSelectorPermissions(this.repository, dojo_lang.hitch(this, function () {
                this._setFolderRoot(this.repository, ecm_model_desktop.getCurrentFilePlanId());
            }));
            this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                this._fp_repository_location = folder.item;
                this.okButton.set("disabled", !(this.validate()));
            });
            this.resize();
        }, _setFolderRoot:function (repository, rootFolderId) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this._folderSelector.setRoot(itemRetrieved);
                }));
            } else {
                this._folderSelector.setRoot(repository);
            }
        }, _setFolderSelectorPermissions:function (repository, onComplete) {
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback(ier_constants.Privilege_CanDeclareRecordToContainer, ier_messages.copyRecordDialog_notAllowedToCopyToContainer);
            this._folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            if (onComplete) {
                onComplete();
            }
        }, validate:function () {
            var result = false;
            if (this._fp_repository_location != null) {
                result = true;
            }
            return result;
        }, _setPropertyLengths:function (repository) {
            var contentClass = repository.getContentClass(this._items[0].getClassName());
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                for (var i in attributeDefinitions) {
                    var attributeDefinition = attributeDefinitions[i];
                    if (attributeDefinition.id == ier_constants.Property_RMEntityDescription) {
                        this._description.set("maxLength", attributeDefinition.maxLength);
                    }
                    if (attributeDefinition.id == ier_constants.Property_DocumentTitle) {
                        this._documentTitle.set("maxLength", attributeDefinition.maxLength);
                    }
                }
            }));
        }, _onClickCopy:function () {
            if (this.validate()) {
                var items = this._items;
                var item = items[0];
                var serviceParams = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (itemRetrieved) {
                    if (this._fp_repository_location) {
                        this._fp_repository_location.refresh();
                    }
                    this.onCancel();
                }));
                serviceParams.requestParams[ier_constants.Param_RecordId] = item.id;
                serviceParams.requestParams[ier_constants.Param_DestinationContainer] = this._fp_repository_location.id;
                serviceParams.requestParams[ier_constants.Param_Name] = this._documentTitle.get("value");
                serviceParams.requestParams[ier_constants.Param_Description] = this._description.get("value");
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CopyRecord, ier_constants.PostEncoding, serviceParams);
            }
        }});
    });
}, "url:ier/widget/admin/templates/AdminCheckBox.html":"<div role=\"presentation\" >\r\n\t<input dojoAttachPoint=\"_checkbox, focusNode\"  \r\n\t\tvalue=\"true\" \r\n\t\tclass=\"ierAdminGridCheckbox\"\r\n\t\tdojoType=\"dijit.form.CheckBox\" \r\n\t\tdojoAttachEvent=\"onClick:onClick\"\r\n\t\taria-labelledby=\"${id}_checkboxLabel\"\r\n\t\taria-label=\"${label}\"><label for=\"${id}\" id=\"${id}_checkboxLabel\" style=\"display:none\" dojoAttachPoint=\"_label\">${label}</label>\r\n</div>", "ier/widget/DocumentSelector":function () {
    require({cache:{"url:ier/widget/templates/DocumentSelector.html":"<div class=\"ierObjectSelector noFocus dijitInline\" data-dojo-attach-point=\"containerNode\"  \r\n\tdata-dojo-attach-event=\"onFocus: _onFocusContainer\">\r\n\t<div class=\"dijitInline\" data-dojo-attach-point=\"_selectedObjectsContainer\" tabindex=\"0\" aria-label=\"${label}\">\r\n\t\t<input id=\"${labelId}\" type=\"text\" style=\"display:none\">\r\n\t\t<input tabIndex=\"-1\" type=\"hidden\" class=\"dijitOffScreen\" data-dojo-attach-point=\"valueNode\"/>\r\n\t\t\r\n\t\t<button class=\"selectButton\" type=\"button\"\r\n\t\t\tdata-dojo-attach-point=\"_selectButton,focusNode\" \r\n\t\t\taria-labelledby=\"${labelId}\" aria-label=\"${label}\"\r\n\t\t\tdata-dojo-type=\"ecm.widget.Button\"\r\n\t\t\tdata-dojo-attach-event=\"onClick: _onSelectObject\">${selectButtonLabel}</button>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/DocumentSelector", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/focus", "ecm/LoggerMixin", "ecm/widget/_SinglePropertyEditorMixin", "ier/constants", "ier/messages", "ier/util/dialog", "ier/widget/ObjectCompositeButton", "ier/widget/dialog/ObjectListDialog", "dojo/text!./templates/DocumentSelector.html", "ecm/widget/Button"], function (dojo_declare, dojo_lang, dojo_class, dojo_construct, dojo_style, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_focus, ecm_LoggerMixin, ecm_widget_SinglePropertyEditorMixin, ier_constants, ier_messages, ier_util_dialog, ier_widget_ObjectCompositeButton, ier_widget_dialog_ObjectListDialog, templateString) {
        return dojo_declare("ier.widget.DocumentSelector", [ecm_LoggerMixin, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_widget_SinglePropertyEditorMixin], {templateString:templateString, widgetsInTemplate:true, objectClassName:ier_constants.ClassName_CustomObject, ier_messages:ier_messages, selectedItem:null, _selectedItemButton:null, _dialogCssClass:null, _entityType:null, showVersionSelection:false, repository:null, selectButtonLabel:ier_messages.select_with_elipsis, createLabel:ier_messages.baseDialog_addButton, showCreateButton:false, attributeMap:dojo_lang.delegate(dijit_Widget.prototype.attributeMap, {id:"focusNode", tabIndex:"focusNode"}), postCreate:function () {
            this.inherited(arguments);
            if (this.selectedItem) {
                this._createCompositeButton(this.selectedItem);
            }
            if (this.name) {
                this.valueNode.name = this.name;
            }
            if (this.readOnly) {
                this.setDisabled(true);
            }
            if (this.noSelectButton) {
                dojo_style.set(this._selectButton.domNode, "display", "none");
            } else {
                this._selectButton.set("label", this.selectButtonLabel);
            }
        }, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, addDialogCssClass:function (cssClass) {
            this._dialogCssClass = cssClass;
        }, getPromptText:function () {
            return ier_messages.objectSelector_promptText;
        }, setDisabled:function (disabled) {
            if (this._selectButton) {
                this._selectButton.set("disabled", disabled);
            }
            if (this._selectedItemButton) {
                this._selectedItemButton.setDisabled(disabled);
            }
        }, setSelectedItem:function (item) {
            if (this._selectedItemButton) {
                this._selectedItemButton.setSelectedItem(item);
            } else {
                this._createCompositeButton(this.selectedItem);
            }
            this.selectedItem = item;
        }, _onSelectObject:function () {
            var objectDialog = new ecm.widget.dialog.SelectObjectDialog({selectionMode:"document", showVersionSelection:false, multiSelect:false, repository:this.repository, showMultiRepositorySelector:false, title:"Select Record"});
            objectDialog.setWidth(800);
            objectDialog.setResizable(true);
            this.connect(objectDialog, "onSelect", function (selectedItems) {
                if (selectedItems && selectedItems.length > 0) {
                    if (selectedItems[0] != this.selectedItem) {
                        this.selectedItem = selectedItems[0];
                        this.valueNode.value = this.selectedItem.id;
                        this.setSelectedItem(this.selectedItem);
                        this.onChange();
                        this.onItemSelected(this.selectedItem);
                    }
                }
            });
            this.connect(objectDialog, "onCreateButtonClicked", "onItemCreate");
            if (this._dialogCssClass) {
                objectDialog.addDomNodeCSSClass(this._dialogCssClass);
            }
            if (this._entityType) {
                objectDialog.setEntityType(this._entityType);
            }
            if (this.propertyName) {
                objectDialog.setPropertyClassName(this.propertyName);
            }
            objectDialog.show(this.repository, this.objectClassName);
            ier_util_dialog.manage(objectDialog);
        }, _createCompositeButton:function (selectedItem) {
            if (selectedItem) {
                if (this._selectedItemButton) {
                    this._selectedItemButton.destroy();
                }
                var label = null;
                if (this.showVersionSelection) {
                    label = selectedItem.name + " ( Version " + selectedItem.attributes["MajorVersionNumber"] + "." + selectedItem.attributes["MinorVersionNumber"] + " )";
                }
                this._selectedItemButton = new ier_widget_ObjectCompositeButton({showRemoveIcon:true, selectedItemLabel:label, selectedItem:selectedItem, repository:this.repository});
                this.connect(this._selectedItemButton, "onItemClicked", "onItemClicked");
                this.connect(this._selectedItemButton, "onItemRemoved", dojo_lang.hitch(this, function (selectedItem, event) {
                    this.selectedItem = null;
                    this.valueNode.value = "";
                    this.onChange();
                    this.onItemRemoved(event);
                }));
                dojo_construct.place(this._selectedItemButton.domNode, this._selectedObjectsContainer, "first");
            }
        }, _onFocusContainer:function (evt) {
            dijit_focus.focus(this._selectButton);
        }, setObjectClassName:function (objectClassName) {
            this.objectClassName = objectClassName;
        }, setPropertyClassName:function (propertyName) {
            this.propertyName = propertyName;
        }, setEntityType:function (entityType) {
            this._entityType = entityType;
        }, get:function (name) {
            if (name == "displayedValue" || name == "value") {
                return this.getValue();
            } else {
                if (name == "label") {
                    return this.selectedItem ? this.selectedItem.name : "";
                } else {
                    return this.inherited(arguments);
                }
            }
        }, getValue:function () {
            return this.selectedItem ? this.selectedItem.id : "";
        }, _setDisabledAttr:function (bool) {
            if (this._selectButton) {
                if (bool) {
                    dojo_class.add(this._selectButton.domNode, "disabled");
                } else {
                    dojo_class.remove(this._selectButton.domNode, "disabled");
                }
            }
        }, onItemSelected:function (selectedItem) {
        }, onItemCreate:function () {
        }, onItemClicked:function (selectedItem, event) {
        }, onItemRemoved:function (event) {
        }, onChange:function () {
        }, isValid:function () {
            if (this.required) {
                return (this.selectedItem != null);
            }
            return true;
        }, _nop:null});
    });
}, "ier/widget/panes/ReportDefinitionPropertiesPane":function () {
    require({cache:{"url:ier/widget/panes/templates/ReportDefinitionPropertiesPane.html":"<div class=\"ierEntityItemPropertiesPane\">\r\n\t<label style=\"display: none;\" for=\"${id}_filter\">${ier_messages.reportDefinitionDialog_Available}</label>\t\r\n\t<div data-dojo-type=\"ecm.widget.FilterTextBox\" data-dojo-attach-point=\"_filterBox\" class=\"filterBox\" id=\"${id}_filter\" style=\"display:none;float:none;\"></div>\r\n\t<div data-dojo-type=\"ecm.widget.SloshBucket\" data-dojo-attach-point=\"_sloshBucket\" class=\"sloshBucket\" style=\"display:none;\"></div>\r\n</div>"}});
    define("ier/widget/panes/ReportDefinitionPropertiesPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/data/ItemFileWriteStore", "ecm/widget/FilterTextBox", "ecm/widget/SloshBucket", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/ReportDefinitionPropertiesPane.html"], function (dojo_declare, dojo_lang, dojo_array, domClass, geometry, domStyle, ItemFileWriteStore, ecm_widget_filterBox, ecm_widget_sloshBucket, ier_constants, ier_messages, ier_util, ier_widget_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.ReportDefinitionPropertiesPane", [ier_widget_IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, ier_messages:ier_messages, _availableItems:[], postCreate:function () {
            this.inherited(arguments);
            this.title = ier_messages.reportDefinitionDialog_ReportProperties;
            this._sloshBucket.hideAvailableOnAdd = true;
            this._sloshBucket.hasSorting = true;
            this._sloshBucket.tooltipClass = this;
            this.connect(this._filterBox, "_onInput", "_filter");
            this.connect(this._filterBox, "_setValueAttr", "_filter");
            this.connect(this._sloshBucket, "_onClickRemove", "onChange");
            this.connect(this._sloshBucket, "_onClickAdd", "onChange");
            this.connect(this._sloshBucket, "_onClickUp", "onChange");
            this.connect(this._sloshBucket, "_onClickDown", "onChange");
        }, createRendering:function (repository, reportDefinition) {
            this.repository = repository;
            domStyle.set(this._filterBox.domNode, "display", "");
            domStyle.set(this._sloshBucket.domNode, "display", "");
            var contentClass = this.repository.getContentClass(ier_constants.ClassName_ReportHold);
            this._availableItems = [];
            this.repository.retrievePropertyDescriptions(contentClass, dojo_lang.hitch(this, function (properties) {
                for (var i in properties) {
                    this._availableItems.push({label:properties[i].displayname, value:properties[i].symbolicname});
                }
                this._availableItems.sort(function (a, b) {
                    if (a.label < b.label) {
                        return -1;
                    } else {
                        if (a.label > b.label) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }
                });
                this.loadSelectableGrid(this._availableItems);
                var selectedItems = [], valueArray = {};
                if (reportDefinition) {
                    var params = reportDefinition.getParameters();
                    if (params) {
                        dojo_array.forEach(params, function (param) {
                            selectedItems.push({label:param.displayname, value:param.symname});
                            valueArray[param.symname] = param.symname;
                        });
                    }
                }
                this.loadSelectedGrid(selectedItems, valueArray);
                this.onCompleteRendering();
            }));
        }, loadSelectableGrid:function (availableItems) {
            this._availableItemsStore = new ItemFileWriteStore({data:{items:availableItems}, clearOnClose:true});
            var structure = [{field:"label", name:ier_messages.reportDefinitionDialog_Available, width:"100%"}];
            this._sloshBucket.setAvailableGridModel(this._availableItemsStore, structure);
            this._sloshBucket.filter({});
            this.connect(this._sloshBucket._availableData, "onRowDblClick", "onChange");
        }, loadSelectedGrid:function (selectedItems, valueArray, fixedItems) {
            this._selectedItemsStore = new ItemFileWriteStore({data:{items:selectedItems}, clearOnClose:true});
            var structure = [{field:"label", name:ier_messages.reportDefinitionDialog_Selected, width:"100%"}];
            this._sloshBucket.setSelectedValuesGridModel(this._selectedItemsStore, structure, valueArray, fixedItems);
            this.connect(this._sloshBucket._valuesGrid, "onRowDblClick", "onChange");
        }, getSelectedItems:function () {
            var selectedGriditems = this._sloshBucket.getData(this._sloshBucket.getSelectedValuesGrid());
            var newItems = [];
            for (var i = 0; i < selectedGriditems.length; i++) {
                newItems.push(selectedGriditems[i]);
            }
            return newItems;
        }, _filter:function () {
            var filterData = this._filterBox.get("value");
            if (this._filterData != filterData) {
                this._filterData = filterData;
                this._sloshBucket.filter({label:filterData + "*"});
            }
        }, resize:function (changeSize) {
            var size = geometry.getContentBox(this.domNode);
            var filterBoxSize = geometry.getMarginBox(this._filterBox);
            this._sloshBucket.resize({w:600, h:200});
        }, setEditable:function (editable) {
            this._sloshBucket.setEditable(editable);
        }, onChange:function () {
        }, onCompleteRendering:function () {
        }});
    });
}, "url:ier/widget/dialog/templates/BaseAccordionWizardDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierBaseAccordionWizardDialog\">\r\n\t<div data-dojo-type=\"dijit/layout/AccordionContainer\" data-dojo-attach-point=\"baseAccordionContainer\" style=\"overflow:auto\">\r\n    </div>\r\n</div>", "ier/widget/panes/EntityItemDispositionPane":function () {
    require({cache:{"url:ier/widget/panes/templates/EntityItemDispositionPane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\">\r\n\t<span data-dojo-attach-point=\"dispositionEmbeddedAssistance\"></span>\r\n\t\r\n\t<fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t<legend style=\"display: none\">${messages.baseDialog_disposition}</legend>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_noneScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"noneScheduleRadioButton\" id=\"${id}_noneSchedule\" \r\n\t\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\" data-dojo-props=\"checked:true\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_noneScheduleRadioButtonLabel\" for=\"${id}_noneSchedule\">${messages.entityItemDispositionPane_noSchedule}</label>&nbsp;\r\n\r\n\t\t\t<div data-dojo-attach-point=\"_dispositionPropagationSelect\" name=\"${id}_propagationSelect\" class=\"ierIdententation\" style=\"display:none;margin-top:8px\" data-dojo-attach-event=\"onChange:onInputChange\"\r\n\t\t\t\tdata-dojo-props=\"disabled:true\" data-dojo-type=\"ier/widget/DispositionPropagationSelector\"></div>\r\n\t\t</div>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_ddScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"ddScheduleRadioButton\" id=\"${id}_ddSchedule\" \r\n\t\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_ddScheduleRadioButtonLabel\" for=\"${id}_ddSchedule\">${messages.entityItemDispositionPane_defensibleDisposableSchedule}</label>&nbsp;\r\n\t\t\t\r\n\t\t\t</br>\r\n\t\t\t<div id=\"${id}_defensibleDisposalPane\" data-dojo-attach-point=\"_defensibleDisposalPane\" data-dojo-type=\"ier/widget/panes/DefensibleDisposalDispositionPane\"></div>\r\n\t\t</div>\r\n\t\r\n\t\t<div data-dojo-attach-point=\"_legacyScheduleSection\">\r\n\t\t\t</br>\r\n\t\t\t<div value=\"true\" type=\"radio\" name=\"${id}_scheduleGroup\" data-dojo-attach-point=\"legacyScheduleRadioButton\" id=\"${id}_legacySchedule\" \r\n\t\t\t data-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t<label data-dojo-attach-point=\"_legacyScheduleRadioButtonLabel\" for=\"${id}_legacySchedule\">${messages.entityItemDispositionPane_legacySchedule}</label>&nbsp;\r\n\t\r\n\t\t\t<div id=\"${id}_legacyDispositionPane\" data-dojo-attach-point=\"_legacyDispositionPane\" data-dojo-type=\"ier/widget/panes/LegacyDispositionSchedulePane\"></div>\r\n\t\t</div>\r\n\t\t\r\n\t</fieldset>\r\n</div>"}});
    define("ier/widget/panes/EntityItemDispositionPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dijit/registry", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/widget/ObjectSelector", "ier/widget/dialog/IERBaseDialogPane", "ier/widget/dialog/AddDispositionScheduleDialog", "ier/model/DefensibleDisposalSchedule", "dojo/text!./templates/EntityItemDispositionPane.html", "dijit/form/TextBox", "dijit/form/Button", "dijit/form/RadioButton", "ecm/widget/HoverHelp", "dijit/form/NumberSpinner", "dijit/form/FilteringSelect", "dijit/form/Select", "ier/widget/panes/DefensibleDisposalDispositionPane", "ier/widget/panes/LegacyDispositionSchedulePane", "ier/widget/DispositionPropagationSelector"], function (dojo_declare, dojo_lang, dojo_domConstruct, dojo_style, dojo_class, dijit_registry, ier_constants, ier_messages, ier_util, ier_util_dialog, ier_widget_ObjectSelector, ier_widget_dialog_IERBaseDialogPane, ier_dialog_AddDispositionScheduleDialog, DefensibleDisposalSchedule, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemDispositionPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, _dispositionListDialog:null, entityItemPropertiesPane:null, readOnly:false, item:null, _isLoaded:false, externallyManaged:false, createRendering:function (params) {
            if (!this._isLoaded) {
                this.repository = params.repository;
                this.parentFolder = params.parentFolder;
                this.entityItemPropertiesPane = params.entityItemPropertiesPane;
                this.legacyDispositionSchedule = params.legacyDispositionSchedule;
                this.item = params.item;
                if (!this.item) {
                    this.dispositionEmbeddedAssistance.innerHTML = ier_messages.entityItemDispositionPane_embeddedAssistance;
                } else {
                    this.dispositionEmbeddedAssistance.innerHTML = ier_messages.entityItemDispositionPane_legacyScheduleAssistance;
                }
                this.connect(this.ddScheduleRadioButton, "onClick", "_scheduleButtonsClicked");
                this.connect(this.legacyScheduleRadioButton, "onClick", "_scheduleButtonsClicked");
                this.connect(this.noneScheduleRadioButton, "onClick", "_scheduleButtonsClicked");
                var externallyManaged = false;
                if (this.item) {
                    externallyManaged = this.item.attributes[ier_constants.Property_RMExternallyManagedBy];
                }
                if (this.item && this.item.isFolder() && this.item.isDefensibleDisposal()) {
                    this.ddScheduleRadioButton.set("checked", true);
                    this.createDDScheduleRendering();
                    this._defensibleDisposalPane.set("schedule", this.item.getDefensibleDisposalSchedule());
                    dojo_style.set(this.dispositionEmbeddedAssistance, "display", "none");
                    dojo_style.set(this._legacyScheduleSection, "display", "none");
                    dojo_style.set(this._noneScheduleSection, "display", "none");
                    dojo_style.set(this.ddScheduleRadioButton, "display", "none");
                } else {
                    if (this.legacyDispositionSchedule) {
                        this.createLegacyScheduleRendering();
                        this.legacyScheduleRadioButton.set("checked", true);
                        this.disableDefensibleDisposalSchedules(true);
                        this.disableDDScheduleRadiosSelector(true);
                        dojo_style.set(this._ddScheduleSection, "display", "none");
                    } else {
                        if (!this.item && this.entityItemPropertiesPane.rootClassId == ier_constants.ClassName_RecordCategory) {
                            this.disableDefensibleDisposalSchedules(true);
                        } else {
                            dojo_style.set(this._ddScheduleSection, "display", "none");
                        }
                        if (this.parentFolder && !this.item) {
                            this.parentFolder.getLegacyDispositionSchedule(dojo_lang.hitch(this, function (dispSchedule) {
                                if (dispSchedule) {
                                    this.createLegacyScheduleRendering();
                                    this.legacyScheduleRadioButton.set("checked", true);
                                } else {
                                    this.disableLegacyDispositionSchedules(true);
                                }
                            }));
                        } else {
                            this.disableLegacyDispositionSchedules(true);
                        }
                    }
                }
                if (externallyManaged) {
                    this.disableDefensibleDisposalSchedules(true);
                    this.disableDDScheduleRadiosSelector(true);
                    this.disableNoneScheduleRadioSelector(true);
                    this.disableLegacyDispositionSchedules(true);
                    this.disableLegacyScheduleRadioSelector(true);
                }
                this._isLoaded = true;
            }
        }, isLoaded:function () {
            return this._isLoaded;
        }, createLegacyScheduleRendering:function () {
            this._legacyDispositionPane.createRendering({repository:this.repository, legacyDispositionSchedule:this.legacyDispositionSchedule, item:this.item, parentItem:this.parentFolder});
            this.connect(this._legacyDispositionPane, "onInputChange", "onInputChange");
            this.connect(this._legacyDispositionPane, "onInputChange", "onDispositionChanged");
            this._legacyScheduleCreated = true;
        }, createDDScheduleRendering:function () {
            this._defensibleDisposalPane.createRendering({repository:this.repository});
            this.connect(this._defensibleDisposalPane, "onInputChange", "onInputChange");
            this.connect(this._defensibleDisposalPane, "onInputChange", "onDispositionChanged");
            this._ddScheduleCreated = true;
        }, postCreate:function () {
            this.inherited(arguments);
        }, isValidationRequired:function () {
            return true;
        }, validate:function () {
            if (this.ddScheduleRadioButton.get("checked") == true) {
                if (this._defensibleDisposalPane) {
                    return this._defensibleDisposalPane.validate();
                }
            }
            if (this.legacyScheduleRadioButton.get("checked") == true) {
                if (this._legacyDispositionPane) {
                    return this._legacyDispositionPane.validate();
                }
            }
            return true;
        }, _scheduleButtonsClicked:function (evt) {
            var target = dijit_registry.getEnclosingWidget(evt.target);
            var legacyChecked = target == this.legacyScheduleRadioButton;
            var ddChecked = target == this.ddScheduleRadioButton;
            if (legacyChecked) {
                this.disableLegacyDispositionSchedules(false);
                this.disableDefensibleDisposalSchedules(true);
                this.disableNoneRadioSelector(true);
            } else {
                if (ddChecked) {
                    this.disableDefensibleDisposalSchedules(false);
                    this.disableLegacyDispositionSchedules(true);
                    this.disableNoneRadioSelector(true);
                } else {
                    this.disableLegacyDispositionSchedules(true);
                    this.disableDefensibleDisposalSchedules(true);
                    if (this.item) {
                        dojo_style.set(this._dispositionPropagationSelect.domNode, "display", "");
                        this._dispositionPropagationSelect.set("disabled", false);
                    } else {
                        dojo_style.set(this._dispositionPropagationSelect.domNode, "display", "none");
                        this._dispositionPropagationSelect.set("disabled", true);
                    }
                }
            }
            this.onDispositionChanged();
        }, disableDDScheduleRadiosSelector:function (disabled) {
            if (!disabled) {
                this.ddScheduleRadioButton.set("disabled", false);
                dojo_style.set(this._ddScheduleRadioButtonLabel, "color", "");
            } else {
                this.ddScheduleRadioButton.set("disabled", true);
                dojo_class.add(this._ddScheduleRadioButtonLabel, "labelReadOnly");
                dojo_style.set(this._ddScheduleRadioButtonLabel, "color", "gray");
            }
        }, disableNoneRadioSelector:function (disabled) {
            this._dispositionPropagationSelect.set("disabled", disabled);
        }, disableLegacyScheduleRadioSelector:function (disabled) {
            if (!disabled) {
                this.legacyScheduleRadioButton.set("disabled", false);
                dojo_class.add(this._legacyScheduleRadioButtonLabel, "labelReadOnly");
                dojo_style.set(this._legacyScheduleAssistance, "display", "");
            } else {
                this.legacyScheduleRadioButton.set("disabled", true);
                dojo_class.remove(this._legacyScheduleRadioButtonLabel, "gray");
                if (this._legacyScheduleAssistance) {
                    dojo_style.set(this._legacyScheduleAssistance, "display", "none");
                }
            }
        }, disableNoneScheduleRadioSelector:function (disabled) {
            if (!disabled) {
                this.noneScheduleRadioButton.set("disabled", false);
                dojo_class.add(this._noneScheduleRadioButtonLabel, "labelReadOnly");
            } else {
                this.noneScheduleRadioButton.set("disabled", true);
                dojo_class.remove(this._noneScheduleRadioButtonLabel, "gray");
            }
        }, disableDefensibleDisposalSchedules:function (disabled) {
            if (!disabled) {
                this.ddScheduleRadioButton.set("checked", true);
                if (!this._ddScheduleCreated) {
                    this.createDDScheduleRendering();
                }
                this._defensibleDisposalPane.set("disabled", false);
            } else {
                this._defensibleDisposalPane.set("disabled", true);
            }
        }, disableLegacyDispositionSchedules:function (disable) {
            if (!disable) {
                this.legacyScheduleRadioButton.set("checked", true);
                if (!this._legacyScheduleCreated) {
                    this.createLegacyScheduleRendering();
                }
                this._legacyDispositionPane.set("disabled", false);
            } else {
                this._legacyDispositionPane.set("disabled", true);
            }
        }, getDispositionSchedule:function () {
            if (this.legacyScheduleRadioButton.get("checked") == true) {
                return this._legacyDispositionPane.get("schedule");
            } else {
                if (this.ddScheduleRadioButton.get("checked") == true) {
                    return this._defensibleDisposalPane.get("schedule");
                } else {
                    return null;
                }
            }
        }, getLegacyDispositionScheduleProperties:function () {
            var params = {};
            var createdAndSelected = this.legacyScheduleRadioButton.get("checked") == true && this._legacyScheduleCreated;
            params[ier_constants.Param_SchedulePropagationLevel] = this.getSchedulePropagationLevel();
            if (createdAndSelected) {
                params[ier_constants.Property_DispositonAuthority] = createdAndSelected ? this._legacyDispositionPane.get("authority") : null;
                params[ier_constants.Property_DisposalScheduleInheritedFrom] = createdAndSelected ? this._legacyDispositionPane.getDispositionScheduleInheritedFrom() : null;
            }
            return params;
        }, getSchedulePropagationLevel:function () {
            if (this.legacyScheduleRadioButton.get("checked") == true && this._legacyScheduleCreated) {
                return this._legacyDispositionPane.get("propagation");
            } else {
                if (this.noneScheduleRadioButton.get("checked") == true && this._dispositionPropagationSelect.get("disabled") == false) {
                    return this._dispositionPropagationSelect.get("value");
                } else {
                    return null;
                }
            }
        }, getDispositionAuthority:function () {
            return this._legacyScheduleCreated ? this._legacyDispositionPane.get("authority") : null;
        }, onDispositionChanged:function () {
        }});
    });
}, "ier/widget/CommonConditionsForm":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/json", "dojo/aspect", "dojo/data/ItemFileReadStore", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/DeferredList", "dojo/_base/Deferred", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/model/SearchCriterion", "ecm/model/SearchConfiguration", "ecm/model/_searchUtils", "ecm/widget/search/AttributeDefinitionsForm", "ier/constants", "ier/messages", "ier/util/util", "dojo/text!./templates/CommonConditionsForm.html", "dijit/form/Button", "dijit/form/RadioButton", "dijit/form/Select"], function (dojo_declare, dojo_array, dojo_lang, dojo_json, dojo_aspect, ItemFileReadStore, dom_class, dojo_construct, dojo_style, DeferredList, Deferred, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_model_SearchCriterion, SearchConfiguration, utils, ecm_widget_search_AttributeDefinitionsForm, ier_constants, ier_messages, ier_util, templateString) {
        return dojo_declare("ier.widget.CommonConditionsForm", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {widgetsInTemplate:true, templateString:templateString, _messages:ier_messages, repository:null, attributeForm:null, showContentContains:false, condition:null, _contentClassName:null, _contentClass:null, _contentTypes:["CONTENT", "METADATA"], readOnly:false, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._addPropertyButton, "onClick", "addProperty");
            if (arguments.repository) {
                this.setRepository(arguments.repository);
            }
            if (arguments.className) {
                this.setClassName(arguments.className);
            }
        }, setRepository:function (repository) {
            this.repository = repository;
        }, setClassName:function (contentClassName) {
            if (this.repository) {
                this._contentClassName = contentClassName;
                this._contentClass = this.repository.getContentClass(contentClassName);
                if (!this.condition) {
                    this.condition = {className:contentClassName};
                }
            }
        }, clear:function () {
            if (this.attributeForm) {
                this.attributeForm.destroyRecursive();
            }
            this.attributeForm = null;
            delete this.condition;
            this.condition = null;
        }, setCondition:function (condition) {
            this.condition = condition;
            if (this.repository) {
                if (!this.condition) {
                    this.condition = {className:this._contentClassName};
                }
                this.renderCondition(this.condition);
            }
        }, getCondition:function () {
            if (!this.condition) {
                this.condition = this._contentClassName && {className:this._contentClassName};
            }
            this.saveCondition(this.condition.className);
            return this.condition;
        }, removeCondition:function () {
            this.condition = null;
        }, _normalizeUserCriterion:function (isJson, criteria, criterion, callback) {
            criterion.selectedOperator = criteria.operator;
            var searchConfig = SearchConfiguration.getSearchConfiguration();
            if (searchConfig.isUserProperty(criteria.name, "p8")) {
                if (!isJson) {
                    this.repository.getUser(criteria.values, dojo_lang.hitch(this, function (user) {
                        criterion.values = [user];
                        callback(criterion);
                    }));
                } else {
                    callback(criterion);
                }
            } else {
                callback(criterion);
            }
        }, renderCondition:function (condition) {
            this.condition = condition;
            var className = condition.className;
            if (condition) {
                if (className) {
                    if (!this.attributeForm) {
                        this.attributeForm = new ecm_widget_search_AttributeDefinitionsForm({getWidth:function () {
                            return 0;
                        }, onFormValidate:dojo_lang.hitch(this, function (valid) {
                            this.onFormValidate(valid);
                        })});
                        this.own(dojo_aspect.after(this.attributeForm, "onFinishLoadingAttributes", dojo_lang.hitch(this, function () {
                            this.readOnly && this.setReadOnly();
                        })));
                        this.own(dojo_aspect.after(this.attributeForm, "onChange", dojo_lang.hitch(this, function () {
                            this.removeOperators();
                            this.onChange();
                        })));
                    }
                    dojo_construct.place(this.attributeForm.domNode, this._propertyContainer, "only");
                    this.onRenderCondition(condition);
                    var objectType = (className == ier_constants.ClassName_Record ? "document" : "folder");
                    var criteria = [];
                    var deferArray = [];
                    if (condition.criteria && condition.criteria.length > 0) {
                        for (var i in condition.criteria) {
                            var c = condition.criteria[i];
                            var conditionDeferred = new Deferred();
                            var criterion = new ecm_model_SearchCriterion(c.name);
                            var isJsonValues = false;
                            if (c.jsonValues) {
                                var value = dojo_json.fromJson(c.jsonValues);
                                criterion.values = value;
                                isJsonValues = true;
                            } else {
                                criterion.values = c.values;
                            }
                            deferArray.push(conditionDeferred);
                            criterion.deferredObjRef = conditionDeferred;
                            this._normalizeUserCriterion(isJsonValues, c, criterion, dojo_lang.hitch(this, function (crit) {
                                criteria.push(crit);
                                crit.deferredObjRef.resolve();
                            }));
                        }
                    }
                    var defs = new DeferredList(deferArray);
                    defs.then(dojo_lang.hitch(this, function () {
                        if (!this._contentClass) {
                            this._contentClass = this.repository.getContentClass(className);
                        }
                        this.onFilterCriteria(condition, criteria);
                        this.attributeForm.setContentClass(this._contentClass, true, objectType, criteria);
                        if (condition.content && this.showContentContains) {
                            condition.content.type == "CONTENT" && this._contentBox.set("value", condition.content.value);
                        } else {
                            this._contentBox.set("value", "");
                        }
                        var contentDisplay = (this.showContentContains && className == ier_constants.ClassName_Record ? "" : "none");
                        dojo_style.set(this._contentContainer, "display", contentDisplay);
                        if (condition.matchAll === false) {
                            this.matchAnyButton.set("checked", true);
                        } else {
                            this.matchAllButton.set("checked", true);
                        }
                        this.condition = condition;
                    }));
                }
            }
        }, onChange:function () {
        }, onSaveCondition:function (contentClass) {
        }, onFormValidate:function (valid) {
        }, onRenderCondition:function (condition) {
        }, onFilterCriteria:function (condition, criteria) {
        }, saveCondition:function (className) {
            var condition = this.condition;
            if (className) {
                var criteria = (this.attributeForm && this.attributeForm.createSearchCriteriaFromAttributeDefintions());
                criteria = dojo_array.filter((criteria || []), function (c) {
                    if (c.value) {
                        return true;
                    } else {
                        var operator = c.selectedOperator;
                        return (operator == "NULL" || operator == "NOTNULL");
                    }
                });
                var contentValue = null;
                if (className == ier_constants.ClassName_Record && this.showContentContains) {
                    contentValue = this._contentBox.get("value");
                }
                if (criteria.length === 0 && !contentValue) {
                    if (condition) {
                        this.removeCondition();
                        this.condition = {className:className};
                    }
                } else {
                    criteria = dojo_array.map(criteria, function (c) {
                        return {name:c.id, operator:c.selectedOperator, values:c.values, type:c.dataType};
                    });
                    var matchAll = !!this.matchAllButton.get("checked");
                    if (condition) {
                        condition.criteria = criteria;
                        condition.matchAll = matchAll;
                        delete condition.content;
                    } else {
                        condition = {className:className, criteria:criteria, matchAll:matchAll};
                    }
                    if (contentValue) {
                        condition.content = {value:contentValue, type:this._contentTypes[0]};
                    }
                }
            }
            this.onSaveCondition();
        }, addProperty:function () {
            if (this.condition) {
                if (this.attributeForm) {
                    this.attributeForm.addOneMoreAttributeDefinition();
                }
            }
        }, setReadOnlyFlag:function () {
            this.readOnly = true;
        }, removeOperators:function () {
            dojo_array.forEach(this.attributeForm.getChildren(), function (attWidget) {
                if (attWidget._operatorSelect) {
                    attWidget._operatorSelect.store = null;
                    var operatioms = dojo_array.filter(utils.getAvailableOperators(attWidget.attributeDefinition), function (oper) {
                        return oper != "NULL" && oper != "CONTAINS";
                    }, this);
                    var operatorOptions = utils.getOperatorSelectOptions(operatioms);
                    var opStore = new ItemFileReadStore({data:{identifier:"value", label:"label", items:operatorOptions}});
                    opStore._forceLoad();
                    attWidget._operatorSelect && attWidget._operatorSelect.set("store", opStore);
                    if (attWidget._operatorSelect.get("value") == "NULL" || attWidget._operatorSelect.get("value") == "CONTAINS") {
                        attWidget._operatorSelect.set("value", operatioms[0]);
                    }
                }
            }, this);
        }, setReadOnly:function () {
            this.readOnly = true;
            dom_class.add(this.domNode, "ierConditionLabelDisabled");
            this._addPropertyButton.set("disabled", true);
            this._contentBox.set("disabled", true);
            this.matchAllButton.set("disabled", true);
            this.matchAnyButton.set("disabled", true);
            if (this.attributeForm) {
                var attWidgets = this.attributeForm.getChildren();
                dojo_array.forEach(attWidgets, dojo_lang.hitch(this, function (attWidget) {
                    if (attWidget._allNamesSelect) {
                        attWidget._allNamesSelect.set("disabled", true);
                    }
                    if (attWidget._hoverHelp) {
                        attWidget._hoverHelp.set("disabled", true);
                    }
                    if (attWidget._operatorSelect) {
                        attWidget._operatorSelect.set("disabled", true);
                    }
                    var fields = attWidget.getFields();
                    dojo_array.forEach(fields, dojo_lang.hitch(this, function (f) {
                        f.set("disabled", true);
                    }));
                    dojo_style.set(attWidget.controlButtons, "display", "none");
                }));
            }
        }});
    });
}, "ier/widget/dialog/LinkRecordDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/ContentClassSelector", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/panes/CommonPropertiesPane", "ier/widget/DocumentSelector", "ier/widget/_FolderSelectorDropDown", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/LinkRecordDialog.html", "dijit/layout/ContentPane", "ecm/widget/HoverHelp", "ecm/widget/TextBox", "dijit/form/DropDownButton", "ier/widget/panes/EntityItemPropertiesPane"], function (dojo_declare, dojo_lang, dojo_class, ecm_model_desktop, ecm_model_Request, ecm_widget_ContentClassSelector, ier_constants, ier_messages, ier_util, ier_widget_CommonPropertiesPane, ier_widget_DocumentSelector, ier_widget_FolderSelectorDropDown, ier_dialog_IERBaseDialog, contentString, dijit_form_DropDownButton) {
        return dojo_declare("ier.widget.dialog.linkRecordDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _record:null, _fp_repository_location:null, _fp_link_location:null, _messages:ier_messages, _items:null, baseClass:"RMLink", constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierSmallDialog");
            this.addChildPane(this._propertiesPane);
            this.okButton = this.addButton(ier_messages.linkRecordDialog_linkButton, "_onClickLink", false, true);
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.repository = repository;
            this._items = items;
            if (this.repository.isIERLoaded()) {
                this._renderDialog(repository, "Relation");
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog(repository, "Relation");
                }));
            }
        }, _renderDialog:function (repository, rootClassId) {
            this.setTitle(ier_messages.linkRecordDialog_title);
            this.setIntroText(ier_messages.linkRecordDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh28.htm"));
            var linkNode = this.createHrefLinkNode(learnMoreLink, ier_messages.dialog_LearnMoreLink);
            this.introText.appendChild(linkNode);
            this.okButton.set("enabled", true);
            if (this._folderSelector) {
                this._folderSelector.destroy();
                this._folderSelector = null;
            }
            var baseConstraints = {labelId:this.id + "_dispositonScheduleLabel", label:ier_messages.entityItemDispositionPane_dispositionInstructions + ":", selectButtonLabel:"Select", showCreateButton:false};
            this._folderSelector = new ier_widget_DocumentSelector(baseConstraints);
            this._folderSelector.setRepository(repository);
            this._folderSelector.setObjectClassName(ier_constants.ClassName_Record);
            this.addChildWidget(this._folderSelectorCell);
            this._folderSelectorCell.appendChild(this._folderSelector.domNode);
            this.setResizable(true);
            this._propertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:ier_constants.ClassName_Link, defaultNameProperty:ier_constants.Property_LinkName, entityType:ier_constants.EntityType_Link, hideContentClassSelector:false, changeAttributesIndicator:false, item:this.item});
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
            this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                this._fp_repository_location = folder.item.id;
                this.okButton.set("disabled", !(this.validate()));
            });
            this.resize();
        }, validate:function () {
            return true;
        }, _setPropertyLengths:function (repository) {
            var contentClass = repository.getContentClass(this._items[0].getClassName());
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                for (var i in attributeDefinitions) {
                    var attributeDefinition = attributeDefinitions[i];
                    if (attributeDefinition.id == ier_constants.Property_RMEntityDescription) {
                        this._description.set("maxLength", attributeDefinition.maxLength);
                    }
                    if (attributeDefinition.id == ier_constants.Property_DocumentTitle) {
                        this._documentTitle.set("maxLength", attributeDefinition.maxLength);
                    }
                }
            }));
        }, _onClickLink:function () {
            if (this.validate()) {
                var items = this._items;
                var item = items[0];
                var itemLink = this._propertiesPane._contentClassSelector.selectedContentClass.id;
                var serviceParams = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (itemRetrieved) {
                    this.onCancel();
                }));
                serviceParams.requestParams[ier_constants.Param_RecordId] = item.id;
                serviceParams.requestParams[ier_constants.Param_LinkedRecordId] = "ElectronicRecordInfo,{851410BE-CAB4-45CE-8D28-74831EBBE257},{36C8FC8A-D984-41E8-AF92-7D77EF2CBC2F}";
                serviceParams.requestParams[ier_constants.Param_LinkClass] = itemLink;
                serviceParams.requestParams[ier_constants.Param_Name] = this._propertiesPane.getPropertyValue(ier_constants.Property_LinkName);
                serviceParams.requestParams[ier_constants.Param_Description] = this._propertiesPane.getPropertyValue(ier_constants.Property_RMEntityDescription);
                serviceParams.requestParams[ier_constants.Param_LinkReason] = this._propertiesPane.getPropertyValue(ier_constants.Property_ReasonForExtract);
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_LinkRecord, ier_constants.PostEncoding, serviceParams);
            }
        }});
    });
}, "url:ier/widget/admin/templates/DisplayColumnDialogContent.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" data-dojo-props=\"gutters: false\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">\r\n\t\t<table role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>${_messages.admin_list_label}:</label></td>\r\n\t\t\t\t<td><span data-dojo-attach-point=\"_listNode\" class=\"ierAdminValue\"></span></td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t\t<div class=\"ierAdminSloshBucketFilterBar\">\r\n\t\t\t<label for=\"${id}_filterBox\" style=\"display: none;\">${_messages.admin_filter}</label>\r\n\t\t\t<div data-dojo-type=\"ecm/widget/FilterTextBox\" data-dojo-attach-point=\"_filterBox\"\r\n\t\t\t\tdata-dojo-props=\"intermediateChanges: true\" id=\"${id}_filterBox\" style=\"float: none;\" placeholder=\"${_messages.admin_filter}\"></div>\r\n\t\t\t<div class=\"ierAdminSloshBucketToolbar\">\r\n\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreButton\">${_messages.admin_restoreDefaults}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm/widget/SloshBucket\" data-dojo-attach-point=\"_propertySelector\" data-dojo-props=\"region: 'center'\" class=\"ierAdminPropertySelector\"></div>\r\n</div>\r\n", "ier/model/ResultSet":function () {
    define(["dojo/_base/declare", "dojo/data/util/sorter", "ecm/model/ResultSet", "ier/util/menu"], function (dojo_declare, dojo_data_util_Sorter, ecm_model_ResultSet, ier_util_menu) {
        return dojo_declare("ier.model.ResultSet", [ecm_model_ResultSet], {getActionsMenuItemsType:function (items) {
            return ier_util_menu.getContainersAndRecordsContextMenuType(items);
        }, getToolbarDef:function () {
            if (this.toolbarDef) {
                return this.toolbarDef;
            } else {
                var toolbarDef = "ContentListToolbar";
                return toolbarDef;
            }
        }, doSort:function (params, callback, store) {
            if (this.sortFunc && this.continuationData) {
                this.sortFunc(params);
                return;
            }
            if (!this.parentFolder && !this.searchTemplate) {
                if (params && store && this.items) {
                    this.items.sort(dojo_data_util_Sorter.createSortFunction(params, {comparatorMap:store.comparatorMap, getValue:function (item, attribute) {
                        var type = item && item.getValue && item.getAttributeType && item.getAttributeType(attribute);
                        if (type == "xs:timestamp") {
                            return item.getValue(attribute);
                        } else {
                            return store.getValue(item, attribute);
                        }
                    }}));
                    if (callback) {
                        callback(this);
                    }
                    return;
                }
            }
            this.inherited(arguments);
        }});
    });
}, "ier/model/RecordVolumeContainerMixin":function () {
    define("ier/model/RecordVolumeContainerMixin", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util) {
        return dojo_declare("ier.model.RecordVolumeContainerMixin", null, {addRecordVolume:function (className, criterias, permissions, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    var recordVolume = ier_util.createBaseEntityItem(response.parent, this.repository, null, this.parent);
                    this.updatePropertiesAndAttributes(recordVolume, false);
                    this.repository.onItemsUpdated(this);
                    callback(recordVolume);
                }
            }));
            params.requestParams[ier_constants.Param_ParentFolderId] = this.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateRecordVolume, ier_constants.PostEncoding, params);
        }});
    });
}, "ier/widget/dialog/RecordVolumePropertiesDialog":function () {
    define("ier/widget/dialog/RecordVolumePropertiesDialog", ["dojo/_base/declare", "dojo/_base/lang", "dojo/string", "ier/constants", "ier/messages", "ier/widget/dialog/RecordContainerPropertiesDialog"], function (dojo_declare, dojo_lang, dojo_string, ier_constants, ier_messages, ier_dialog_RecordContainerPropertiesDialog) {
        return dojo_declare("ier.widget.dialog.RecordVolumnePropertiesDialog", [ier_dialog_RecordContainerPropertiesDialog], {_renderDialog:function () {
            this.set("title", ier_messages.recordVolume);
            this.setResizable(true);
            this.item.retrieveAttributes(dojo_lang.hitch(this, function () {
                this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:ier_constants.ClassName_Volume, defaultNameProperty:ier_constants.Property_VolumeName, entityType:ier_constants.EntityType_RecordVolume, hideContentClassSelector:false, disableContentClassSelector:true, item:this.item, isReadOnly:!this.item.privModifyProperties, isCreate:false});
                this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes) {
                    this._entityItemDetailPane.createRendering(this.item, attributes);
                });
                this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                    var contentClass = this._entityItemPropertiesPane.getContentClass();
                    var properties = this._entityItemPropertiesPane.getProperties();
                    this._entityItemSecurityPane.createRendering(this.repository, this.item, this._parentFolder, contentClass, properties, !this.item.privModifyPermissions);
                    this._entityItemPropertiesPane.resizeCommonProperties();
                    this.resize();
                });
                this._initHoldPane();
                this._initLinksPane();
                this._initHistoryPane();
            }), false, true);
        }});
    });
}, "url:ier/widget/admin/templates/SystemPropertyDialogContent.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" data-dojo-props=\"gutters: false\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">\r\n\t\t<table role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>${_messages.admin_list_label}</label></td>\r\n\t\t\t\t<td><span data-dojo-attach-point=\"_listNode\" class=\"ierAdminValue\"></span></td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t\t<div class=\"ierAdminSloshBucketFilterBar\">\r\n\t\t\t<label for=\"${id}_filterBox\" style=\"display: none;\">${_messages.admin_filter}</label>\r\n\t\t\t<div data-dojo-type=\"ecm/widget/FilterTextBox\" data-dojo-attach-point=\"_filterBox\"\r\n\t\t\t\tdata-dojo-props=\"intermediateChanges: true\" placeholder=\"${_messages.admin_filter}\" id=\"${id}_filterBox\" style=\"float: none;\"></div>\r\n\t\t\t<div class=\"ierAdminSloshBucketToolbar\">\r\n\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreButton\">${_messages.admin_restoreDefaults}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm/widget/SloshBucket\" data-dojo-attach-point=\"_propertySelector\" data-dojo-props=\"region: 'center'\" class=\"ierAdminPropertySelector\"></div>\r\n</div>\r\n", "ier/widget/panes/EntityItemSecurityPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-class", "ier/constants", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemSecurityPane.html", "dijit/layout/ContentPane", "ecm/widget/SecurityPane"], function (dojo_declare, dojo_array, dojo_lang, dojo_class, ier_constants, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemSecurityPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _parentFolder:null, _contentClass:null, _permissions:null, _isReadOnly:false, _item:null, postCreate:function () {
            this.inherited(arguments);
            this._securityPane.enableShowPermissionTypeIcons = true;
            this._securityPane.enableFolderPropagationOptions = true;
            this._securityPane.enableDocumentPermissionPropagationOptions = true;
            this.connect(this._securityPane, "onChange", "onSecuritiyChanged");
        }, createRendering:function (repository, item, parentFolder, contentClass, properties, isReadOnly) {
            this.repository = repository;
            this._item = item;
            this._parentFolder = parentFolder;
            this._isReadOnly = isReadOnly ? isReadOnly : false;
            if (contentClass) {
                this.setContentClass(contentClass);
            }
            if (properties) {
                this.setProperties(properties);
            }
            if (item) {
                this._retrievePermissions();
            }
        }, hide:function () {
            dojo_class.add(this._securityPane.domNode, "dijitHidden");
        }, isValidationRequired:function () {
            return false;
        }, updateSecurityPolicyTemplate:function () {
            var securityPolicy = this.getSecurityPolicy();
            if (securityPolicy) {
                this._renderPermissions(this._permissions, null, securityPolicy, this._isReadOnly, true);
            }
        }, updateParentFolder:function (parentFolder) {
            this._parentFolder = parentFolder;
            parentFolder.retrievePermissions(dojo_lang.hitch(this, function (parentFolderPermissions) {
                this._securityPane.updateParentPermissions(parentFolderPermissions);
            }));
        }, setContentClass:function (contentClass) {
            if (!this._contentClass || this._contentClass.name != contentClass.name) {
                this._contentClass = contentClass;
                this._markingValues = null;
                if (!this._item) {
                    this._permissions = null;
                    this._retrievePermissions();
                }
            }
        }, _retrievePermissions:function () {
            if (this._permissions) {
                this._processPermissions(this._permissions);
            } else {
                if (this._item) {
                    this._item.permissions = null;
                    this._item.retrievePermissions(dojo_lang.hitch(this, this._processPermissions));
                } else {
                    if (this._contentClass) {
                        this._contentClass.retrieveDefaultInstancePermissions(dojo_lang.hitch(this, this._processPermissions));
                    }
                }
            }
        }, setProperties:function (properties) {
            this._markingValues = null;
            if (this._item) {
                var props = this._isReadOnly ? null : properties;
                var markingValues = [];
                var markingProperties = this._contentClass.markingProperties;
                if (markingProperties) {
                    var attributes;
                    if (props) {
                        attributes = dojo_lang.clone(this._item.attributes);
                        dojo_array.forEach(props, function (property) {
                            if (markingProperties[property.name]) {
                                attributes[property.name] = property.value;
                            }
                        });
                    } else {
                        attributes = this._item.attributes;
                    }
                    for (i in attributes) {
                        var markings = markingProperties[i];
                        if (markings && i !== ier_constants.Property_PreventRMEntityDeletion) {
                            var value = attributes[i] instanceof Array ? attributes[i].join() : attributes[i];
                            if (value.length > 0) {
                                markingValues.push(attributes[i]);
                            }
                        }
                    }
                }
                this._markingValues = markingValues;
            }
        }, getSecurityPolicy:function () {
            var securityPolicy = null;
            if (this._contentClass && this._contentClass._securityPolicy) {
                securityPolicy = this._contentClass._securityPolicy;
            }
            return securityPolicy;
        }, _processPermissions:function (permissions) {
            this._securityPane.reset();
            this._securityPane.setRepository(this.repository);
            this._securityPane.setItem(this._item);
            this._permissions = permissions;
            var securityPolicy = this.getSecurityPolicy();
            var parentFolder = this._parentFolder;
            if (parentFolder && parentFolder.isIERFavorite) {
                parentFolder = parentFolder.item;
            }
            if (!this._item && parentFolder) {
                parentFolder.retrievePermissions(dojo_lang.hitch(this, function (folderPermissions) {
                    this._renderPermissions(this._permissions, folderPermissions, securityPolicy, this._isReadOnly, true);
                }));
            } else {
                this._renderPermissions(this._permissions, null, securityPolicy, this._isReadOnly, true);
            }
        }, _renderPermissions:function (permissions, parentPermissions, securityPolicy, isReadOnly, applySecurityPolicy) {
            var isFolder = true;
            if (this._item) {
                isFolder = this._item.isFolder();
            } else {
                if (this._contentClass) {
                    isFolder = (this._contentClass.id != ier_constants.ClassName_ReportDefinition);
                }
            }
            this._securityPane.renderPermissions(permissions, parentPermissions, securityPolicy, !isFolder, isReadOnly, applySecurityPolicy, true);
            this._securityPane.setMarkingValues(this._markingValues);
        }, getPermissions:function () {
            return this._securityPane.getPermissions();
        }, onSecuritiyChanged:function () {
        }, resize:function () {
            this._contentPane.resize();
        }});
    });
}, "ier/model/FilePlan":function () {
    define(["dojo/_base/declare", "ier/model/_BaseEntityObject", "ier/model/RecordCategoryContainerMixin"], function (dojo_declare, ier_model_BaseEntityObject, ier_model_RecordCategoryContainerMixin) {
        var FilePlan = dojo_declare("ier.model.FilePlan", [ier_model_BaseEntityObject, ier_model_RecordCategoryContainerMixin], {constructor:function (arguments) {
            this.namingPattern = null;
        }, setNamingPattern:function (namingPattern) {
            this.namingPattern = namingPattern;
        }, getNamingPattern:function (namingPattern) {
            return this.namingPattern;
        }, isNamingPatternEnabled:function () {
            return this.namingPattern != null;
        }});
        ier_model_BaseEntityObject.registerClass("FilePlan", FilePlan);
        return FilePlan;
    });
}, "ier/widget/admin/PluginConfigurationPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/sniff", "dojo/dom-style", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/form/Button", "dijit/registry", "ecm/Messages", "ecm/model/_ModelStore", "ecm/model/Action", "ecm/model/Desktop", "ecm/model/Request", "ecm/model/admin/ApplicationConfig", "ecm/widget/admin/AdminLoginDialog", "ecm/widget/admin/PluginConfigurationPane", "ecm/widget/dialog/MessageDialog", "ier/widget/layout/AdminiPane", "ier/constants", "ier/messages", "ier/util/dialog", "ier/util/util", "ier/widget/admin/AdminCheckBox", "ier/widget/admin/config", "ier/model/admin/Config", "dojo/text!./templates/PluginConfigurationPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "ecm/widget/FilterTextBox", "ier/widget/admin/AdminGrid", "idx/layout/MoveableTabContainer", "ier/widget/admin/ReportSettingsPane", "ier/widget/admin/AddDesktopSettingsPane"], function (dojo_declare, dojo_lang, dojo_sniff, dojo_style, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_form_Button, dijit_registry, ecm_messages, ecm_model_ModelStore, ecm_model_Action, ecm_model_desktop, ecm_model_Request, ecm_model_admin_appCfg, ecm_widget_admin_AdminLoginDialog, ecm_widget_admin_PluginConfigurationPane, ecm_widget_dialog_MessageDialog, ier_widget_AdminiPane, ier_constants, ier_messages, ier_util_dialog, ier_util, ier_widget_admin_AdminCheckBox, ier_widget_admin_config, ier_model_admin_Config, templateString) {
        return dojo_declare("ier.widget.admin.PluginConfigurationPane", [ecm_widget_admin_PluginConfigurationPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {templateString:templateString, widgetsInTemplate:true, messages:ier_messages, ecmMessages:ecm_messages, adminConfig:null, IS_CONNECTED:"isConnected", IS_FILEPLAN_REPOSITORY:"isFilePlanRepository", constructor:function () {
            this._availableRepositories = [];
            this.adminConfig = ier_widget_admin_config;
        }, startup:function () {
        }, load:function (onComplete) {
            if (ier_util.isCompatibleIERVersion()) {
                if (this.adminConfig) {
                    this.adminConfig.loadConfiguration(null, this.configurationString);
                    var fpConfigsArray = this.adminConfig.getFilePlanRepositoryConfigsArray();
                    this.savedFPPRepositoryIds = [];
                    for (var i in fpConfigsArray) {
                        this.savedFPPRepositoryIds.push(fpConfigsArray[i].repositoryId);
                    }
                    this.initialize();
                    ier_model_admin_Config.getConfig("settings", null, dojo_lang.hitch(this, function (config) {
                        this.config = config;
                        var newCognosGatewayServerName = config.get("cognosGatewayServerName");
                        if ((newCognosGatewayServerName == null || newCognosGatewayServerName == "") && (this.adminConfig.getReportServerName() && this.adminConfig.getReportServerName() != "")) {
                            this.config.set("cognosGatewayServerName", this.adminConfig.getReportServerName());
                            newCognosGatewayServerName = this.adminConfig.getReportServerName();
                        }
                        var newReportJDBCSource = config.get("reportEngineDataSource");
                        if ((newReportJDBCSource == null || newReportJDBCSource == "") && (this.adminConfig.getJDBCReportDBDataSource() && this.adminConfig.getJDBCReportDBDataSource() != "")) {
                            this.config.set("reportEngineDataSource", this.adminConfig.getJDBCReportDBDataSource());
                            newReportJDBCSource = this.adminConfig.getJDBCReportDBDataSource();
                        }
                        this.reportSettings.set("config", config);
                        this.reportSettings.reset();
                    }));
                }
            }
            this.connect(this.reportSettings, "onChange", function () {
                this._saveData();
                this.onSaveNeeded(true);
            });
            this.tabContainer.startup();
            if (onComplete) {
                onComplete();
            }
        }, validate:function () {
            return true;
        }, save:function (onComplete) {
            if (this.adminConfig) {
                var fpRepoConfigs = [];
                for (var i in this._repositories) {
                    var repoConfig = this._repositories[i];
                    if (repoConfig.getValue(this.IS_FILEPLAN_REPOSITORY) == "true") {
                        fpRepoConfigs.push({repositoryId:repoConfig.id});
                    }
                }
                this.adminConfig.setFilePlanRepositoryConfigsArray(fpRepoConfigs);
                this.reportSettings.save();
                ier_model_admin_Config.saveConfig(this.config, dojo_lang.hitch(this, function () {
                    this.adminConfig.removeReportingInformation();
                    this.configurationString = this.adminConfig.getEscapedConfigurationString();
                }));
            }
        }, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._filter, "_onInput", "_filterData");
            this.connect(this._filter, "_setValueAttr", "_filterData");
        }, loadIERRepositoryConfigs:function (onComplete) {
            ecm_model_admin_appCfg.getRepositoryObjects(dojo_lang.hitch(this, function (reposObjects) {
                var repositories = [];
                this.commonDomains = [];
                for (var i in reposObjects) {
                    var repoObject = reposObjects[i];
                    if (repoObject.getType() == "p8") {
                        this._addConnectionInfoToRepositoryConfigs(repoObject);
                        repositories.push(repoObject);
                    }
                }
                this._repositories = repositories;
                if (onComplete) {
                    onComplete();
                }
            }));
        }, getRepositoryConfig:function (repositoryId) {
            for (var i in this._repositories) {
                var repoObject = this._repositories[i];
                if (repoObject.id == repositoryId) {
                    return repoObject;
                }
            }
            return null;
        }, _addConnectionInfoToRepositoryConfigs:function (repositoryConfig) {
            var repository = ecm_model_desktop.getRepository(repositoryConfig.id);
            if (repository && repository.connected) {
                repositoryConfig.setValue(this.IS_CONNECTED, "true");
                this.commonDomains.push(repository.serverName);
            } else {
                var serverName = repositoryConfig.getServerName();
                for (var i in this.commonDomains) {
                    if (serverName == this.commonDomains[i]) {
                        repositoryConfig.setValue(this.IS_CONNECTED, "true");
                        break;
                    }
                }
            }
            for (var i in this.savedFPPRepositoryIds) {
                if (repositoryConfig.id == this.savedFPPRepositoryIds[i]) {
                    repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, "true");
                    break;
                }
            }
        }, _getRepositories:function (callback) {
            callback(this._repositories);
        }, initialize:function () {
            this.loadIERRepositoryConfigs(dojo_lang.hitch(this, this._initializeGrid));
        }, _initializeGrid:function () {
            var structure = [{name:" ", width:dojo_sniff.isWebKit ? "30px" : "16px", nosort:true, headerClasses:"nosort", formatter:dojo_lang.hitch(this, "_iconFormatter")}, {field:"name", name:ier_messages.pluginConfiguration_displayName, width:"auto"}, {field:"id", name:ier_messages.pluginConfiguration_ID, width:"auto"}, {field:"serverName", name:ier_messages.pluginConfiguration_server_name_heading, width:"auto"}, {field:this.IS_CONNECTED, name:this.messages.pluginConfiguration_connectionStatus, width:"auto", formatter:dojo_lang.hitch(this, "_connectionFormatter"), editable:true}, {field:this.IS_FILEPLAN_REPOSITORY, name:this.messages.pluginConfiguration_showInDeclare, width:"auto", formatter:dojo_lang.hitch(this, "_isFilePlanRepositoryFormatter"), editable:true}];
            this._theStore = new ecm_model_ModelStore(this, this._getRepositories);
            this._theGrid.setData(structure, this._theStore, this.getMenuActions());
            this.connect(this._theGrid, "onAction", "_onAction");
            this._theGrid.resize();
            this.borderContainer.resize();
            this.tabContainer.resize();
        }, getMenuActions:function () {
            var actions = [];
            actions.push(new ecm_model_Action("ierplugin_setAsFilePlan", this.messages.pluginConfiguration_setAsFilePlanRepository));
            return actions;
        }, _onAction:function (items, action) {
            if (action.id == "ierplugin_setAsFilePlan") {
                var repositoryIds = [];
                for (var i in items) {
                    var repositoryConfig = items[i];
                    var isConnected = repositoryConfig.getValue(this.IS_CONNECTED) == "true";
                    if (isConnected) {
                        repositoryIds.push(repositoryConfig.id);
                    }
                }
                if (repositoryIds.length > 0) {
                    this.loadRepositories(repositoryIds, dojo_lang.hitch(this, function (repositoryObjs) {
                        for (var i in repositoryObjs) {
                            var repoObj = repositoryObjs[i];
                            var repositoryConfig = null;
                            for (var j in items) {
                                if (items[j].id == repoObj.repositoryId) {
                                    repositoryConfig = items[j];
                                    break;
                                }
                            }
                            if (repositoryConfig && repoObj) {
                                if (repoObj && (repoObj.recordRepositoryType == "Combined" || repoObj.recordRepositoryType == "FilePlan")) {
                                    repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, "true");
                                    this._theGrid.getStore().onSet(repositoryConfig);
                                } else {
                                    repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, "false");
                                    if (items.length == 1) {
                                        ier_util_dialog.showMessage(ier_messages.pluginConfiguration_fileplanRepositoryNotAdded);
                                    }
                                    this._theGrid.getStore().onSet(repositoryConfig);
                                }
                            }
                        }
                    }));
                }
            }
        }, _onReset:function () {
            this._filter.reset();
            this._theGrid.clearSelection();
            if (this._theStore) {
                this.loadIERRepositoryConfigs(dojo_lang.hitch(this, function () {
                    this._theStore = new ecm_model_ModelStore(this, this._getRepositories);
                    this._theGrid.setStore(this._theStore);
                }));
            }
        }, _filterData:function () {
            var value = this._filter.get("value");
            this._theGrid.filter({name:"*" + value + "*"});
        }, _saveData:function () {
            if (!this.configurationString || this.configurationString.length == 0 || this.initialLoad) {
                this.initialLoad = true;
                this.save();
            }
        }, _iconFormatter:function (data, rowIndex, cell) {
            var IconValue = function (iconClass, hover) {
                this.iconClass = iconClass;
                this.hover = hover;
            };
            IconValue.prototype = new Object();
            IconValue.prototype.toString = function () {
                return "<img role=\"presentation\" class=\"" + this.iconClass + "\" title=\"" + this.hover + "\" alt=\"" + this.hover + "\" src=\"dojo/resources/blank.gif\" />";
            };
            IconValue.prototype.replace = function () {
                return this;
            };
            var item = cell.grid.getItem(rowIndex);
            return new IconValue(item.getTypeIconClass(), item.getTypeString());
        }, _isFilePlanRepositoryFormatter:function (data, rowIndex, cell) {
            var self = this;
            var repositoryConfig = cell.grid.getItem(rowIndex);
            var checked = repositoryConfig.getValue(this.IS_FILEPLAN_REPOSITORY) == "true";
            var isConnected = repositoryConfig.getValue(this.IS_CONNECTED) == "true";
            var checkBox = new ier_widget_admin_AdminCheckBox({label:repositoryConfig.name});
            checkBox.set("checked", checked);
            this.connect(checkBox, "onClickAction", function (checkbox, state) {
                var checked = checkbox.get("checked");
                if (state != null && state == checked) {
                    checkbox.set("checked", !state);
                    checked = checkbox.get("checked");
                }
                if ((checked || checked == "true")) {
                    if (repositoryConfig.getValue(this.IS_FILEPLAN_REPOSITORY) == "false") {
                        ier_util_dialog.showMessage(ier_messages.pluginConfiguration_fileplanRepositoryNotAdded);
                        checkbox.set("checked", false);
                        dojo_style.set(checkbox.domNode, "display", "none");
                    } else {
                        this.loadRepositories([repositoryConfig.id], dojo_lang.hitch(this, function (repositories) {
                            if (repositories && (repositories[0].recordRepositoryType == "Combined" || repositories[0].recordRepositoryType == "FilePlan")) {
                                repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, "true");
                                this._saveData();
                            } else {
                                repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, "false");
                                ier_util_dialog.showMessage(ier_messages.pluginConfiguration_fileplanRepositoryNotAdded);
                                checkbox.set("checked", false);
                                dojo_style.set(checkbox.domNode, "display", "none");
                            }
                        }));
                    }
                } else {
                    repositoryConfig.setValue(this.IS_FILEPLAN_REPOSITORY, null);
                    this._saveData();
                }
                self.onSaveNeeded(true);
            });
            if (!isConnected) {
                checkBox.set("disabled", true);
            } else {
                checkBox.set("disabled", false);
            }
            checkBox._destroyOnRemove = true;
            if (repositoryConfig.getValue(this.IS_FILEPLAN_REPOSITORY) == "false") {
                dojo_style.set(checkBox.domNode, "display", "none");
            }
            return checkBox;
        }, _connectionFormatter:function (data, rowIndex, cell) {
            var grid = cell.grid;
            var repositoryConfig = cell.grid.getItem(rowIndex);
            var isConnected = repositoryConfig.getValue(this.IS_CONNECTED) == "true";
            if (isConnected) {
                repositoryConfig.buttonCellWidgetView = null;
                return "<div align=\"center\"><span style=\"text-align:center;font-color:green\">" + ier_messages.pluginConfiguration_connected + "</span></div>";
            } else {
                var button = new dijit_form_Button({id:this.id + "_connectionButton_" + repositoryConfig.id + new Date().getTime(), label:ecm_messages.connect, clickAction:dojo_lang.hitch(this, function (button) {
                    this.connectToRepository(repositoryConfig, dojo_lang.hitch(this, function (evt) {
                        repositoryConfig.setValue(this.IS_CONNECTED, "true");
                        grid.store.onSet(repositoryConfig);
                        for (var i = 0; i < grid.rowCount; i++) {
                            var currentCellConfig = grid.getItem(i);
                            if (currentCellConfig.getValue(this.IS_CONNECTED) != "true") {
                                for (var j in self.commonDomains) {
                                    if (currentCellConfig.getServerName() == self.commonDomains[j]) {
                                        currentCellConfig.setValue(this.IS_CONNECTED, "true");
                                        grid.store.onSet(currentCellConfig);
                                    }
                                }
                            }
                        }
                        setTimeout(function (grid) {
                            grid.focus.setFocusIndex(grid.selection.selectedIndex, 4);
                        }, 500, grid);
                    }));
                }), onClick:dojo_lang.hitch(this, function (evt) {
                    var button = dijit_registry.getEnclosingWidget(evt.target);
                    if (button.clickAction) {
                        button.clickAction(button);
                    }
                })});
                button._destroyOnRemove = true;
                button.domNode.setAttribute("style", "text-align:center; margin:0 auto; width: 100%");
                return button;
            }
        }, loadRepositories:function (repositoryIds, onComplete) {
            var params = null;
            if (repositoryIds.length == 1) {
                params = ier_util.getDefaultParams(repositoryIds[0]);
            } else {
                params = ier_util.getDefaultParams(repositoryIds[0]);
                params.requestParams[ier_constants.Param_RepositoryIds] = ier_util.arrayToString(repositoryIds);
            }
            params["requestCompleteCallback"] = dojo_lang.hitch(this, function (response) {
                if (response.servers) {
                    for (var i in response.servers) {
                        var repositoryJSON = response.servers[i];
                        var repositoryObj = {repositoryId:repositoryJSON.repositoryId, recordRepositoryType:repositoryJSON.recordRepositoryType, recordDatamodelType:repositoryJSON.recordDatamodelType};
                        repositories.push(repositoryObj);
                    }
                    if (onComplete) {
                        onComplete(repositories);
                    }
                }
            });
            var repositories = [];
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetRepositoryAttributes, ier_constants.PostEncoding, params);
        }, connectToRepository:function (repositoryConfig, onComplete) {
            if (!this._loginDialog) {
                this._loginDialog = new ecm_widget_admin_AdminLoginDialog();
            }
            this._loginDialog.show(repositoryConfig.getType(), repositoryConfig.id, repositoryConfig.name, this.getLogonParams(repositoryConfig), dojo_lang.hitch(this, function (response) {
                this.commonDomains.push(repositoryConfig.getServerName());
                if (onComplete) {
                    onComplete();
                }
            }));
        }, getLogonParams:function (repositoryConfig) {
            var params = {};
            params.displayName = repositoryConfig.name;
            if (repositoryConfig.getType() == "p8") {
                var serverName = repositoryConfig.getServerName();
                if (dojo_lang.isArray(serverName)) {
                    for (var i in serverName.length) {
                        params.serverName = params.serverName + serverName[i];
                    }
                } else {
                    params.serverName = serverName;
                }
                params.objectStore = repositoryConfig.getObjectStore();
                params.objectStoreDisplayName = repositoryConfig.getObjectStoreDisplayName();
                params.protocol = repositoryConfig.getProtocol();
            }
            return params;
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemHoldPane.html":"<div class=\"ierEntityItemHoldPane\" style=\"width: 100%; height: 100%; padding: 0px;\">\r\n\t<div data-dojo-type=\"ier/widget/listView/ContentList\"\r\n\t\ttitle=\"_ierMessages.holds}\"\r\n\t\tdata-dojo-attach-point=\"_contentList\">\r\n\t</div>\r\n</div>", "url:ier/widget/dialog/templates/SelectVersionsDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"workflowVersionsList\"></div>\r\n</div>\r\n", "url:ier/widget/dialog/templates/CopyRecordDialog.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<table class=\"generalTable\">\r\n\t<tbody>   \r\n\t\t<tr data-dojo-attach-point=\"_documentTitleRow\">\r\n\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t<label for=\"${id}_documentTitle\">${_messages.copyRecordDialog_documentTitlePrompt}:</label>\r\n\t\t\t</td>\r\n\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_documentTitleCell\">\r\n\t\t\t\t<div id=\"${id}_documentTitle\" data-dojo-type=\"ecm.widget.TextBox\" style=\"width: 300px\" data-dojo-attach-point=\"_documentTitle\"></div>\t\t\t\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr data-dojo-attach-point=\"_descriptionRow\">\r\n\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t<label for=\"${id}_description\">${_messages.copyRecordDialog_descriptionPrompt}:</label>\r\n\t\t\t</td>\r\n\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_descriptionCell\">\r\n\t\t\t\t<div id=\"${id}_description\" data-dojo-type=\"ecm.widget.ValidationSimpleTextarea\" data-dojo-props=\"required:false,trim:true,value:''\" style=\"width:300px\" data-dojo-attach-point=\"_description\"/>\t\t\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t<span>${_messages.copyRecordDialog_fileplanLocation}:</span>\r\n\t\t\t</td>\r\n\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t<div data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t</table>\r\n</div>", "ier/widget/panes/EntityItemDetailPane":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "ier/constants", "ier/messages", "ier/util/property", "ier/widget/dialog/IERBaseDialogPane", "ecm/MessagesMixin", "idx/grid/PropertyGrid", "dojo/text!./templates/EntityItemDetailPane.html", "ecm/widget/TitlePane"], function (declare, domStyle, ierConstants, messages, ier_util_property, _BaseDialogPane, _MessagesMixin, PropertyGrid, templateStr) {
        return declare("ier.widget.panes.EntityItemDetailPane", [_BaseDialogPane, _MessagesMixin], {templateString:templateStr, createRendering:function (item, attributes) {
            this.item = item;
            this._renderSystemProps(attributes);
            this._renderDispositionProps(attributes);
            this._renderVitalProps(attributes);
            this._renderPhysicalProps(attributes);
            this._renderAdditionalProps(attributes);
        }, _renderSystemProps:function (attributes) {
            var data = {};
            for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].id;
                if (this.item.isSystemProperty(name)) {
                    data[name] = this._getDisplayValue(attributes[i]);
                }
            }
            this._appendPropGrid(data, this._systemPropPane.containerNode);
        }, _renderDispositionProps:function (attributes) {
            var data = {};
            for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].id;
                if (ier_util_property.isDispositionGroupProperty(name)) {
                    data[name] = this._getDisplayValue(attributes[i]);
                }
            }
            this._appendPropGrid(data, this._dispositionPane.containerNode);
        }, _renderVitalProps:function (attributes) {
            var data = {};
            for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].id;
                if (ier_util_property.isVitalRecordGroupProperty(name)) {
                    data[name] = this._getDisplayValue(attributes[i]);
                }
            }
            this._appendPropGrid(data, this._vitalPane.containerNode);
        }, _renderPhysicalProps:function (attributes) {
            var data = {};
            for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].id;
                if (ier_util_property.isPhysicalGroupProperty(name)) {
                    data[name] = this._getDisplayValue(attributes[i]);
                }
            }
            this._appendPropGrid(data, this._physicalPane.containerNode);
        }, _renderAdditionalProps:function (attributes) {
            if (this.item.isFolder()) {
                this._additionalPane.set("title", messages.entityItemDetailPane_label_additionalRecordContainerDetails);
            }
            var data = {};
            for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].id;
                if ((attributes[i].hidden || (attributes[i].system && !this.item.isSystemProperty(name))) && !ier_util_property.isDispositionGroupProperty(name) && !ier_util_property.isVitalRecordGroupProperty(name) && !ier_util_property.isPhysicalGroupProperty(name) && !ier_util_property.isEntityItemNotDisplayedProperty(name)) {
                    data[name] = this._getDisplayValue(attributes[i]);
                }
            }
            this._appendPropGrid(data, this._additionalPane.containerNode);
        }, _appendPropGrid:function (props, target) {
            var properties = new Array();
            var resources = {};
            for (var i in props) {
                properties.push(i);
                var label = this.item.getAttrLabel(i);
                if (label && label.replace) {
                    label = label.replace(/&/g, "&amp;").replace(/</g, "&lt;");
                }
                resources[i + "Label"] = label || i;
            }
            properties = properties.join(",");
            this._dispoPropGrid = new PropertyGrid({data:props, properties:properties, labelKeySuffix:"Label", resources:resources});
            this._dispoPropGrid.placeAt(target, "first");
            domStyle.set(this._dispoPropGrid.domNode, "height", "100%");
            this._dispoPropGrid.startup();
        }, _getDisplayValue:function (attribute) {
            var name = attribute.id;
            var value = this.item.getDisplayValue(name);
            if (attribute.dataType == "xs:object") {
                if (value != null) {
                    var split = value.split(",");
                    if (split.length == 3) {
                        return split[2];
                    }
                }
            }
            return value;
        }});
    });
}, "url:ier/widget/dialog/templates/AddDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.baseDialog_properties}\" class=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/panes/EntityItemHoldPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/util/util", "ier/model/ResultSet", "ecm/model/Request", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemHoldPane.html", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_util, ier_model_ResultSet, ecm_model_Request, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemHoldPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, isLoaded:function () {
            return this._isLoaded;
        }, createRendering:function (repository, item) {
            this.repository = repository;
            this.item = item;
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (response) {
                    response.repository = this.repository;
                    var resultSet = new ier_model_ResultSet(response);
                    var structure = resultSet.structure;
                    if (structure) {
                        var cells = structure.cells && structure.cells[0];
                        if (cells) {
                            cells.splice(4, 1);
                        }
                    }
                    this._contentList.setResultSet(resultSet);
                    this.resize();
                    this._isLoaded = true;
                }
            }));
            params.requestParams[ier_constants.Param_EntityId] = this.item.id;
            params.requestParams[ier_constants.Param_Type] = this.item.ierContentType;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetHoldsForEntity, ier_constants.PostEncoding, params);
        }, resize:function () {
            this._contentList.resize();
        }});
    });
}, "ier/widget/panes/ItemPropertiesDisplayPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-class", "idx/layout/TitlePane", "ecm/widget/ItemPropertiesDisplayPane", "ecm/Messages", "ier/constants", "ier/messages", "ier/util/property", "ier/widget/panes/CommonPropertiesPane"], function (dojo_declare, dojo_lang, dojo_style, dojo_class, idx_layout_TitlePane, ecm_widget_ItemPropertiesDisplayPane, ecm_messages, ier_constants, ier_messages, ier_util_property) {
        return dojo_declare("ier.widget.panes.ItemPropertiesDisplayPane", [ecm_widget_ItemPropertiesDisplayPane], {showPreview:false, openDispositionPane:false, commonPropertiesPaneClass:"ier/widget/panes/CommonPropertiesPane", allowEdit:true, postCreate:function () {
            this.inherited(arguments);
            if (this.displayBorderContainer) {
                dojo_style.set(this.displayBorderContainer.domNode, "display", "none");
            }
            if (this.displayPropertiesTopPanel) {
                dojo_style.set(this.displayPropertiesTopPanel.domNode, "display", "none");
            }
            if (this.displayPropertiesCenterPanel) {
                dojo_style.set(this.displayPropertiesCenterPanel.domNode, "padding", "0");
            }
            dojo_class.add(this.domNode, "ierEntityitemDetailsPane");
            this.connect(this.propertiesPane, "onLoaded", function () {
                var item = this.getItem();
                if (item && dojo_lang.isFunction(this._getDispositionProperties) && dojo_lang.isFunction(this._createLabelValue)) {
                    var contentClass = item.getContentClass();
                    contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitons, childComponentDefinitions) {
                        if (ier_util_property.hasDispositionGroupProperty(item)) {
                            var propPane = this.propertiesPane;
                            var node = propPane.itemPropertiesPane.customPropertiesPane;
                            if (propPane._dispositonTitlePane) {
                                propPane._dispositonTitlePane.destroy();
                            } else {
                                propPane.connect(propPane, "destroy", function () {
                                    if (propPane._dispositonTitlePane) {
                                        propPane._dispositonTitlePane.destroy();
                                    }
                                });
                                var parent = node.parentNode;
                                parent.removeChild(node);
                                parent.appendChild(node);
                            }
                            var dispositonTitlePane = new idx_layout_TitlePane({"class":"propertyGridTitlePane", title:ier_messages.itemPropertiesDisplayPane_dispositionProperties, open:false});
                            propPane._dispositonTitlePane = dispositonTitlePane;
                            var pairs = this._getDispositionProperties(attributeDefinitons);
                            this._createLabelValue(dispositonTitlePane, pairs);
                            node.appendChild(dispositonTitlePane.domNode);
                        }
                        this.resize();
                    }));
                }
            });
        }, isItemPropertyShown:function (attributeDefiniton) {
            return !attributeDefiniton.hidden && !attributeDefiniton.system && !ier_util_property.isDispositionGroupProperty(attributeDefiniton.id) && !ier_util_property.isVitalRecordGroupProperty(attributeDefiniton.id) && !ier_util_property.isEntityItemNotDisplayedProperty(attributeDefiniton.id);
        }, isItemReadOnly:function (item) {
            return (this.allowEdit && !item.privModifyProperties) || item instanceof ier.model.DispositionSchedule || item.template == ier_constants.ClassName_DispositionAction || item.template == ier_constants.ClassName_DispositionTrigger || item.template == ier_constants.ClassName_ReportDefinition;
        }, onCompleteRendering:function () {
            var item = this.getItem();
            if (item) {
                var contentClass = item.getContentClass();
                contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitons, childComponentDefinitions) {
                    if (ier_util_property.hasDispositionGroupProperty(item)) {
                        var dispositonTitlePane = new idx_layout_TitlePane({"class":"propertyGridTitlePane", title:ier_messages.itemPropertiesDisplayPane_dispositionProperties, open:this.openDispositionPane});
                        var pairs = this._getDispositionProperties(attributeDefinitons);
                        this.addCustomTitlePane(dispositonTitlePane, pairs);
                    }
                    this.resize();
                }));
            }
            var titlePanes = this.getTitlePanes();
            if (titlePanes) {
                for (var i in titlePanes) {
                    var titlePane = titlePanes[i];
                    if (titlePane) {
                        if (titlePane.title == ier_messages.itemPropertiesDisplayPane_dispositionProperties) {
                            this._toggleTitlePane(titlePane, this.openDispositionPane);
                        }
                        if (titlePane.title == ecm_messages.system_properties_title) {
                            this._toggleTitlePane(titlePane, this.showSystemProps);
                        }
                        this.connect(titlePane, "toggle", function () {
                            if (titlePane.title == ier_messages.itemPropertiesDisplayPane_dispositionProperties) {
                                this.openDispositionPane = !this.openDispositionPane;
                            }
                            if (titlePane.title == ecm_messages.system_properties_title) {
                                this.showSystemProps = !this.showSystemProps;
                            }
                        });
                    }
                }
            }
        }, _toggleTitlePane:function (titlePane, open) {
            if (open) {
                if (!titlePane.open) {
                    titlePane.toggle();
                }
            } else {
                if (titlePane.open) {
                    titlePane.toggle();
                }
            }
        }, _getDispositionProperties:function (attributeDefinitions) {
            var item = this.getItem();
            var isDDContainer = false;
            if (item && item.isInstanceOf && item.isInstanceOf(ier.model.RMContainerMixin) && item.isDefensibleDisposal()) {
                isDDContainer = true;
            }
            var pairs = [];
            for (var i in attributeDefinitions) {
                var attributeDefinition = attributeDefinitions[i];
                if ((isDDContainer && ier_util_property.isBasicScheduleGroupProperty(attributeDefinition.id)) || (!isDDContainer && ier_util_property.isDispositionGroupProperty(attributeDefinition.id))) {
                    var value = this.getItemAttributeValue(attributeDefinition);
                    var name = attributeDefinition.name;
                    if (attributeDefinition.id == ier_constants.Property_RMRetentionPeriod) {
                        value = item.getDefensibleDisposalSchedule().getRMRetentionPeriod("display");
                        name = ier_messages.entityItemDispositionPane_retentionPeriod;
                    }
                    if (attributeDefinition.id == ier_constants.Property_RMRetentionTriggerPropertyName) {
                        name = ier_messages.retentionTriggerPropertyName;
                    }
                    pairs.push([name, value, attributeDefinition.id]);
                }
            }
            return pairs;
        }, getItemAttributeValue:function (attributeDefinition) {
            var id = attributeDefinition.id;
            var item = this.getItem();
            var value = this.inherited(arguments);
            if (id == ier_constants.Property_RetainMetadata) {
                value = value === "0" ? ecm_messages.true_label : value === "1" ? ecm_messages.false_label : value;
            }
            if (attributeDefinition.dataType == "xs:object") {
                value = item.getDisplayValue(id);
            }
            return value;
        }});
    });
}, "ier/widget/dialog/RemoveHoldDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/json", "dojo/_base/lang", "dojo/dom-class", "dojo/string", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/dialog/ConfirmationDialog", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/model/ResultSet", "ier/widget/dialog/ObjectListDialog", "ier/widget/listView/gridModules/ObjectListRowContextMenu"], function (dojo_declare, dojo_array, dojo_json, dojo_lang, dojo_dom_class, dojo_string, ecm_model_Desktop, ecm_model_Request, ecm_widget_dialog_ConfirmationDialog, ecm_dialog_MessageDialog, ier_constants, ier_messages, ier_util, ier_util_dialog, ier_model_ResultSet, ier_dialog_ObjectListDialog, RowContextMenu) {
        var _RowContextMenu = dojo_declare(RowContextMenu, {loadContextMenu:function (selectedItems, callback) {
            ecm.model.desktop.loadMenuActions(ier_constants.MenuType_IERRemoveHoldContextMenu, callback);
        }});
        return dojo_declare("ier.widget.dialog.RemoveHoldDialog", [ier_dialog_ObjectListDialog], {connectonRowDblClick:true, postCreate:function () {
            this.inherited(arguments);
            this._objectContentList.multiSelect = true;
            this.title = ier_messages.objectSelector_removeEntities;
            this.setIntroText(ier_messages.objectSelector_removeHoldsIntroText);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh19.htm"));
            this.setEntityType(ier_constants.EntityType_Hold);
            this._selectButton.set("label", ier_messages.dialog_removeHoldButton);
        }, show:function (repository, items) {
            if (repository) {
                this.contentClass = repository.getContentClass(ier_constants.ClassName_Hold);
            }
            this._targetItems = items;
            this.inherited(arguments, [repository, ier_constants.ClassName_Hold]);
        }, onSelect:function (selectedItems) {
            if (this._targetItems && selectedItems && selectedItems.length > 0) {
                var targetItems = this._targetItems;
                var params = ier_util.getDefaultParams(this.repository, function (response) {
                    targetItems[0].retrieveAttributes(null, false);
                });
                var holdables = dojo_array.map(targetItems, function (item) {
                    return {id:item.id, entityType:item.getEntityType()};
                });
                params.requestParams[ier_constants.Param_Holdables] = dojo_json.toJson(holdables);
                var holds = dojo_array.map(selectedItems, function (item) {
                    return {id:item.id};
                });
                params.requestParams[ier_constants.Param_Holds] = dojo_json.toJson(holds);
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_RemoveHold, ier_constants.PostEncoding, params);
            }
        }, onInputChange:function () {
            var selectedObjects = this._objectContentList.getSelectedItems();
            var valid = selectedObjects != null && selectedObjects.length > 0;
            this.setButtonEnabled(this._selectButton, valid);
            return valid;
        }, retrieveObjects:function () {
            var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                if (response) {
                    response.repository = this.repository;
                    var resultSet = new ier_model_ResultSet(response);
                    this._objectContentList.setResultSet(resultSet);
                    this.resize();
                    this.onInputChange();
                }
            }));
            params.requestParams[ier_constants.Param_EntityId] = this._targetItems[0].id;
            params.requestParams[ier_constants.Param_FilterString] = this._filterString;
            params.requestParams[ier_constants.Param_Type] = this._targetItems[0].ierContentType;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetHoldsForEntity, ier_constants.PostEncoding, params);
        }, getContentListGridModules:function () {
            var modules = this.inherited(arguments);
            ier_util.replaceModule(modules, "rowContextMenu", _RowContextMenu);
            return modules;
        }, _onDesktopChanged:function (modelObject) {
        }, _onSelectItem:function () {
            var valid = this.onInputChange();
            if (valid) {
                var selectedItems = this._objectContentList.getSelectedItems();
                if (selectedItems) {
                    var includingDynamic = dojo_array.some(selectedItems, function (item) {
                        return item.attributes.IsDynamicHold;
                    }, this);
                    if (includingDynamic) {
                        this._messageDialog && this._messageDialog.destroy();
                        this._messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.removeHoldDialog_cannot_remove_hold});
                        this._messageDialog.startup();
                        this._messageDialog.show();
                        ier_util_dialog.manage(this._messageDialog);
                        return;
                    }
                    this.onSelect(selectedItems);
                    this.onCancel();
                }
            }
        }});
    });
}, "url:ier/widget/dialog/templates/CloseRecordContainerDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<br>\r\n   \t<div class=\"field\">\r\n   \t\t<label for=\"${id}_reasonFor\" >\r\n   \t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n   \t\t\t${_ierMessages.closeRecordContainerDialog_reasonForClosePrompt}:\r\n   \t\t</label>\r\n   \t\t<br>\r\n   \t\t<input id=\"${id}_reasonFor\"\r\n   \t\t\tdata-dojo-type=\"ecm.widget.ValidationTextBox\" class=\"ierDropDownInput\"\r\n   \t\t\tstyle=\"margin-top:5px;\"\r\n   \t\t\tdata-dojo-props=\"required:true\"\r\n   \t\t\tdata-dojo-attach-point=\"_reasonForClose\"\r\n\t\t\tdata-dojo-attach-event=\"onKeyUp: _onNameChange\">\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/templates/FolderTree.html":"<div class=\"ecmFolderTree\">\r\n</div>\r\n", "ier/widget/dialog/PlaceOnHoldDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/json", "dojo/_base/lang", "dojo/dom-class", "dojo/string", "ecm/model/Request", "ecm/widget/dialog/ConfirmationDialog", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/widget/dialog/ObjectListDialog"], function (dojo_declare, dojo_array, dojo_json, dojo_lang, dojo_dom_class, dojo_string, ecm_model_Request, ecm_widget_dialog_ConfirmationDialog, ier_constants, ier_messages, ier_util, ier_util_dialog, ier_dialog_ObjectListDialog) {
        return dojo_declare("ier.widget.dialog.PlaceOnHoldDialog", [ier_dialog_ObjectListDialog], {connectonRowDblClick:true, postCreate:function () {
            this.inherited(arguments);
            this._objectContentList.multiSelect = true;
            this.title = ier_messages.objectSelector_entitiesOnHold;
            this.setIntroText(ier_messages.objectSelector_placeOnHoldsIntroText);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh19.htm"));
            this.setEntityType(ier_constants.EntityType_Hold);
            this._selectButton.set("label", ier_messages.dialog_placeOnHoldButton);
        }, show:function (repository, items) {
            if (repository) {
                this.contentClass = repository.getContentClass(ier_constants.ClassName_Hold);
            }
            this._targetItems = items;
            this.inherited(arguments, [repository, ier_constants.ClassName_Hold]);
        }, onSelect:function (selectedItems) {
            if (this._targetItems && selectedItems && selectedItems.length > 0) {
                var targetItems = this._targetItems;
                var params = ier_util.getDefaultParams(this.repository, function (response) {
                    dojo_array.forEach(targetItems, function (item) {
                        item.privIERDelete = false;
                        item.retrieveAttributes(null, false);
                    });
                });
                var holdables = dojo_array.map(targetItems, function (item) {
                    return {id:item.id, entityType:item.getEntityType()};
                });
                params.requestParams[ier_constants.Param_Holdables] = dojo_json.toJson(holdables);
                var holds = dojo_array.map(selectedItems, function (item) {
                    return {id:item.id};
                });
                params.requestParams[ier_constants.Param_Holds] = dojo_json.toJson(holds);
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_PlaceOnHold, ier_constants.PostEncoding, params);
            }
        }, onInputChange:function () {
            var selectedObjects = this._objectContentList.getSelectedItems();
            var valid = selectedObjects != null && selectedObjects.length > 0;
            if (valid) {
            }
            this.setButtonEnabled(this._selectButton, valid);
            return valid;
        }, retrieveObjects:function () {
            if (!this.repository.isIERLoaded()) {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function () {
                    if (this.repository.isIERLoaded()) {
                        this.retrieveObjects();
                    }
                }));
                return;
            }
            this.repository.retrieveObjects(this._objectClass, this._filterString, dojo_lang.hitch(this, function (resultSet) {
                if (resultSet) {
                    var items = resultSet.items;
                    if (items) {
                        var currentHolds = [];
                        dojo_array.forEach(this._targetItems, function (item) {
                            dojo_array.forEach(item.getValues(ier_constants.Property_Holds), function (hold) {
                                if (hold && dojo_array.indexOf(currentHolds, hold) < 0) {
                                    currentHolds.push(hold);
                                }
                            });
                        });
                        items = dojo_array.filter(items, function (item) {
                            var active = item.getValue(ier_constants.Property_Active);
                            if (!active || active == "false") {
                                return false;
                            }
                            var name = item.getValue(ier_constants.Property_HoldName);
                            var filterFlag = dojo_array.indexOf(currentHolds, name) < 0;
                            if (filterFlag) {
                                item.inPlaceOnHold = true;
                            }
                            return filterFlag;
                        });
                        resultSet.items = items;
                    }
                    var structure = resultSet.structure;
                    if (structure) {
                        var cells = structure.cells && structure.cells[0];
                        if (cells) {
                            cells.splice(4, 1);
                        }
                    }
                }
                this._objectContentList.setResultSet(resultSet);
                this.resize();
                this.onInputChange();
            }), true);
        }});
    });
}, "url:ier/widget/templates/TilesList.html":"<div class=\"ierTilesList\">\r\n<div data-dojo-attach-point=\"bc\" data-dojo-type=\"dijit.layout.BorderContainer\" design=\"headline\" class=\"ecmTileListContainer\" data-dojo-props=\"gutters:false\">\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" region=\"top\" class=\"toolbarArea\" data-dojo-attach-point=\"toolbarArea\" style=\"outline:none;\">\r\n\t\t<div class=\"actionsArea\" data-dojo-attach-point=\"actionsArea\">\r\n\t\t</div>\r\n\t\t<div class=\"filterArea\" data-dojo-attach-point=\"filterArea\">\r\n\t\t\t<label style=\"display: none;\" for=\"${id}_filterText\">${messages.multicolumn_list_filter_text}</label>\r\n\t\t\t<div data-dojo-type=\"ecm.widget.FilterTextBox\" data-dojo-attach-point=\"filter\" class=\"filter\" id=\"${id}_filterText\" placeholder=\"${_filterText}\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div region=\"center\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"bottomContainer\" class=\"bottomContainer\">\r\n\t</div>\r\n</div>\r\n</div>", "ier/widget/dialog/TaskInformationDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/TaskInformationDialogContent.html", "ier/widget/tasks/DDSweepTaskInformationPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.TaskInformationDialog", [ier_dialog_IERBaseDialog], {title:ier_messages.taskPane_previewTitle, contentString:contentString, item:null, postCreate:function () {
            this.inherited(arguments);
            this.setResizable(true);
            this.addChildPane(this._infoPane);
        }, show:function () {
            this.inherited(arguments);
            this._infoPane.setItem(this.item);
            this.resize();
        }});
    });
}, "ier/widget/tasks/RecurringTasksListingPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/widget/listView/modules/Bar", "ier/constants", "ier/messages", "ecm/widget/listView/modules/Breadcrumb", "ier/widget/listView/gridModules/RowContextMenu", "ier/widget/listView/modules/TaskFilter", "ier/widget/listView/modules/Toolbar", "ier/widget/tasks/TasksListingPane", "dojo/text!./templates/TasksListingPane.html", "ier/widget/listView/ContentList"], function (dojo_declare, dojo_array, dojo_lang, ecm_model_Desktop, ecm_model_AsyncTask, ecm_widget_listView_Bar, ier_constants, ier_messages, ecm_widget_listView_Breadcrumb, ier_widget_listView_RowContextMenu, ier_widget_listView_TaskFilter, ier_widget_listView_Toolbar, ier_widget_TasksListingPane, templateString) {
        return dojo_declare("ier.widget.tasks.RecurringTasksListingPane", [ier_widget_TasksListingPane], {templateString:templateString, widgetsInTemplate:true, ier_messages:ier_messages, toolbarDef:"IERMultiStatusTaskToolbarMenuType", postCreate:function () {
            this.inherited(arguments);
            this.connect(ecm_model_Desktop.taskManager, "onAsyncTaskItemOpened", "openItem");
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ecm_widget_listView_Bar, top:[[[{moduleClass:ier_widget_listView_Toolbar}, {moduleClass:ier_widget_listView_TaskFilter, filterSelectOptions:[{label:ier_messages.taskPane_filterAllTypes, value:"all", selected:true}, {label:ier_messages.reports, value:ier_constants.TaskType_Report}, {label:ier_messages.defensibleDisposal, value:ier_constants.TaskType_DefensibleDisposal}]}]], [[{moduleClass:ecm_widget_listView_Breadcrumb, includeRootItemName:false}]]]});
            return array;
        }, onChangeResultSet:function (resultSet) {
            this._addInitialBreadCrumb(resultSet);
        }, _addInitialBreadCrumb:function () {
            var parent = null;
            this.breadCrumb = this.taskContentList.getContentListModule("breadcrumb");
            if (this.breadCrumb) {
                if (this.parentFolder && !(this.parentFolder instanceof ecm_model_AsyncTask)) {
                    parent = this.taskContentList.getResultSet().parentFolder;
                } else {
                    parent = this.categoryTask;
                }
                this.breadCrumb.getBreadcrumb().setData([{label:parent.name, item:parent}]);
            }
        }, openItem:function (item, resultSet) {
            if (item instanceof ecm_model_AsyncTask && item.isTaskRecurring()) {
                resultSet.toolbarDef = this.toolbarDef;
                this.taskContentList.setResultSet(resultSet);
                this.breadCrumb = this.taskContentList.getContentListModule("breadcrumb");
                if (this.breadCrumb) {
                    var breadcrumbData = [];
                    var path = [];
                    path.push(this.recurringTaskTreeNode);
                    path.push(item);
                    for (var i = 0; i < path.length; i++) {
                        breadcrumbData.push({label:path[i].name, item:path[i]});
                    }
                    this.breadCrumb.getBreadcrumb().setData(breadcrumbData);
                }
                this.onOpenItem(item, resultSet);
            }
        }, onOpenItem:function (item, resultSet) {
        }});
    });
}, "url:ier/widget/admin/templates/RepositoryDDSweepPane.html":"<div class=\"ecmAdminTab ierAdminTab\">\r\n   \t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_saveButton\">${_messages.admin_save}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_resetButton\">${_messages.admin_reset}</button>\r\n\t</div>\r\n\t<div class=\"ierAdminContent\">\r\n\t\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_ddContainerSettings_workflowConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_defaultDDWorkflowSelectorLabel\" for=\"${id}_defaultDDWorkflow\">${_messages.repositoryDDSweepPane_defaultWorkflow}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.repositoryDDSweepPane_defaultWorkflowHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div class=\"dijitInline\" data-dojo-attach-point=\"_defaultDDWorkflowSelectorContainer\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_alwaysDeclaredRecordSelect\">${_messages.admin_ddContainerSettings_AlwaysDeclareRecord}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_AlwaysDeclareRecordHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<select data-dojo-attach-point=\"_alwaysDeclaredRecordSelect\" \r\n\t\t\t\t\t\t\tid=\"${id}_alwaysDeclaredRecordSelect\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit/form/Select\">\r\n\t\t\t\t\t\t    <option value=\"true\">${_messages.yes}</option>\r\n\t\t\t\t\t\t    <option value=\"false\">${_messages.no}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_alwaysShowDeclareResultSelect\">${_messages.admin_ddContainerSettings_AlwaysShowDeclareResult}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_ddContainerSettings_AlwaysShowDeclareResultHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<select data-dojo-attach-point=\"_alwaysShowDeclareResultSelect\"\r\n\t\t\t\t\t\t\tid=\"${id}_alwaysShowDeclareResultSelect\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit/form/Select\">\r\n\t\t\t\t\t\t    <option value=\"true\">${_messages.yes}</option>\r\n\t\t\t\t\t\t    <option value=\"false\">${_messages.no}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span>${_messages.repositoryDDSweepPane_defaultRecordContainer}:</span>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.repositoryDDSweepPane_defaultRecordContainerHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div class=\"dijitInline\" data-dojo-attach-point=\"_recordContainerDirectorySelectorContainer\"></div>\r\n\t\t\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_clearButton\" data-dojo-props=\"disabled: true\">${_messages.clear}</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody></table>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/AddRecordFolderDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "ecm/model/Desktop", "ier/constants", "ier/messages", "ier/model/RecordFolderContainerMixin", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/AddRecordFolderDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemDispositionPane", "ier/widget/panes/EntityItemGeneralPane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_array, dojo_lang, ecm_model_desktop, ier_constants, ier_messages, ier_model_RecordFolderContainerMixin, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.AddRecordFolderDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _parentFolder:null, _classes:[{type:ier_constants.EntityType_ElectronicRecordFolder, name:ier_constants.ClassName_ElectronicRecordFolder}, {type:ier_constants.EntityType_PhysicalContainer, name:ier_constants.ClassName_PhysicalContainer, id:"PhysicalBox"}, {type:ier_constants.EntityType_HybridRecordFolder, name:ier_constants.ClassName_HybridRecordFolder}, {type:ier_constants.EntityType_PhysicalRecordFolder, name:ier_constants.ClassName_PhysicalRecordFolder}], postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemGeneralPane);
            this.addChildPane(this._entityItemPropertiesPane);
            this.addChildPane(this._entityItemDispositionPane);
            if (ecm_model_desktop.showSecurity) {
                this.addChildPane(this._entityItemSecurityPane);
            } else {
                this._entityItemSecurityPane.getParent().domNode.style.display = "none";
            }
            this.addButton(ier_messages.baseDialog_addButton, "_onClickAdd", true, true);
        }, show:function (repository, parentFolder, item) {
            this.inherited("show", []);
            this._parentFolder = parentFolder;
            this.item = item;
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            if (this.item) {
                this.set("title", ier_messages.addRecordFolderDialog_editTitle);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_updateButton);
            } else {
                this.set("title", ier_messages.addRecordFolderDialog_title);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_addButton);
            }
            this.setIntroText(ier_messages.addRecordFolderDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh05.htm"));
            this.setResizable(true);
            var rootClass = null;
            var defaultClass = null;
            var excludedClasses = [];
            var allowedTypes = (this._parentFolder.getAllowedRMTypes() || []);
            dojo_array.forEach(this._classes, function (c) {
                if (dojo_array.indexOf(allowedTypes, c.type) < 0) {
                    excludedClasses.push(c.id || c.name);
                } else {
                    if (!rootClass) {
                        rootClass = c.name;
                    } else {
                        rootClass = ier_constants.ClassName_RecordFolder;
                    }
                    if (!defaultClass && c.id != "PhysicalBox") {
                        defaultClass = c.name;
                    }
                }
            });
            if (excludedClasses.length === 0) {
                excludedClasses = null;
            }
            this._entityItemGeneralPane.createRendering(this.repository, this._parentFolder);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:rootClass, defaultNameProperty:ier_constants.Property_RecordFolderName, entityType:ier_constants.EntityType_RecordFolder, defaultClass:defaultClass, excludedClasses:excludedClasses, item:this.item});
            this._entityItemPropertiesPane.enableAndSetNamingPattern(ier_constants.Property_RecordFolderName, ier_constants.Property_RecordFolderIdentifier);
            this._entityItemDispositionPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, entityItemPropertiesPane:this._entityItemPropertiesPane});
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes, deferArray) {
                this._entityItemPropertiesPane.setReviewerAndCurrentDate(attributes, deferArray);
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, null, this._parentFolder, contentClass, properties);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _onClickAdd:function () {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var className = this._entityItemPropertiesPane.getContentClass().id;
                var dispSchedule = this._entityItemDispositionPane.getDispositionSchedule();
                var legacyScheduleParams = this._entityItemDispositionPane.getLegacyDispositionScheduleProperties();
                if (this._parentFolder.isInstanceOf(ier_model_RecordFolderContainerMixin)) {
                    this._parentFolder.addRecordFolder(className, properties, permissions, dispSchedule, legacyScheduleParams, dojo_lang.hitch(this, function (recordFolder) {
                        if (this._parentFolder) {
                            this._parentFolder.refresh();
                        }
                        this.onCancel();
                    }));
                }
            }
        }});
    });
}, "ier/widget/listView/gridModules/ObjectListRowContextMenu":function () {
    define(["dojo/_base/declare", "dojo/DeferredList", "dojo/_base/Deferred", "dojo/_base/lang", "ecm/model/Desktop", "ier/widget/listView/gridModules/RowContextMenu", "ier/util/menu", "ier/util/util"], function (dojo_declare, dojo_DeferredList, dojo_Deferred, dojo_lang, ecm_model_Desktop, ier_widget_listView_RowContextMenu, ier_util_menu, ier_util) {
        return dojo_declare("ier.widget.listView.modules.RowContextMenu", [ier_widget_listView_RowContextMenu], {performDefaultActionForItem:function (selectedItem) {
        }, getMenu:function (selectedItems, callback) {
            var defArray = [];
            var itemsList = {};
            var savedArguments = arguments;
            if (selectedItems) {
                for (var i in selectedItems) {
                    var item = selectedItems[i];
                    if (item && item.noPermissionsLoaded) {
                        var deferred = new dojo_Deferred();
                        defArray.push(deferred);
                        item.contextMenuDeferredObj = deferred;
                        itemsList[ier_util.getGuidId(item.id)] = item;
                        item.repository.retrieveItem(item.id, dojo_lang.hitch(this, function (itemRetrieved) {
                            var savedItem = itemsList[ier_util.getGuidId(itemRetrieved.id)];
                            savedItem.updatePropertiesAndAttributes(itemRetrieved, true);
                            savedItem.contextMenuDeferredObj.resolve();
                        }));
                    }
                }
                if (defArray.length == 0) {
                    this.inherited(arguments);
                } else {
                    var defs = new dojo_DeferredList(defArray);
                    defs.then(dojo_lang.hitch(this, function () {
                        this.inherited("getMenu", savedArguments);
                    }));
                }
            }
        }});
    });
}, "ier/widget/admin/DDContainerSettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ier/messages", "ier/constants", "ier/model/admin/Config", "ecm/Messages", "dojo/text!./templates/DDContainerSettingsPane.html", "dijit/form/NumberTextBox", "dijit/form/Select", "ecm/widget/HoverHelp", "idx/layout/TitlePane"], function (declare, lang, dom_class, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, messages, ier_constants, Config, ecm_messages, template, NumberTextBox, Select) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:template, config:null, dirty:false, valid:true, _messages:messages, ecmMessages:ecm_messages, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._restoreDefaultsButton, "onClick", "_restoreDefaults");
            this.controls = {"defensibleSweepThreadCount":this._threadCountTextBox, "defensibleSweepQueryPageSize":this._queryPageSizeTextBox, "defensibleSweepUpdateBatchSize":this._updateBatchSizeTextBox, "defensibleSweepContentSizeLimit":this._contentSizeLimitTextBox, "defensibleSweepLinkCacheSizeLimit":this._linkCacheSizeLimitTextBox, "defensibleSweepOnHoldContainerCacheSize":this._onHoldContainerCacheSizeLimitTextBox};
            this.controlDefaults = {"defensibleSweepThreadCount":"1", "defensibleSweepQueryPageSize":"10000", "defensibleSweepUpdateBatchSize":"100", "defensibleSweepContentSizeLimit":"200000", "defensibleSweepLinkCacheSizeLimit":"100000", "defensibleSweepOnHoldContainerCacheSize":"100000"};
            for (var i in this.controls) {
                this.connect(this.controls[i], "onChange", function () {
                    this._validate(true);
                });
            }
        }, _restoreDefaults:function () {
            for (var i in this.controls) {
                var control = this.controls[i];
                if (control instanceof NumberTextBox) {
                    this._setValue(control, parseInt(this.controlDefaults[i]));
                }
                if (control instanceof Select) {
                    this._setValue(control, String(this.controlDefaults[i]));
                }
            }
            this._validate(false);
        }, save:function () {
            if (this.config) {
                for (var i in this.controls) {
                    this.config.set(i, this.controls[i].get("value") || "");
                }
            }
            for (var i in this.controls) {
                ecm.model.desktop.defensibleSweepSettings[i] = this.config.get(i);
            }
        }, reset:function () {
            for (var i in this.controls) {
                var control = this.controls[i];
                if (control instanceof NumberTextBox) {
                    this._setValue(control, parseInt(this.config && this.config.get(i) || this.controlDefaults[i]));
                }
                if (control instanceof Select) {
                    this._setValue(control, String(this.config && this.config.get(i)) || String(this.controlDefaults[i]));
                }
            }
            this._validate(false);
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            this.valid = true;
            for (var i in this.controls) {
                var control = this.controls[i];
                if (control.isValid && !control.isValid()) {
                    this.valid = false;
                }
            }
            this.dirty = dirty;
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/widget/tasks/ReportTasksListingPane":function () {
    define("ier/widget/tasks/ReportTasksListingPane", ["dojo/_base/declare", "ecm/widget/listView/modules/Bar", "ier/constants", "ier/messages", "ier/widget/listView/modules/TaskFilter", "ier/widget/listView/modules/Toolbar", "ier/widget/tasks/TasksListingPane"], function (dojo_declare, ecm_widget_listView_Bar, ier_constants, ier_messages, ier_widget_listView_TaskFilter, ier_widget_listView_Toolbar, ier_widget_TasksListingPane) {
        return dojo_declare("ier.widget.tasks.ReportTasksListingPane", [ier_widget_TasksListingPane], {toolbarDef:"IERReportTaskToolbarMenuType", postCreate:function () {
            this.inherited(arguments);
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ecm_widget_listView_Bar, top:[[[{moduleClass:ier_widget_listView_Toolbar}, {moduleClass:ier_widget_listView_TaskFilter, filterSelectOptions:[{label:ier_messages.taskPane_allTasks, value:"all", selected:true}, {label:ier_messages.taskPane_scheduledTasks, value:ier_constants.TaskStatus_Scheduled}, {label:ier_messages.taskPane_inProgressTasks, value:ier_constants.TaskStatus_InProgress}, {label:ier_messages.taskPane_completedTasks, value:ier_constants.TaskStatus_Completed}, {label:ier_messages.taskPane_failedTasks, value:ier_constants.TaskStatus_Failed}]}]]]});
            return array;
        }, setupTaskFilterConnections:function () {
            this.inherited(arguments);
            if (this._onTaskFilterSelectChangeHandler) {
                this.disconnect(this._onTaskFilterSelectChangeHandler);
            }
            this._onTaskFilterSelectChangeHandler = this.connect(this.taskFilterModule, "onFilterSelectChange", function (value) {
                this.categoryTask.taskStatus = value;
                this.retrieveTasks();
            });
        }});
    });
}, "ier/widget/_FolderSelectorDropDown":function () {
    define(["dojo/_base/declare", "ecm/widget/_FolderSelectorDropDown", "ecm/widget/_SinglePropertyEditorMixin", "ier/widget/FolderSelector", "ier/util/util"], function (dojo_declare, ecm_widget_FolderSelectorDropDown, ecm_widget_SinglePropertyEditorMixin, ier_widget_FolderSelector, ier_util) {
        return dojo_declare("ier.widget._FolderSelectorDropDown", [ecm_widget_FolderSelectorDropDown, ecm_widget_SinglePropertyEditorMixin], {createFolderSelector:function (params) {
            if (params) {
                return new ier_widget_FolderSelector(params);
            } else {
                this._folderSelector = new ier_widget_FolderSelector({"id":this.id + "_FolderSelector", "class":"folderSelectorDropDownContent", "selectRootInitially":this.selectRootInitially, "preventSelectRoot":this.preventSelectRoot, "preventSelectRootTooltip":this.preventSelectRootTooltip, "unselectableFolders":this.unselectableFolders, "showIncludeSubfolders":this.showIncludeSubFolders});
            }
        }, getValue:function () {
            var folder = this.getSelected();
            if (folder) {
                var folder_id = this.getSelected().item.id;
                return ier_util.getGuidId(folder_id);
            }
        }, get:function (name) {
            if (name == "value") {
                return this.getValue();
            } else {
                if (name == "displayedValue") {
                    var selected = this.getSelected();
                    if (selected) {
                        return selected.item.name;
                    }
                }
            }
            return this.inherited(arguments);
        }});
    });
}, "ier/widget/layout/TaskPane":function () {
    require({cache:{"url:ier/widget/layout/templates/TaskPane.html":"<div class=\"taskPane ierCenterPane\">\r\n\t<div data-dojo-type=\"idx.layout.BorderContainer\" data-dojo-attach-point=\"mainPane\" data-dojo-props=\"gutters:false, design:'sidebar'\">\r\n\t\t\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'leading', gutters:false, splitter:true\"\r\n\t\t\tdata-dojo-attach-point=\"taskMenuPane\" class=\"tasksMenuPane\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"taskMenuContainer\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"taskResultPane\" data-dojo-props=\"region:'center'\" data-dojo-attach-point=\"taskListingContainerPane\" style=\"width:95%\">\r\n\t\t\t<div data-dojo-type=\"idx.layout.BorderContainer\" data-dojo-attach-point=\"taskListingBorderPane\" data-dojo-props=\"gutters:false, design:'headline'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit/layout/StackContainer\" data-dojo-props=\"region:'center'\" class=\"taskListingPane taskManagerPaneBorder\" \r\n\t\t\t\t\tdata-dojo-attach-point=\"taskListingStackContainer\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-props=\"region:'bottom', splitter:true, gutters:false\" data-dojo-type=\"dijit.layout.ContentPane\"\r\n\t\t\t\t\tdata-dojo-attach-point=\"taskInformationPaneContainer\" open=\"false\" class=\"taskManagerPaneBorder\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"}});
    define("ier/widget/layout/TaskPane", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/date/locale", "dojo/dom-construct", "dojo/dom-style", "dojo/string", "dojo/aspect", "dojo/_base/connect", "ecm/widget/layout/_LaunchBarPane", "ecm/model/Request", "ecm/model/Desktop", "ecm/model/_ModelObject", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ier/util/util", "ier/constants", "ier/messages", "ier/model/TaskTreeModel", "ier/widget/tasks/TaskNavigationTree", "dojo/text!./templates/TaskPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/layout/StackContainer"], function (dojo_declare, dojo_array, dojo_lang, dojo_date_locale, dojo_construct, dojo_style, dojo_string, dojo_aspect, dojo_connect, ecm_widget_layout_LaunchBarPane, ecm_model_Request, ecm_model_Desktop, ecm_model_ModelObject, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ier_util, ier_constants, ier_messages, ier_model_TaskTreeModel, ier_widget_TaskNavigationTree, templateString) {
        var TaskPane = dojo_declare("ier.widget.layout.TaskPane", [ecm_widget_layout_LaunchBarPane], {templateString:templateString, widgetsInTemplate:true, ier_messages:ier_messages, _recurringListingPaneClass:"ier/widget/tasks/RecurringTasksListingPane", treeModel:new ier_model_TaskTreeModel(), postCreate:function () {
            this.inherited(arguments);
            this.panes = {};
            this.taskInformationPanes = {};
            this.connect(ecm_model_Desktop, "onLogout", function (repository) {
                if (this.isLoaded) {
                    this.isLoaded = false;
                    this.cleanUp();
                }
            });
            this.connect(ecm_model_Desktop, "onLogin", function (repository) {
                if (this.selected) {
                    this.loadContent();
                }
            });
            this.taskNavigationTree = new ier_widget_TaskNavigationTree({model:this.treeModel, showRoot:false, style:"height: 100%", "aria-label":ier_messages.taskPane_tree});
            dojo_construct.place(this.taskNavigationTree.domNode, this.taskMenuContainer.domNode, "only");
            this.taskNavigationTree.model.getRoot(dojo_lang.hitch(this, function (root) {
                this.treeRoot = root;
                this.recurringTaskTreeNode = this.treeRoot.children[2];
            }));
            this.connect(ecm_model_Desktop.taskManager, "onAsyncTaskItemOpened", "openItem");
            this.connect(this.taskNavigationTree, "onItemSelected", "_onTreeItemSelected");
            this.connect(ecm_model_Desktop.taskManager, "onAsyncTaskItemAdded", function (task) {
                this.currentTaskListingPane.refresh();
            });
            dojo_aspect.after(this.taskListingStackContainer, "selectChild", dojo_lang.hitch(this, function (page, animation) {
                if (this.currentTaskListingPane && this.currentTaskListingPane.taskFilterModule) {
                    this.currentTaskListingPane.taskFilterModule.setUserCheckBox();
                    this.currentTaskListingPane.taskFilterModule.clearFilter();
                }
            }), true);
        }, loadContent:function () {
            if (!this.isLoaded) {
                var authenticatingRepository = ecm_model_Desktop.getAuthenticatingRepository();
                if (authenticatingRepository && !authenticatingRepository.isIERLoaded()) {
                    authenticatingRepository.loadIERRepository(dojo_lang.hitch(this, function (repo) {
                        this._loadContent();
                    }));
                } else {
                    this._loadContent();
                }
            }
        }, _loadContent:function () {
            this.setCurrentPane("ier/widget/tasks/MultiStatusTasksListingPane");
            this.taskNavigationTree.selectItem(this.treeRoot.children[0]);
            this.setCurrentPane(this._recurringListingPaneClass, true);
            var recurringTaskPane = this.panes[this._recurringListingPaneClass];
            recurringTaskPane.recurringTaskTreeNode = this.recurringTaskTreeNode;
            this.connectGridRowSelection(recurringTaskPane);
            this._setupTaskPreviewPaneConnections();
            this.isLoaded = true;
        }, _onTreeItemSelected:function (item, node) {
            this.selectItem(null);
            if (item != this._itemInProgress) {
                if (item instanceof ecm_model_AsyncTask && item.isTaskRecurring()) {
                    this.setCurrentPane(this._recurringListingPaneClass);
                    this._itemInProgress = item;
                    if (item.parent == this.recurringTaskTreeNode) {
                        item.retrieveAsyncTaskInstances(dojo_lang.hitch(this, function (resultSet) {
                            ecm_model_Desktop.taskManager.onAsyncTaskItemOpened(item, resultSet);
                            this.taskListingStackContainer.selectChild(this.currentTaskListingPane, false);
                            this._itemInProgress = null;
                        }));
                    } else {
                        this.taskListingStackContainer.selectChild(this.currentTaskListingPane, false);
                        this._itemInProgress = null;
                    }
                } else {
                    this.filterTaskListing(item);
                }
            }
        }, _setupTaskPreviewPaneConnections:function () {
            if (this.taskInformationPaneContainer._isOpen) {
                this.connectGridRowSelection();
            } else {
                if (!this.taskInformationPaneContainer._isInitialized) {
                    this._oneTimeRowClickHandle = this.connect(this.currentTaskListingPane.taskContentList, "onRowSelectionChange", function (selectedItems) {
                        if (selectedItems && selectedItems.length == 1) {
                            if (selectedItems[0]) {
                                this.taskListingBorderPane.restore();
                                dojo_style.set(this.taskInformationPaneContainer.domNode, "height", "50%");
                                this.taskInformationPaneContainer._isInitialized = true;
                                dojo_connect.disconnect(this._oneTimeRowClickHandle);
                            }
                        }
                    });
                }
            }
            this._onPanelOpenHandler = this.connect(this.taskListingBorderPane, "onPanelOpen", function (region) {
                this.taskInformationPaneContainer._isOpen = true;
                this.connectGridRowSelection();
            });
            this._onPanelCloseHandler = this.connect(this.taskListingBorderPane, "onPanelClose", function (region) {
                this.taskInformationPaneContainer._isOpen = false;
                dojo_connect.disconnect(this.rowClickHandle);
            });
        }, cleanUp:function () {
            if (this._onPanelOpenHandler) {
                dojo_connect.disconnect(this._onPanelOpenHandler);
            }
            if (this._onPanelCloseHandler) {
                dojo_connect.disconnect(this._onPanelCloseHandler);
            }
            if (this._onOpenItemHandler) {
                dojo_connect.disconnect(this._onOpenItemHandler);
            }
            if (this.taskNavigationTree) {
                this.taskNavigationTree.reload();
            }
            if (this.panes) {
                for (var i in this.panes) {
                    if (this.panes[i]) {
                        this.panes[i].reset();
                    }
                }
            }
        }, setCurrentPane:function (paneClass, noSet) {
            var currentPane = this.panes[paneClass];
            if (!currentPane) {
                require([paneClass], dojo_lang.hitch(this, function (cls) {
                    currentPane = new cls();
                    this.panes[paneClass] = currentPane;
                    this.taskListingStackContainer.addChild(currentPane);
                    if (!noSet) {
                        this.currentTaskListingPane = currentPane;
                    }
                }));
            } else {
                if (!noSet) {
                    this.currentTaskListingPane = currentPane;
                }
            }
        }, filterTaskListing:function (categoryTaskItem) {
            this.setCurrentPane(categoryTaskItem.taskListingPaneClass);
            this._retrieveTasks(categoryTaskItem);
        }, _retrieveTasks:function (categoryTask) {
            this.currentTaskListingPane.categoryTask = categoryTask;
            this.currentTaskListingPane.retrieveTasks(dojo_lang.hitch(this, function (resultSet) {
                this.taskListingStackContainer.selectChild(this.currentTaskListingPane, false);
                this.connectGridRowSelection();
                this._itemInProgress = null;
            }));
        }, connectGridRowSelection:function (pane) {
            var currentPane = pane ? pane : this.currentTaskListingPane;
            if (!currentPane._hasSetRowClickConnection) {
                this.connect(currentPane.taskContentList, "onRowSelectionChange", function (selectedItems) {
                    if (selectedItems && selectedItems.length == 1) {
                        if (selectedItems[0]) {
                            this.selectItem(selectedItems[0]);
                        }
                    }
                });
                currentPane._hasSetRowClickConnection = true;
            }
        }, openItem:function (item, resultSet) {
            this.selectItem(null);
            if (item && item instanceof ecm_model_AsyncTask) {
                if (item.isTaskRecurring()) {
                    var path = [];
                    path.push(this.treeRoot);
                    path.push(this.recurringTaskTreeNode);
                    path.push(item);
                    if (!this.taskNavigationTree.isPathSelected(path)) {
                        this.taskNavigationTree.set("path", path);
                    }
                    var recurringListingPane = this.panes[this._recurringListingPaneClass];
                    if (this.currentTaskListingPane != recurringListingPane) {
                        this.setCurrentPane(this._recurringListingPaneClass);
                        this.taskListingStackContainer.selectChild(this.currentTaskListingPane, false);
                        this.currentTaskListingPane.openItem();
                    }
                } else {
                    if (this.item.errors && this.item.errors.length > 0) {
                        this.selectItem(item, "errors");
                    } else {
                        this.selectItem(item, "results");
                    }
                }
            } else {
                if (item && item instanceof ecm_model_AsyncTaskInstance) {
                    this.selectItem(item, "results");
                } else {
                    if (item instanceof ier.model.CategoryTask) {
                        this.filterTaskListing(item);
                    }
                }
            }
        }, _getTaskInformationPane:function (handlerClassName, onComplete) {
            var taskInformationPane = this.taskInformationPanes[handlerClassName];
            if (!taskInformationPane) {
                var informationPaneClass = TaskPane.taskTypeLayoutMapping[handlerClassName] ? TaskPane.taskTypeLayoutMapping[handlerClassName].TaskInformationPane : "ier/widget/tasks/TaskInformationPane";
                require([informationPaneClass], dojo_lang.hitch(this, function (cls) {
                    taskInformationPane = new cls({taskHandlerClass:handlerClassName, title:ier_messages.taskPane_previewTitle});
                    this.taskInformationPanes[handlerClassName] = taskInformationPane;
                    this.taskInformationPane = taskInformationPane;
                    dojo_construct.place(this.taskInformationPane.domNode, this.taskInformationPaneContainer.domNode, "first");
                    onComplete(taskInformationPane);
                }));
            } else {
                if (taskInformationPane != this.taskInformationPane) {
                    this.taskInformationPane = taskInformationPane;
                    dojo_construct.place(taskInformationPane.domNode, this.taskInformationPaneContainer.domNode, "first");
                }
                onComplete(taskInformationPane);
            }
        }, selectItem:function (item, tabId) {
            if (item) {
                if (!this.taskInformationPaneContainer._isInitialized) {
                    this.taskListingBorderPane.restore();
                    dojo_style.set(this.taskInformationPaneContainer.domNode, "height", "50%");
                    this.taskInformationPaneContainer._isInitialized = true;
                }
                var _this = this;
                this._getTaskInformationPane(item.attributes.type, function (taskInformationPane) {
                    this.taskInformationPane = taskInformationPane;
                    if (item instanceof ecm_model_AsyncTask || item instanceof ecm_model_AsyncTaskInstance) {
                        this.taskInformationPane.setItem(item, dojo_lang.hitch(this, function (item) {
                            _this.taskListingBorderPane.resize();
                        }), tabId);
                    }
                });
            } else {
                if (this.taskInformationPane) {
                    this.taskInformationPane.setItem(null);
                }
            }
        }});
        TaskPane.taskTypeLayoutMapping = {"com.ibm.ier.plugin.tasks.RunReportTask":{"TaskInformationPane":"ier/widget/tasks/ReportTaskInformationPane"}, "com.ibm.ier.plugin.tasks.RunDefensibleDisposalReportSweepTask":{"TaskInformationPane":"ier/widget/tasks/DDSweepTaskInformationPane"}};
        return TaskPane;
    });
}, "ier/model/SearchTemplate":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/SearchTemplate", "ier/util/util", "ecm/model/Request", "ecm/model/ResultSet", "ier/constants"], function (declare, dojo_lang, ecm_model_searchtemplate, ier_util, ecm_model_Request, ecm_model_ResultSet, ier_constants) {
        var SearchTemplate = declare("ier.model.SearchTemplate", [ecm_model_searchtemplate], {search:function (callback, sortProperty, descending) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this._searchCompleted(response, callback);
            }));
            params.requestParams["templateID"] = this.id;
            params.requestParams["vsId"] = this.vsId || "";
            params.requestParams["criterias"] = this.getQueryString();
            if (sortProperty) {
                params.requestParams.order_by = sortProperty;
                params.requestParams.order_descending = descending || false;
            }
            params["requestBody"] = this.searchCriteria ? this.toJson(true) : "{}";
            var request = ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, "ierSearch", ier_constants.PostEncoding, params);
            return request;
        }, _searchCompleted:function (response, callback) {
            response.repository = this.repository;
            response.parentFolder = this;
            response.searchTemplate = this;
            var results = new ecm.model.ResultSet(response);
            results._moreOptions = this.moreOptions;
            if (callback) {
                callback(results);
            }
        }});
        SearchTemplate.createFromJSON = function (json, repository, resultSet, parent) {
            dojo_lang.mixin(json, {repository:repository, resultSet:resultSet, parent:parent});
            if (json.id) {
                var attributes = {};
                var attributeTypes = {};
                var attributeFormats = {};
                var attributeDisplayValues = {};
                var attributeReadOnly = {};
                var attributeItems = {};
                for (var i in json.attributes) {
                    var attr = json.attributes[i];
                    attributes[i] = attr[0];
                    if (attr.length > 1) {
                        attributeTypes[i] = attr[1];
                    }
                    if (attr.length > 2) {
                        attributeFormats[i] = attr[2];
                    }
                    if (attr.length > 3) {
                        attributeDisplayValues[i] = attr[3];
                    }
                    attributeReadOnly[i] = (attr.length > 4 && attr[4] === true);
                    if (attr.length > 5 && attr[5] != null && attr[5].rows) {
                        attributeItems[i] = ecm.model.ContentItem.createFromJSON(attr[5].rows[0], this.repository, null);
                    }
                }
                dojo_lang.mixin(json, {attributes:attributes, attributeTypes:attributeTypes, attributeFormats:attributeFormats, attributeDisplayValues:attributeDisplayValues, attributeReadOnly:attributeReadOnly, attributeItems:attributeItems});
            } else {
                dojo_lang.mixin(json, {id:["StoredSearch", json.repository_id, json.template_id].join(","), name:json.template_label, description:json.template_desc});
            }
            return new SearchTemplate(json);
        };
        return SearchTemplate;
    });
}, "url:ier/widget/layout/templates/ReportLayout.html":"<div class=\"ierReportLayout\" style=\"height:100%;width:100%\">\r\n\t<div data-dojo-attach-point=\"mainContainer\" data-dojo-type=\"dijit.layout.BorderContainer\" class=\"contentPane\" gutters=\"false\" style=\"height:100%;width:100%\">\t\t\r\n\t\t<div data-dojo-attach-point=\"mainStackContainer\" \r\n\t\t\t data-dojo-type=\"dijit.layout.StackContainer\" \r\n\t\t\t region=\"center\" \r\n\t\t\t class=\"stackContainer\">\r\n\t\t\t <div data-dojo-attach-point=\"mainPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t<div data-dojo-attach-point=\"_reportEntriesPane\" data-dojo-type=\"ier.widget.ReportEntryForm\" data-dojo-props=\"isPopup: true\"></div>\t\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"loginPane\" style=\"display: none\"></div>\r\n\t</div>\r\n</div>", "ier/widget/dialog/ReportDefinitionDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/keys", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/BaseAccordionWizardDialog", "ecm/model/AttributeDefinition", "ier/model/ReportDefinition", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane", "ier/widget/panes/ReportDefinitionQueryPane", "ier/widget/panes/ReportDefinitionPropertiesPane"], function (dojo_declare, dojo_lang, dojo_array, domClass, geometry, domStyle, dojo_keys, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_dialog_BaseAccordionWizardDialog, ecm_model_AttributeDefinition, ier_model_ReportDefinition, ier_widget_EntityItemPropertiesPane, ier_widget_EntityItemSecurityPane, ier_widget_ReportDefinitionQueryPane, ier_widget_ReportDefinitionPropertiesPane) {
        return dojo_declare("ier.widget.dialog.ReportDefinitionDialog", [ier_dialog_BaseAccordionWizardDialog], {widgetsInTemplate:true, _reportDefinitionFolder:null, ier_messages:ier_messages, _reportDefinition:null, finishButtonLabel:ier_messages.baseDialog_addButton, _isDirty:false, _isCopy:false, showSecurity:true, postCreate:function () {
            this.inherited(arguments);
            this._isDirty = false;
            this.setIntroText(ier_messages.reportDefDialog_intro);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh16.htm"));
            this.setResizable(true);
            this._descriptionPane = new ier_widget_EntityItemPropertiesPane();
            this._descriptionPane.title = ier_messages.reportDefinitionDialog_ReportDescription;
            this._propertiesPane = new ier_widget_ReportDefinitionPropertiesPane({disabled:true});
            this._sqlPane = new ier_widget_ReportDefinitionQueryPane({disabled:true});
            this._securityPane = new ier_widget_EntityItemSecurityPane({disabled:true});
            this._securityPane.title = ier_messages.reportDefinitionDialog_Security;
            this.addChildPane(this._descriptionPane);
            this.addChildPane(this._propertiesPane);
            this.addChildPane(this._sqlPane);
            if (this.showSecurity) {
                this.addChildPane(this._securityPane);
            }
            this.connect(this._descriptionPane, "onRenderAttributes", dojo_lang.hitch(this, function (attributes, deferArray, contentClass) {
                var reportTitleIdx = -1;
                var despIdx = -1;
                dojo_array.forEach(attributes, function (item, idx) {
                    if (item.id == ier_constants.Property_RMReportTitle) {
                        item.required = true;
                        reportTitleIdx = idx;
                    } else {
                        if (item.id == ier_constants.Property_Description) {
                            despIdx = idx;
                        }
                    }
                });
                if (reportTitleIdx != -1) {
                    attributes[0] = attributes.splice(reportTitleIdx, 1, attributes[0])[0];
                }
                if (despIdx != -1) {
                    attributes[1] = attributes.splice(despIdx, 1, attributes[1])[0];
                }
                if (this._isCopy) {
                    if (this._reportDefinition) {
                        this._reportDefinition.name = this._reportDefinition.name + "(2)";
                    }
                    if (this._descriptionPane.item && this._descriptionPane.item.attributes) {
                        this._descriptionPane.item.attributes[ier_constants.Property_RMReportTitle] = this._descriptionPane.item.attributes[ier_constants.Property_RMReportTitle] + "(2)";
                    }
                }
                var reportNameDef = this._renderStringParameter(ier_constants.Property_ReportName, ier_messages.reportDefDialog_reportNameFieldName, true, contentClass, ((this._reportDefinition) ? this._reportDefinition.name : null));
                attributes.splice(1, 0, reportNameDef);
                var entryHelp = this._renderStringParameter("EntryHelp", ier_messages.reportDefDialog_entryHelpFieldName, false, contentClass, ((this._reportDefinition) ? this._reportDefinition.getEntryHelp() : null));
                var dbTableName = this._renderStringParameter("DatabaseTableName", ier_messages.reportDefDialog_dbTableFieldName, true, contentClass, ((this._reportDefinition) ? this._reportDefinition.tableName : null));
                attributes.push(entryHelp);
                attributes.push(dbTableName);
            }));
            this.connect(this._descriptionPane, "onInputChange", dojo_lang.hitch(this, function () {
                this._isDirty = true;
                if (this._descriptionPane.validate()) {
                    this.enablePane(this._propertiesPane);
                    this.enablePane(this._sqlPane);
                    this.enablePane(this._securityPane);
                } else {
                    this.disablePane(this._propertiesPane);
                    this.disablePane(this._sqlPane);
                    this.disablePane(this._securityPane);
                }
                this.updateButtonsState();
            }));
            this.connect(this._descriptionPane, "onKeyDown", function (evt) {
                if (evt.keyCode == dojo_keys.ENTER) {
                    evt.stopPropagation();
                }
            });
            this.connect(this._propertiesPane, "onChange", "_onReportPropertiesChange");
        }, show:function (repository, item, isCopy) {
            this.inherited(arguments);
            this._isDirty = false;
            this._isCopy = isCopy;
            if (item) {
                this.item = item;
                var docid = (item.docid != null) ? item.docid : ier_util.getGuidId(item.id);
                this._reportDefinition = new ier_model_ReportDefinition({id:docid, name:item.name, repository:repository});
            }
            if (this._isCopy) {
                this.set("title", ier_messages.reportDefDialog_copyReportTitle);
                this.getDefaultButton().set("label", this._ierMessages.reportDefDialog_copyButton);
            } else {
                if (this._reportDefinition) {
                    this.set("title", ier_messages.reportDefDialog_editReportTitle);
                    this.getDefaultButton().set("label", this._ierMessages.baseDialog_updateButton);
                } else {
                    this.set("title", ier_messages.reportDefDialog_addReportTitle);
                    this.getDefaultButton().set("label", this._ierMessages.baseDialog_addButton);
                }
            }
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderStringParameter:function (ID, Label, isReq, contentClass, defaultValue, readonly, choiceList) {
            var criterion = new ecm_model_AttributeDefinition({id:ID, name:Label, label:Label, repositoryType:this.repository.type, dataType:ier_constants.DataType_String, required:isReq, defaultValue:(defaultValue == null) ? [] : defaultValue, cardinality:"SINGLE", settability:ier_constants.ReportEntry_Settability, choiceList:choiceList, contentClass:contentClass, readOnly:(readonly) ? true : false, maxLength:256});
            return criterion;
        }, _renderDialog:function () {
            this._renderPaneIdx = 0;
            if (this._reportDefinition) {
                this._reportDefinition.loadReportDefinition(dojo_lang.hitch(this, function (reportDefinition) {
                    this._reportDefinition = reportDefinition;
                    this._renderNextPane(this._renderPaneIdx);
                }));
            } else {
                this._renderNextPane(this._renderPaneIdx);
            }
        }, _renderNextPane:function (paneIdx) {
            switch (paneIdx) {
              case 0:
                this.connect(this._descriptionPane, "onCompleteRendering", dojo_lang.hitch(this, function () {
                    this._descriptionPane.resizeCommonProperties();
                    this._descriptionPane.onInputChange();
                    this.resize();
                    this.validateInput();
                    var namePrefilled = this._descriptionPane.getPropertyValue(ier_constants.Property_ReportName);
                    var titlePrefilled = this._descriptionPane.getPropertyValue(ier_constants.Property_RMReportTitle);
                    if (namePrefilled != titlePrefilled) {
                        this._descriptionPane.enablePropertieValuesSyncUp(false);
                    }
                    this._renderNextPane((++this._renderPaneIdx));
                }));
                this._descriptionPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_ReportDefinition, defaultNameProperty:ier_constants.Property_RMReportTitle, entityType:ier_constants.EntityType_ReportDefinition, hideContentClassSelector:true, item:this.item});
                break;
              case 1:
                this.connect(this._propertiesPane, "onCompleteRendering", dojo_lang.hitch(this, function () {
                    this._renderNextPane((++this._renderPaneIdx));
                }));
                this._propertiesPane.createRendering(this.repository, this._reportDefinition);
                break;
              case 2:
                this.connect(this._sqlPane, "onCompleteRendering", dojo_lang.hitch(this, function () {
                    this._renderNextPane((++this._renderPaneIdx));
                }));
                this._sqlPane.createRendering(this.repository, this._reportDefinition);
                break;
              case 3:
                var contentClass = this.repository.getContentClass(ier_constants.ClassName_ReportDefinition);
                this._securityPane.createRendering(this.repository, (this._reportDefinition ? this._reportDefinition : null), null, contentClass);
                this._onCompleteRendering();
                break;
              default:
                break;
            }
        }, _onReportPropertiesChange:function () {
            this._isDirty = true;
            var items = this._propertiesPane.getSelectedItems();
            this._sqlPane.setGridItems(items);
        }, _validateSQLInput:function () {
            return this._sqlPane._validateInput();
        }, _addReportDefinition:function (properties, queries, permissions) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.hide();
                this.repository.onConfigure(this.repository);
            }));
            var data = {};
            if (!this._isCopy && this._reportDefinition != null) {
                data[ier_constants.Param_Id] = this._reportDefinition.id;
            }
            data[ier_constants.Param_ReportDefinitionProperties] = properties;
            data[ier_constants.Param_Properties] = queries;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_SaveReportDefinition, ier_constants.PostEncoding, params);
        }, _onClickAdd:function () {
            if (this._validateSQLInput()) {
                var properties = this._descriptionPane.getProperties();
                var queries = this._sqlPane.getQueries();
                var permissions = this._securityPane.getPermissions();
                this._addReportDefinition(properties, queries, permissions);
            }
        }, onFinishButtonClicked:function () {
            this._onClickAdd();
        }, _onCompleteRendering:function () {
            this._isDirty = false;
            this._sqlPane.setTitlePaneFocusNodeHeight();
            this.onCompleteRendering();
        }, onCompleteRendering:function () {
        }});
    });
}, "ier/widget/dialog/AddObjectStorePermissionDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/_base/array", "dojo/_base/kernel", "dojo/dom-construct", "dojo/dom-class", "dijit/Tooltip", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/form/Select", "ecm/widget/dialog/BaseDialog", "ecm/LoggerMixin", "ecm/Messages", "ecm/model/Desktop", "ecm/model/Permission", "ecm/model/UserGroup", "ecm/widget/UserGroupSelector", "ier/messages", "idx/html", "dojo/text!./templates/AddObjectStorePermissionDialogContent.html"], function (declare, lang, connect, array, kernel, construct, domClass, Tooltip, BorderContainer, ContentPane, Select, BaseDialog, LoggerMixin, Messages, Desktop, Permission, UserGroup, UserGroupSelector, ier_messages, idxHtml, template) {
        return declare("ier.widget.dialog.AddObjectStorePermissionDialog", [BaseDialog, LoggerMixin], {contentString:template, widgetsInTemplate:true, _messages:ecm.messages, postCreate:function () {
            this.inherited(arguments);
            domClass.add(this.domNode, "ecmAddPermissionDialog");
            this.setTitle(this._messages.add_permissions_label);
            this.cancelButtonLabel = this._messages.close;
            this._applyButton = this.addButton(this._messages.apply_button_label, "_onApply", false, false);
            this._addButton = this.addButton(this._messages.add_permission_add_label, "_onAdd", false, false);
            this.setResizable(true);
            if (this._selector) {
                this._selector.destroy();
            }
            this._selector = new UserGroupSelector({defaultScope:"groups", selectedItems:[], showPseudoGroups:this.repository._isP8(), filteredItems:this.filteredItems});
            this._userGroupSelector.set("content", this._selector);
            this._selector.startup();
            this._selector.createRendering(this.repository);
            connect.connect(this._selector, "onChange", this, "_onSelectedItemsChanged");
            this._onSelectedItemsChanged();
        }, _onApply:function () {
            var selectedItems = this._selector.getSelectedItems();
            var permissions = this._getPermissions(selectedItems);
            if (this.filteredItems) {
                this.filteredItems = this.filteredItems.concat(selectedItems);
                this._selector.setFilteredItems(this.filteredItems);
            }
            this._selector.clearSelectedItems();
            this._onSelectedItemsChanged();
            if (this.callback) {
                this.callback(permissions);
            }
        }, _onAdd:function () {
            this._onApply();
            this.onCancel();
        }, focus:function () {
            this._selector.focus();
        }, _getPermissions:function (selectedItems) {
            var permissions = [];
            array.forEach(selectedItems, function (entry, index) {
                var granteeType = (entry.isInstanceOf && entry.isInstanceOf(UserGroup)) ? Permission.GRANTEE_TYPE.GROUP : Permission.GRANTEE_TYPE.USER;
                permissions.push(new Permission({id:entry.id, name:entry.name, displayName:entry.displayName, granteeType:granteeType}));
            });
            return permissions;
        }, _onSelectedItemsChanged:function () {
            if (this._selector.getSelectedItems().length > 0) {
                this._applyButton.set("disabled", false);
                this._addButton.set("disabled", false);
            } else {
                this._applyButton.set("disabled", true);
                this._addButton.set("disabled", true);
            }
        }, destroy:function () {
            this._applyButton.destroy();
            this._addButton.destroy();
            this._selector.destroy();
            this.filteredItems = null;
            this.inherited(arguments);
        }});
    });
}, "ier/widget/dialog/MoveRecordDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/Messages", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/UnselectableFolder", "ecm/widget/FolderSelectorCallback", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/_FolderSelectorDropDown", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/MoveRecordDialog.html", "dijit/layout/ContentPane", "ecm/widget/HoverHelp", "ecm/widget/ValidationTextBox"], function (dojo_declare, dojo_lang, dojo_class, ecm_messages, ecm_model_desktop, ecm_model_Request, ecm_widget_UnselectableFolder, ecm_widget_FolderSelectorCallback, ier_constants, ier_messages, ier_util, ier_widget_FolderSelectorDropDown, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.MoveRecordDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _record:null, _fp_repository_location:null, _messages:ier_messages, recordItem:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierSmallDialog");
            this.okButton = this.addButton(ier_messages.moveRecordDialog_moveButton, "_onClickMove", false, true);
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.repository = repository;
            this.recordItem = items[0];
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            this.setTitle(ier_messages.moveRecordDialog_title);
            this.setIntroText(ier_messages.moveRecordDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh13.htm"));
            this._reasonForMove.set("missingMessage", ecm_messages.property_missingMessage);
            this.okButton.set("disabled", true);
            if (this._folderSelector) {
                this._folderSelector.destroy();
                this._folderSelector = null;
            }
            this._folderSelector = new ier_widget_FolderSelectorDropDown();
            this._folderSelector.selectRootInitially = false;
            this._folderSelector.preventSelectRoot = true;
            this.addChildWidget(this._folderSelectorCell);
            this._folderSelectorCell.appendChild(this._folderSelector.domNode);
            this._setFolderSelectorPermissions(this.repository, dojo_lang.hitch(this, function () {
                this._setFolderRoot(this.repository, ecm_model_desktop.getCurrentFilePlanId());
            }));
            this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                this._fp_repository_location = folder.item.id;
                this.okButton.set("disabled", !(this.validate()));
            });
            this.resize();
        }, _setFolderRoot:function (repository, rootFolderId) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this._folderSelector.setRoot(itemRetrieved);
                }));
            } else {
                this._folderSelector.setRoot(repository);
            }
        }, _setFolderSelectorPermissions:function (repository, onComplete) {
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback(ier_constants.Privilege_CanMoveRecordToContainer, ier_messages.moveRecordDialog_notAllowedToMoveToContainer);
            this._folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            var sourceContainer = this.recordItem.parent.id;
            var unselectableFolders = [];
            var unselectableItem = new ecm_widget_UnselectableFolder(sourceContainer, true, ier_messages.moveRecordDialog_SourceCannotBeDestination);
            unselectableFolders.push(unselectableItem);
            this._folderSelector.setUnselectableFolders(unselectableFolders);
            if (onComplete) {
                onComplete();
            }
        }, validate:function () {
            if (this._reasonForMove.get("value").length == 0 || this._fp_repository_location == null) {
                return false;
            } else {
                return true;
            }
        }, _onNameChange:function () {
            this.okButton.set("disabled", !(this.validate()));
        }, _setReasonLength:function (repository) {
            var contentClass = repository.getContentClass(ier_constants.ClassName_RecordCategory);
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                for (var i in attributeDefinitions) {
                    var attributeDefinition = attributeDefinitions[i];
                    if (attributeDefinition.id == ier_constants.Property_ReasonForReclassification) {
                        this._reasonForMove.set("maxLength", attributeDefinition.maxLength);
                        break;
                    }
                }
            }));
        }, _onClickMove:function () {
            if (this.validate()) {
                this.recordItem.move(this._fp_repository_location, this._reasonForMove.get("value"), dojo_lang.hitch(this, function () {
                    this.onCancel();
                }));
            }
        }});
    });
}, "ier/widget/panes/NamingPatternLevelPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dijit/Tooltip", "dijit/form/Button", "dijit/form/NumberSpinner", "dijit/form/Select", "dijit/form/ValidationTextBox", "dijit/registry", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/NamingPatternLevelPane.html", "ecm/widget/HoverHelp"], function (dojo_declare, dojo_array, dojo_lang, dojo_class, dojo_construct, dijit_Tooltip, dijit_form_Button, dijit_form_NumberSpinner, dijit_form_Select, dijit_form_ValidationTextBox, dijit_registry, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.NamingPatternLevelPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _messages:ier_messages, repository:null, levels:null, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._addButton, "onClick", this._addLevel);
        }, _setLevelsAttr:function (levels) {
            dojo_array.forEach(dijit_registry.findWidgets(this._levelContainer), function (widget) {
                widget.destroy();
            });
            dojo_construct.empty(this._levelContainer);
            if (!levels || levels.length === 0) {
                levels = [{level:1, increment:1}];
            } else {
                if (levels.length > 1) {
                    levels.sort(function (a, b) {
                        return (a && a.level || 0) - (b && b.level || 0);
                    });
                }
            }
            dojo_array.forEach(levels, this._createLevel, this);
        }, _getLevelsAttr:function () {
            var levels = [];
            for (var row = this._levelContainer.firstChild; row; row = row.nextSibling) {
                var level = {};
                var cell = row.firstChild;
                var levelBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                level.level = levelBox.get("value");
                if (!level.level) {
                    continue;
                }
                cell = cell.nextSibling;
                var entityTypeBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                level.entityType = entityTypeBox.get("value");
                if (!level.entityType) {
                    continue;
                }
                cell = cell.nextSibling;
                var patternBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                level.pattern = patternBox.get("value");
                if (!level.pattern) {
                    continue;
                }
                cell = cell.nextSibling;
                var incrementBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                var increment = incrementBox.get("value");
                if (increment) {
                    level.increment = increment;
                }
                levels.push(level);
            }
            return levels;
        }, _addLevel:function () {
            var level = 1;
            for (var row = this._levelContainer.firstChild; row; row = row.nextSibling) {
                var cell = row.firstChild;
                var levelBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                var value = levelBox.get("value");
                if (value >= level) {
                    level = value + 1;
                }
            }
            this._createLevel({level:level, increment:1});
            this.onInputChange(this);
        }, _removeLevel:function (event) {
            if (event && event.target) {
                var row = event.target.parentNode;
                while (row) {
                    if (dojo_class.contains(row, "ierNamingPatternLevelRow")) {
                        break;
                    }
                    row = row.parentNode;
                }
                if (row) {
                    dojo_array.forEach(dijit_registry.findWidgets(row), function (widget) {
                        widget.destroy();
                    });
                    row.parentNode.removeChild(row);
                    this.onInputChange(this);
                }
            }
        }, _createLevel:function (level) {
            level = level || {};
            var row = dojo_construct.create("tr", {"class":"ierNamingPatternLevelRow"});
            var cell = dojo_construct.create("td", {"class":"ierNamingPatternLevelCell"}, row);
            var levelBox = new dijit_form_NumberSpinner({"class":"ierLevelBox", required:true, intermediateChanges:true, value:(level.level || ""), constraints:{min:1, pattern:"#"}, validator:function () {
                var value = this.get("value");
                return value && !(this.invalidLevel && this.invalidLevel == value);
            }});
            dojo_construct.create("label", {"for":levelBox.id, innerHTML:ier_messages.namingPatternLevelPane_level, style:"display: none;"}, cell);
            dojo_construct.place(levelBox.domNode, cell);
            cell = dojo_construct.create("td", {"class":"ierNamingPatternLevelCell"}, row);
            var options = [{value:ier_constants.ClassName_RecordCategory, label:ier_messages.recordCategory}, {value:ier_constants.ClassName_RecordFolder, label:ier_messages.recordFolder}];
            var entityTypeBox = new dijit_form_Select({"class":"ierEntityTypeBox dijitSelectFixedWidth", options:options, sortByLabel:false, value:(level.entityType || ier_constants.ClassName_RecordCategory)});
            levelBox.onChange = entityTypeBox.onChange = dojo_lang.hitch(this, function () {
                this._validateLevel();
                this.onInputChange(levelBox);
            });
            dojo_construct.create("label", {"for":entityTypeBox.id, innerHTML:ier_messages.namingPatternLevelPane_entityType, style:"display: none;"}, cell);
            dojo_construct.place(entityTypeBox.domNode, cell);
            cell = dojo_construct.create("td", {"class":"ierNamingPatternLevelCell"}, row);
            var patternBox = new dijit_form_ValidationTextBox({"class":"ierPatternBox", required:true, value:(level.pattern || ""), validator:function () {
                var value = this.get("value");
                return value && !(this.invalidPattern && this.invalidPattern == value);
            }});
            patternBox.onChange = dojo_lang.hitch(this, function () {
                this._validatePattern(patternBox);
                this.onInputChange(patternBox);
            });
            dojo_construct.create("label", {"for":patternBox.id, innerHTML:ier_messages.namingPatternLevelPane_pattern, style:"display: none;"}, cell);
            dojo_construct.place(patternBox.domNode, cell);
            cell = dojo_construct.create("td", {"class":"ierNamingPatternLevelCell"}, row);
            var incrementBox = new dijit_form_NumberSpinner({"class":"ierIncrementBox", value:(level.increment || ""), constraints:{min:1, pattern:"#"}});
            dojo_construct.create("label", {"for":incrementBox.id, innerHTML:ier_messages.namingPatternLevelPane_increment, style:"display: none;"}, cell);
            dojo_construct.place(incrementBox.domNode, cell);
            cell = dojo_construct.create("td", {"class":"ierNamingPatternLevelCell"}, row);
            var removeButton = new dijit_form_Button({"class":"ierRemoveButton", iconClass:"ierRemoveIcon", showLabel:false});
            dojo_construct.place(removeButton.domNode, cell);
            this.connect(removeButton, "onClick", this._removeLevel);
            var tooltip = new dijit_Tooltip({connectId:[removeButton.domNode], label:ier_messages.namingPatternLevelPane_removeLevel});
            tooltip.startup();
            dojo_construct.place(row, this._levelContainer);
        }, isValidationRequired:function () {
            return true;
        }, validate:function () {
            return dojo_array.every(dijit_registry.findWidgets(this._levelContainer), function (widget) {
                return !widget.isValid || widget.isValid();
            });
        }, _validateLevel:function () {
            var map = {};
            for (var row = this._levelContainer.firstChild; row; row = row.nextSibling) {
                var cell = row.firstChild;
                var levelBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                if (levelBox.get("invalidLevel")) {
                    levelBox.set("invalidLevel", 0);
                    levelBox.set("invalidMessage", "");
                    levelBox.validate();
                }
                var level = levelBox.get("value");
                if (!level) {
                    continue;
                }
                cell = cell.nextSibling;
                var entityTypeBox = dijit_registry.getEnclosingWidget(cell.firstChild);
                var entityType = entityTypeBox.get("value");
                if (!entityType) {
                    continue;
                }
                if (entityType == ier_constants.ClassName_RecordFolder && level === 1) {
                    levelBox.set("invalidLevel", level);
                    levelBox.set("invalidMessage", ier_messages.namingPatternLevelPane_invalidFolderLevel);
                    levelBox._hasBeenBlurred = true;
                    levelBox.validate();
                    continue;
                }
                var levels = map[entityType];
                if (!levels) {
                    map[entityType] = [level];
                } else {
                    if (dojo_array.indexOf(levels, level) >= 0) {
                        levelBox.set("invalidLevel", level);
                        levelBox.set("invalidMessage", ier_messages.namingPatternLevelPane_duplicateLevel);
                        levelBox._hasBeenBlurred = true;
                        levelBox.validate();
                    } else {
                        levels.push(level);
                    }
                }
            }
        }, _validatePattern:function (patternBox) {
            patternBox.set("validating", true);
            var value = patternBox.get("value");
            patternBox.set("invalidPattern", "");
            patternBox.set("invalidMessage", "");
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                patternBox.set("validating", false);
                if (response.message) {
                    var m = response.message;
                    patternBox.set("invalidPattern", value);
                    patternBox.set("invalidMessage", m.text || m.userResponse || m.explanation || "");
                    patternBox.validate();
                    this.onInputChange(patternBox);
                }
            }));
            params.requestParams[ier_constants.Param_PatternString] = value;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_ValidateNamingPattern, ier_constants.PostEncoding, params);
        }});
    });
}, "ier/widget/panes/HoldConditionPane":function () {
    require({cache:{"url:ier/widget/panes/templates/HoldConditionPane.html":"<div class=\"ierHoldConditionPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\" data-dojo-attach-point=\"_conditionTabContainer\">\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.record}\" data-dojo-attach-point=\"_recordTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordInfo: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm1\" data-dojo-props=\"showContentContains: true\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton1\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane1\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList1\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordCategory}\" data-dojo-attach-point=\"_recordCategoryTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordCategory: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm2\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton2\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane2\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList2\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordFolder}\" data-dojo-attach-point=\"_recordFolderTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordFolder: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm3\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton3\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane3\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList3\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_messages.recordVolume}\" data-dojo-attach-point=\"_recordVolumeTab\" class=\"ierDialogTabContent\" data-dojo-props=\"recordVolume: true\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/CommonConditionsForm\" class=\"ecmBasicSearchBuilder\" data-dojo-attach-point=\"commonConditionsForm4\"></div>\r\n\t\t\t<div class=\"ierSectionContainer\">\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_previewButton4\">${_messages.holdConditionPane_preview}</button>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"_resultPane4\" title=\"${_messages.holdConditionPane_results}\" data-dojo-props=\"open:false\">\r\n\t\t\t\t<div data-dojo-type=\"ier.widget.listView.ContentList\" data-dojo-attach-point=\"_contentList4\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"}});
    define("ier/widget/panes/HoldConditionPane", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/aspect", "dojo/dom-style", "gridx/modules/SingleSort", "ecm/model/SearchClass", "ecm/model/SearchConfiguration", "ecm/model/admin/AdminConfig", "ecm/widget/dialog/MessageDialog", "ier/constants", "ier/util/dialog", "ier/messages", "ier/model/SearchTemplate", "ier/widget/dialog/IERBaseDialogPane", "ier/widget/listView/gridModules/RowContextMenu", "dojo/text!./templates/HoldConditionPane.html", "dijit/form/Button", "dijit/layout/TabContainer", "dijit/layout/ContentPane", "ier/widget/CommonConditionsForm", "idx/layout/TitlePane", "ecm/widget/listView/ContentList"], function (dojo_declare, dojo_array, dojo_lang, dojo_aspect, dojo_style, SingleSort, ecm_model_SearchClass, ecm_model_SearchConfiguration, ecm_model_admin_AdminConfig, ecm_dialog_MessageDialog, ier_constants, ier_util_dialog, ier_messages, SearchTemplate, ier_widget_dialog_IERBaseDialogPane, RowContextMenu, templateString) {
        return dojo_declare("ier.widget.panes.HoldConditionPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, _messages:ier_messages, _valid1:true, _valid2:true, _valid3:true, _valid4:true, _isContentSearchEnabled:true, _hasContent:false, repository:null, _classNames:[ier_constants.ClassName_Record, ier_constants.ClassName_RecordCategory, ier_constants.ClassName_RecordFolder, ier_constants.ClassName_Volume], _recordDisplayColumn:["{NAME}", ier_constants.Property_LastModifier, ier_constants.Property_DateLastModified], postCreate:function () {
            this.inherited(arguments);
            this.connect(this._previewButton1, "onClick", this._preview1);
            this.connect(this._previewButton2, "onClick", this._preview2);
            this.connect(this._previewButton3, "onClick", this._preview3);
            this.connect(this._previewButton4, "onClick", this._preview4);
            this.own(dojo_aspect.after(this.commonConditionsForm1, "onRenderCondition", dojo_lang.hitch(this, function (condition) {
                this._setDefaultAtt(condition, this.commonConditionsForm1, ier_constants.Property_DocumentTitle);
            }), true));
            this.own(dojo_aspect.after(this.commonConditionsForm2, "onRenderCondition", dojo_lang.hitch(this, function (condition) {
                this._setDefaultAtt(condition, this.commonConditionsForm2, ier_constants.Property_RecordCategoryName);
            }), true));
            this.own(dojo_aspect.after(this.commonConditionsForm3, "onRenderCondition", dojo_lang.hitch(this, function (condition) {
                this._setDefaultAtt(condition, this.commonConditionsForm3, ier_constants.Property_RecordFolderName);
            }), true));
            this.own(dojo_aspect.after(this.commonConditionsForm4, "onRenderCondition", dojo_lang.hitch(this, function (condition) {
                this._setDefaultAtt(condition, this.commonConditionsForm4, ier_constants.Property_VolumeName);
            }), true));
            this.own(dojo_aspect.after(this._conditionTabContainer, "_transition", dojo_lang.hitch(this, function (newTab, oldTab) {
                this._changeOldTabTitle(oldTab);
                this._changeNewTabTitle(newTab);
            }), true));
            this.own(dojo_aspect.after(this.commonConditionsForm1, "onFormValidate", dojo_lang.hitch(this, function (valid) {
                this._valid1 = valid;
                this.onInputChange();
            }), true), dojo_aspect.after(this.commonConditionsForm2, "onFormValidate", dojo_lang.hitch(this, function (valid) {
                this._valid2 = valid;
                this.onInputChange();
            }), true), dojo_aspect.after(this.commonConditionsForm3, "onFormValidate", dojo_lang.hitch(this, function (valid) {
                this._valid3 = valid;
                this.onInputChange();
            }), true), dojo_aspect.after(this.commonConditionsForm4, "onFormValidate", dojo_lang.hitch(this, function (valid) {
                this._valid4 = valid;
                this.onInputChange();
            }), true));
            dojo_style.set(this._contentList1.topContainer.domNode, "display", "none");
            dojo_style.set(this._contentList2.topContainer.domNode, "display", "none");
            dojo_style.set(this._contentList3.topContainer.domNode, "display", "none");
            dojo_style.set(this._contentList4.topContainer.domNode, "display", "none");
            this._contentList1.setGridExtensionModules([SingleSort, RowContextMenu]);
            this._contentList2.setGridExtensionModules([SingleSort, RowContextMenu]);
            this._contentList3.setGridExtensionModules([SingleSort, RowContextMenu]);
            this._contentList4.setGridExtensionModules([SingleSort, RowContextMenu]);
        }, _setDefaultAtt:function (condition, commonConditionsForm, defaultProperty) {
            var attributeDefinitionFormWid = commonConditionsForm.attributeForm;
            attributeDefinitionFormWid.setDefaultAttributeDefinitionId(defaultProperty);
        }, _changeNewTabTitle:function (newTab) {
            var title = "";
            if (newTab.recordInfo) {
                title = ier_messages.record;
            } else {
                if (newTab.recordCategory) {
                    title = ier_messages.recordCategory;
                } else {
                    if (newTab.recordFolder) {
                        title = ier_messages.recordFolder;
                    } else {
                        if (newTab.recordVolume) {
                            title = ier_messages.recordVolume;
                        }
                    }
                }
            }
            newTab.set("title", title);
        }, _changeOldTabTitle:function (oldTab) {
            var conditionCount = 0;
            var oldCondition = oldTab.getChildren()[0].getCondition();
            if (oldCondition) {
                if (oldCondition.criteria) {
                    conditionCount += oldCondition.criteria.length;
                }
                oldCondition.content ? conditionCount++ : conditionCount;
            }
            var title = "";
            if (oldTab.recordInfo) {
                title = ier_messages.record + " (" + conditionCount + ")";
            } else {
                if (oldTab.recordCategory) {
                    title = ier_messages.recordCategory + " (" + conditionCount + ")";
                } else {
                    if (oldTab.recordFolder) {
                        title = ier_messages.recordFolder + " (" + conditionCount + ")";
                    } else {
                        if (oldTab.recordVolume) {
                            title = ier_messages.recordVolume + " (" + conditionCount + ")";
                        }
                    }
                }
            }
            oldTab.set("title", title);
        }, _setRepositoryAttr:function (repository) {
            this.repository = repository;
            if (repository) {
                this.commonConditionsForm1.setRepository(repository);
                this.commonConditionsForm2.setRepository(repository);
                this.commonConditionsForm3.setRepository(repository);
                this.commonConditionsForm4.setRepository(repository);
                this._initTextSearch();
            }
        }, _setCondition:function (commonConditionsForm, condition, tab, entityTypeName) {
            var conditionCount = 0;
            commonConditionsForm.setCondition(condition);
            if (condition.criteria) {
                conditionCount += condition.criteria.length;
            }
            condition.content ? conditionCount++ : conditionCount;
            tab.set("title", entityTypeName + " (" + conditionCount + ")");
        }, _setConditionsAttr:function (conditions) {
            var flag = {record:true, recordCategory:true, recordFolder:true, recordVolume:true};
            if (conditions && conditions.length > 0) {
                dojo_array.forEach(conditions, dojo_lang.hitch(this, function (con) {
                    if (con && con.className == this._classNames[0]) {
                        this._setCondition(this.commonConditionsForm1, con, this._recordTab, ier_messages.record);
                        this._checkContent(con);
                        flag.record = false;
                    } else {
                        if (con && con.className == this._classNames[1]) {
                            this._setCondition(this.commonConditionsForm2, con, this._recordCategoryTab, ier_messages.recordCategory);
                            flag.recordCategory = false;
                        } else {
                            if (con && con.className == this._classNames[2]) {
                                this._setCondition(this.commonConditionsForm3, con, this._recordFolderTab, ier_messages.recordFolder);
                                flag.recordFolder = false;
                            } else {
                                if (con && con.className == this._classNames[3]) {
                                    this._setCondition(this.commonConditionsForm4, con, this._recordVolumeTab, ier_messages.recordVolume);
                                    flag.recordVolume = false;
                                }
                            }
                        }
                    }
                }));
            }
            if (this.repository) {
                if (flag.record) {
                    this._setEmptyCondition(this.commonConditionsForm1, this._recordTab, this._classNames[0], ier_messages.record);
                }
                if (flag.recordCategory) {
                    this._setEmptyCondition(this.commonConditionsForm2, this._recordCategoryTab, this._classNames[1], ier_messages.recordCategory);
                }
                if (flag.recordFolder) {
                    this._setEmptyCondition(this.commonConditionsForm3, this._recordFolderTab, this._classNames[2], ier_messages.recordFolder);
                }
                if (flag.recordVolume) {
                    this._setEmptyCondition(this.commonConditionsForm4, this._recordVolumeTab, this._classNames[3], ier_messages.recordVolume);
                }
            }
        }, _setEmptyCondition:function (commonConditionsForm, tab, className, entityTypeName) {
            commonConditionsForm.setClassName(className);
            commonConditionsForm.renderCondition(commonConditionsForm.getCondition());
            tab.set("title", entityTypeName + " (0)");
        }, _getConditionsAttr:function () {
            var conditions = [];
            var condition = null;
            if (this.commonConditionsForm1) {
                condition = this.commonConditionsForm1.getCondition();
                if (condition && (condition.criteria || condition.content)) {
                    condition.criteriaJson = this._getJsonCondition(condition, this._classNames[0], this.commonConditionsForm1);
                    conditions.push(condition);
                }
            }
            if (this.commonConditionsForm2) {
                condition = this.commonConditionsForm2.getCondition();
                if (condition && condition.criteria) {
                    condition.criteriaJson = this._getJsonCondition(condition, this._classNames[1], this.commonConditionsForm2);
                    conditions.push(condition);
                }
            }
            if (this.commonConditionsForm3) {
                condition = this.commonConditionsForm3.getCondition();
                if (condition && condition.criteria) {
                    condition.criteriaJson = this._getJsonCondition(condition, this._classNames[2], this.commonConditionsForm3);
                    conditions.push(condition);
                }
            }
            if (this.commonConditionsForm4) {
                condition = this.commonConditionsForm4.getCondition();
                if (condition && condition.criteria) {
                    condition.criteriaJson = this._getJsonCondition(condition, this._classNames[3], this.commonConditionsForm4);
                    conditions.push(condition);
                }
            }
            return conditions;
        }, _getJsonCondition:function (condition, className, commonConditionsForm) {
            var criteria = commonConditionsForm.attributeForm.createSearchCriteriaFromAttributeDefintions();
            var template = this._getSearchTemplate(condition, criteria, className);
            return template.toJson(true);
        }, _preview1:function () {
            this._preview(this._classNames[0], this.commonConditionsForm1, this._resultPane1, this._contentList1);
        }, _preview2:function () {
            this._preview(this._classNames[1], this.commonConditionsForm2, this._resultPane2, this._contentList2);
        }, _preview3:function () {
            this._preview(this._classNames[2], this.commonConditionsForm3, this._resultPane3, this._contentList3);
        }, _preview4:function () {
            this._preview(this._classNames[3], this.commonConditionsForm4, this._resultPane4, this._contentList4);
        }, _emptyCondition:function (condition) {
            var conditionCount = 0;
            if (condition) {
                if (condition.criteria) {
                    conditionCount += condition.criteria.length;
                }
                condition.content ? conditionCount++ : conditionCount;
            }
            return conditionCount > 0 ? false : true;
        }, _getSearchTemplate:function (condition, criteria, className) {
            var contentClass = this.repository.getContentClass(className);
            var config = ecm_model_SearchConfiguration.getSearchConfiguration({repository:this.repository});
            var template = new SearchTemplate({id:"", name:"", repository:this.repository});
            var objectType = config.OBJECT_TYPE.FOLDER;
            if (className == ier_constants.ClassName_Record) {
                objectType = config.OBJECT_TYPE.DOCUMENT;
            }
            var includeSubclasses = true;
            template.objectType = objectType;
            template.setSearchContentClass(contentClass);
            template.includeSubclasses = includeSubclasses;
            var searchClass = new ecm_model_SearchClass({id:contentClass.id, name:contentClass.name, objectType:objectType, searchSubclasses:includeSubclasses});
            template.setClasses([searchClass]);
            var objectStore = {id:this.repository.objectStoreName, symbolicName:this.repository.objectStoreName, displayName:this.repository.objectStoreDisplayName};
            template.objectStores = [objectStore];
            template.folders = [];
            var matchAll = condition.matchAll;
            template.andSearch = matchAll;
            template.searchCriteria = criteria;
            if (className == ier_constants.ClassName_Record && this._isContentSearchEnabled && condition && condition.content && condition.content.type == "CONTENT") {
                var textSearchCriteria = [];
                var textSearch = {"operator":"any", "text":condition.content.value};
                textSearchCriteria.push(textSearch);
                template.textSearchCriteria = textSearchCriteria;
            }
            var columns = dojo_lang.clone(config.getSearchDefaultColumns(objectType));
            if (className == ier_constants.ClassName_Record) {
                columns = this._recordDisplayColumn;
            }
            var resultsDisplay = {sortBy:config.getNameProperty(objectType), sortAsc:true, columns:columns};
            if (columns[0] == ecm_model_admin_AdminConfig.PSEUDO_NAME) {
                columns[0] = resultsDisplay.sortBy;
            } else {
                if (columns[0] != resultsDisplay.sortBy) {
                    columns.unshift(resultsDisplay.sortBy);
                }
            }
            dojo_array.forEach(criteria, function (crit) {
                var c = crit.id;
                if (c && dojo_array.indexOf(columns, c) < 0) {
                    columns.push(c);
                }
            });
            template.resultsDisplay = resultsDisplay;
            return template;
        }, _preview:function (className, commonConditionsForm, resultPane, contentList) {
            var condition = commonConditionsForm.getCondition();
            if (this._emptyCondition(condition)) {
                var messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.holdConditionPane_empty_ondition_message});
                messageDialog.startup();
                messageDialog.show();
                ier_util_dialog.manage(messageDialog);
                return;
            }
            var criteria = commonConditionsForm.attributeForm.createSearchCriteriaFromAttributeDefintions();
            var template = this._getSearchTemplate(condition, criteria, className);
            template.isIERHoldCondition = true;
            var request = template.search(dojo_lang.hitch(this, function (resultSet) {
                resultPane.set("open", true);
                var structure = resultSet.structure;
                if (structure) {
                    var cells = structure.cells && structure.cells[0];
                    if (cells && cells[2]) {
                        cells[2].width = "16em";
                        cells[2].widthWebKit = "16em";
                        cells.splice(0, 1);
                    }
                }
                contentList.setResultSet(resultSet);
            }));
        }, _initTextSearch:function () {
            var _this = this;
            this.repository.retrieveAssociatedContentRepositories(function (items) {
                var hasVerity = dojo_array.some(items || [], function (item) {
                    return item.textSearchType == ier_constants.Search_CBRType_Verity;
                });
                var hasCascade = dojo_array.some(items || [], function (item) {
                    return item.textSearchType == ier_constants.Search_CBRType_Cascade;
                });
                var optimizationNotSupported = dojo_array.some(items || [], function (item) {
                    return (item.textSearchOptimization == ier_constants.Search_CBR_Dynamic_Switching && item.textSearchRankOverride == ier_constants.Search_CBR_QueryRankOverride_Required);
                });
                if (optimizationNotSupported || ((!hasVerity && !hasCascade) || (hasVerity && hasCascade))) {
                    _this._isContentSearchEnabled = false;
                    _this.commonConditionsForm1._contentBox.set("disabled", true);
                    _this._hasContent && _this._previewButton1.set("disabled", true);
                }
            });
        }, _checkContent:function (con) {
            this._hasContent = con && con.content && con.content.type == "CONTENT";
            this._hasContent && !this._isContentSearchEnabled && this._previewButton1.set("disabled", true);
        }, setReadOnly:function () {
            this.commonConditionsForm1.setReadOnly();
            this.commonConditionsForm2.setReadOnly();
            this.commonConditionsForm3.setReadOnly();
            this.commonConditionsForm4.setReadOnly();
        }, isValid:function () {
            return this._valid1 && this._valid2 && this._valid3 && this._valid4;
        }, onInputChange:function () {
        }});
    });
}, "url:ier/widget/templates/RadioButtonSelector.html":"<div>\r\n\t<input id=\"${labelId}\" type=\"text\" style=\"display:none\">\r\n\t<fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t<legend style=\"display: none\" dojoAttachPoint=\"_legend\"></legend>\r\n\t\t<input id=\"${id}_button1\" dojoAttachPoint=\"_button1\" dojoType=\"dijit.form.RadioButton\" checked=\"checked\" name=\"${id}_button\" />\r\n\t\t<label for=\"${id}_button1\" dojoAttachPoint=\"button1Label\"></label>\r\n\t\t<input id=\"${id}_button2\" dojoAttachPoint=\"_button2\" dojoType=\"dijit.form.RadioButton\" name=\"${id}_button\" />\r\n\t\t<label for=\"${id}_button2\" dojoAttachPoint=\"button2Label\"></label>\r\n\t</fieldset>\r\n</div>", "url:ier/widget/admin/templates/RepositoryPane.html":"<div class=\"ecmAdminTab\">\r\n    <div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\" class=\"ecmAdminTabHeading\">\r\n\t\t<div data-dojo-attach-point=\"_titleNode\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" data-dojo-props=\"region: 'center'\">\r\n\t\t<div data-dojo-type=\"ier/widget/admin/RepositorySettingsPane\" data-dojo-attach-point=\"_settingsPane\" title=\"${_messages.admin_general}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/DisplayColumnPane\" data-dojo-attach-point=\"_displayColumnPane\" title=\"${_messages.admin_displayColumns}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/DisplayPropertyPane\" data-dojo-attach-point=\"_displayPropertyPane\" title=\"${_messages.admin_displayProperties}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/SystemPropertyPane\" data-dojo-attach-point=\"_systemPropertyPane\" title=\"${_messages.admin_systemProperties}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/RepositorySecurityPane\" data-dojo-attach-point=\"_securityPane\" title=\"${_messages.admin_systemConfig_securityScriptColumn}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/RepositoryReportPane\" data-dojo-attach-point=\"_reportPane\" title=\"${_messages.admin_reportSettings}\"></div>\r\n\t\t<div data-dojo-type=\"ier/widget/admin/RepositoryDDSweepPane\" data-dojo-attach-point=\"_ddSweepPane\" title=\"${_messages.admin_ddContainerSettings}\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/admin/GeneralSettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ier/messages", "ier/constants", "ier/model/admin/Config", "ecm/Messages", "dojo/text!./templates/GeneralSettingsPane.html", "dijit/form/CheckBox", "ecm/widget/HoverHelp", "idx/layout/TitlePane", "ecm/widget/NumberTextBox"], function (declare, lang, dom_class, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, messages, ier_constants, Config, ecm_messages, GeneralSettingsPane_html) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:GeneralSettingsPane_html, config:null, dirty:false, valid:true, _messages:messages, ecmMessages:ecm_messages, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._folderOnlyBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._disableSortBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._taskManagerLogDirectory, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._cbrPageSize, "onChange", function () {
                this._validate(true);
            });
        }, save:function () {
            if (this.config) {
                this.config.set("taskManagerLogDirectory", this._taskManagerLogDirectory.get("value") || "");
                this.config.set("browseFolderOnly", this._folderOnlyBox.get("checked") || false);
                this.config.set("browseDisableSort", this._disableSortBox.get("checked") || false);
                this.config.set("cbrPageSize", this._cbrPageSize.get("value") || ier_constants.Search_default_cbrPageSize);
            }
        }, reset:function () {
            this._setValue(this._taskManagerLogDirectory, this.config && this.config.get("taskManagerLogDirectory") || "");
            this._setCheckedValue(this._folderOnlyBox, this.config && this.config.get("browseFolderOnly") || false);
            this._setCheckedValue(this._disableSortBox, this.config && this.config.get("browseDisableSort") || false);
            this._setValue(this._cbrPageSize, this.config && this.config.get("cbrPageSize") || ier_constants.Search_default_cbrPageSize);
            this._validate(false);
        }, _setCheckedValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("checked", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            var disabled = !!this._folderOnlyBox.get("checked");
            this._disableSortBox.set("disabled", disabled);
            dom_class.toggle(this._disableSortLabel, "ierAdminLabelDisabled", disabled);
            this.dirty = dirty;
            this.valid = true;
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/model/FilePlanRepositoryMixin":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/Request", "ecm/model/_ModelObject", "ier/model/ResultSet", "ier/constants", "ier/model/ReportDefinition", "ier/model/RecentQuickSearch", "ier/util/util", "ier/messages"], function (dojo_declare, dojo_array, dojo_lang, ecm_model_desktop, ecm_model_Request, ecm_model_ModelObject, ier_model_ResultSet, ier_constants, ier_model_ReportDefinition, ier_model_RecentQuickSearch, ier_util, ier_messages) {
        return dojo_declare("ier.model.FilePlanRepositoryMixin", null, {constructor:function (id, name, recordType, datamodelType, repository, fileplansJSON) {
            this.declaredClass = "ecm.model.Repository";
            this._filePlans = [];
            this._dispositionSchedules = [];
            this._holds = [];
            this.reportDefinitions = [];
            this.recordDatamodelType = datamodelType;
            this.recordRepositoryType = recordType;
            this.repository = repository;
            this.allRecordProperties = null;
            this._currentUser = null;
            this.recentQuickSearches = [];
            if (fileplansJSON) {
                this._filePlans = this._populateFilePlans(fileplansJSON);
            }
        }, getRecentQuickSearches:function (onComplete) {
            onComplete(this.recentQuickSearches);
        }, getRecentQuickSearch:function (id) {
            for (var i in this.recentQuickSearches) {
                var quickSearch = this.recentQuickSearches[i];
                if (quickSearch.id == id) {
                    return quickSearch;
                }
            }
        }, getAllRecordProperties:function (callback) {
            if (this.allRecordProperties) {
                callback(this.allRecordProperties);
            } else {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    if (response && response.properties) {
                        this.allRecordProperties = response.properties;
                        callback(this.allRecordProperties);
                    }
                }));
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetAllRecordProperties, ier_constants.PostEncoding, params);
            }
        }, addRecentQuickSearch:function (id, name, searchQueryString, results) {
            var quickSearch = new ier_model_RecentQuickSearch({id:id, name:name, searchQueryString:searchQueryString, repository:this.repository, data:results});
            this.recentQuickSearches.push(quickSearch);
            return quickSearch;
        }, getFilePlan:function (p8FilePlanId) {
            if (this._filePlans) {
                for (var i in this._filePlans) {
                    var fileplan = this._filePlans[i];
                    if (fileplan.getGuidId() == p8FilePlanId) {
                        return fileplan;
                    }
                }
            }
            return null;
        }, clearFilePlans:function () {
            this._filePlans = [];
        }, getFilePlans:function (onCompleted, onCompletedParams) {
            if (this._filePlans == null || this._filePlans.length == 0) {
                if (this._reqFilePlans == null) {
                    this._filePlans = [];
                    var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                        var fileplansJSON = response.fileplans;
                        if (fileplansJSON) {
                            this._filePlans = this._populateFilePlans(fileplansJSON);
                        }
                        this._reqFilePlans = null;
                        onCompleted(this._filePlans, onCompletedParams);
                    }));
                    this._reqFilePlans = ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetFilePlans, ier_constants.PostEncoding, params);
                } else {
                    setTimeout(dojo_lang.hitch(this, function () {
                        this.getFilePlans(onCompleted, onCompletedParams);
                    }), 100);
                }
            } else {
                onCompleted(this._filePlans, onCompletedParams);
            }
        }, getDispositionSchedules:function (onCompleted) {
            if (this._dispositionSchedules == null || this._dispositionSchedules.length == 0) {
                this._dispositionSchedules = [];
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    var dispositionSchedulesJSON = response.dispositionSchedules;
                    if (dispositionSchedulesJSON) {
                        dojo_array.forEach(dispositionSchedulesJSON, function (dispositionScheduleJSON) {
                            this._dispositionSchedules.push(ier_util.createBaseEntityItem(dispositionScheduleJSON, this.getRepository));
                        });
                    }
                    onCompleted(this._dispositionSchedules);
                }));
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetDispositionSchedules, ier_constants.PostEncoding, params);
            } else {
                onCompleted(this._dispositionSchedules);
            }
        }, getDispositionSchedule:function (dispositionId) {
            if (this._dispositionSchedules) {
                for (var i in this._dispositionSchedules) {
                    var disp = this._dispositionSchedules[i];
                    if (disp.id == dispositionId) {
                        return disp;
                    }
                }
            }
            return null;
        }, retrievePropertyDescriptions:function (contentClass, callback) {
            if (contentClass && contentClass.id) {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    var properties = [];
                    for (var i in response.datastore.items) {
                        var items = response.datastore.items[i];
                        properties.push({displayname:items.displayName, symbolicname:items.symbolicName, datatype:items.dataType, description:items.template_desc});
                    }
                    if (callback) {
                        callback(properties);
                    }
                }));
                params.requestParams[ier_constants.Param_ClassName] = contentClass.id;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, "ierGetClassPropertyDescriptions", ier_constants.PostEncoding, params);
            }
        }, retrieveReportDefinitions:function (callback) {
            if (this.reportDefinitions == null || this.reportDefinitions.length == 0) {
                var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                    this.reportDefinitions = [];
                    for (var i in response.datastore.items) {
                        var reportDefinitionJSON = response.datastore.items[i];
                        var reportDefinition = new ier_model_ReportDefinition({id:reportDefinitionJSON.template_id, name:reportDefinitionJSON.template_name, title:ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_title_key, reportDefinitionJSON.ier_reportTitle), description:ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_desc_key, reportDefinitionJSON.template_desc), entryHelp:ier_util.getReportMessages(reportDefinitionJSON.ier_reportdefinition_entryhelp_desc_key, reportDefinitionJSON.ier_reportdefinition_entryhelp), repository:this.getRepository()});
                        this.reportDefinitions.push(reportDefinition);
                    }
                    if (callback) {
                        callback(this.reportDefinitions);
                    }
                }));
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, "ierGetReportDefinitions", ier_constants.PostEncoding, params);
            } else {
                if (callback) {
                    callback(this.reportDefinitions);
                }
            }
        }, getReportDefinition:function (reportId) {
            for (var i in this.reportDefinitions) {
                var rd = this.reportDefinitions[i];
                if (rd.id == reportId) {
                    return rd;
                }
            }
        }, retrieveObjects:function (className, filterString, callback, showAdditionalColumns, additionalParams, entityType, sortColum) {
            if (className == "Action") {
                className = "Action1";
            }
            var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                if (response && callback) {
                    response.repository = this.repository;
                    var resultSet = new ier_model_ResultSet(response);
                    callback(resultSet);
                }
            }));
            params.requestParams[ier_constants.Param_ClassName] = className;
            params.requestParams[ier_constants.Param_EntityType] = ((entityType) ? entityType : this._entityType);
            if (showAdditionalColumns) {
                params.requestParams[ier_constants.Param_ShowAdditionalColumns] = "true";
            }
            if (additionalParams) {
                for (var i in additionalParams) {
                    params.requestParams[i] = additionalParams[i];
                }
            }
            var data = {};
            data[ier_constants.Param_FilterString] = filterString;
            params["requestBody"] = data;
            if (sortColum) {
                params.requestParams[ier_constants.Param_OrderBy] = sortColum[0].attribute;
                params.requestParams[ier_constants.Param_OrderByDescending] = sortColum[0].descending;
            }
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetObjects, ier_constants.PostEncoding, params);
        }, saveHold:function (item, properties, conditions, holdId, callback) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback();
                }
                if (item && item.retrieveAttributes) {
                    item.retrieveAttributes(null, false);
                } else {
                    this.onConfigure(repository);
                }
            }));
            var data = {};
            data[ier_constants.Param_Properties] = properties;
            if (conditions) {
                data[ier_constants.Param_Conditions] = conditions;
            }
            if (holdId) {
                data[ier_constants.Param_HoldId] = holdId;
            }
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_SaveHold, ier_constants.PostEncoding, params);
        }, getObjectConditions:function (objectId, entityType, callback) {
            var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback(response.conditions || []);
                }
            }));
            params.requestParams[ier_constants.Param_Id] = objectId;
            params.requestParams[ier_constants.Param_EntityType] = entityType;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetObjectConditions, ier_constants.PostEncoding, params);
        }, saveLocation:function (properties, locationId, callback) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback();
                }
                this.onConfigure(repository);
            }));
            var data = {};
            data[ier_constants.Param_Properties] = properties;
            if (locationId) {
                data[ier_constants.Param_LocationId] = locationId;
            }
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_SaveLocation, ier_constants.PostEncoding, params);
        }, saveNamingPattern:function (properties, patternLevels, patternId, callback) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                var resultSet = new ier_model_ResultSet(response);
                if (callback) {
                    callback(resultSet);
                }
                this.onConfigure(repository, resultSet.getItems());
            }));
            var data = {};
            data[ier_constants.Param_Properties] = properties;
            data[ier_constants.Param_PatternLevels] = patternLevels;
            if (patternId) {
                data[ier_constants.Param_PatternId] = patternId;
            }
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_SaveNamingPattern, ier_constants.PostEncoding, params);
        }, getNamingPatternLevels:function (patternId, callback) {
            var params = ier_util.getDefaultParams(this.getRepository(), dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback(response.namingPatternLevels || []);
                }
            }));
            params.requestParams[ier_constants.Param_PatternId] = patternId;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetNamingPatternLevels, ier_constants.PostEncoding, params);
        }, saveSystemConfigurations:function (systemConfigurations, callback) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function () {
                if (callback) {
                    callback();
                }
                this.onConfigure(repository);
            }));
            var data = {};
            data[ier_constants.Param_SystemConfigurations] = systemConfigurations;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_SaveSystemConfigurations, ier_constants.PostEncoding, params);
        }, addAction:function (properties, callback) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback();
                }
                this.onConfigure(repository);
            }));
            var data = {};
            data[ier_constants.Param_Properties] = properties;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateAction, ier_constants.PostEncoding, params);
        }, addTrigger:function (properties, conditions, eventType, callback, additionalParams) {
            var repository = this.getRepository();
            var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    callback();
                }
                this.onConfigure(repository);
            }));
            if (additionalParams) {
                for (var i in additionalParams) {
                    params.requestParams[i] = additionalParams[i];
                }
            }
            var data = {};
            data[ier_constants.Param_Properties] = properties;
            data[ier_constants.Param_Conditions] = conditions;
            params["requestBody"] = data;
            params.requestParams[ier_constants.Param_EventType] = eventType;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateTrigger, ier_constants.PostEncoding, params);
        }, _populateFilePlans:function (fileplansJSON) {
            var filePlans = [];
            if (fileplansJSON) {
                dojo_array.forEach(fileplansJSON, dojo_lang.hitch(this, function (fileplanJSON) {
                    var filePlan = ier_util.createBaseEntityItem(fileplanJSON, this.getRepository());
                    if (fileplanJSON.namingPattern) {
                        filePlan.setNamingPattern(ier_util.createBaseEntityItem(fileplanJSON.namingPattern, this.getRepository()));
                    }
                    filePlans.push(filePlan);
                }));
            }
            return filePlans;
        }, getRepository:function () {
            return this.repository;
        }, getDatamodelType:function () {
            return this.recordDatamodelType;
        }, onIERLogOff:function (repository) {
            this._filePlans = [];
            this._dispositionSchedules = [];
            this._recordEntryTemplates = [];
            this._holds = [];
            this._reportDefinitions = [];
            this.recordDatamodelType = null;
            this._currentUser = null;
        }, onConfigure:function (repository, items) {
            if (ecm_model_desktop.onConfigure) {
                ecm_model_desktop.onConfigure(repository, items);
            }
        }, onItemsUpdated:function () {
        }});
    });
}, "ier/widget/listView/ContentList":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-class", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/widget/listView/ContentList", "ecm/Messages", "ier/constants", "ier/messages", "ier/widget/listView/decorators/ColumnDecorators"], function (dojo_declare, dojo_array, dojo_lang, dojo_construct, dojo_dom_class, ecm_model_Desktop, ecm_model_AsyncTask, ecm_widget_listView_ContentList, ecm_messages, ier_constants, ier_messages, ier_listView_decorator_ColumnDecorators) {
        var contentList = dojo_declare("ier.widget.listView.ContentList", [ecm_widget_listView_ContentList], {postCreate:function () {
            this.inherited(arguments);
            this.connect(ecm_model_Desktop, "onChange", function (modelObject) {
                if (this.grid && dojo_lang.isArray(modelObject)) {
                    dojo_array.forEach(modelObject, function (changedModel, i) {
                        if (changedModel && changedModel.isInstanceOf && (changedModel.isInstanceOf(ecm_model_AsyncTask))) {
                            if (changedModel.deleted) {
                                this.grid.store.deleteItem(changedModel);
                                this.grid.select.row.clear();
                            } else {
                                this.grid.store.onSet(changedModel);
                            }
                        }
                    }, this);
                }
            });
            dojo_dom_class.add(this.containerNode, "ierContentList");
        }, setResultSet:function (resultSet) {
            if (resultSet) {
                var view = resultSet.structure.cells[0];
                for (var i in view) {
                    var cell = view[i];
                    if (cell && cell.field == ier_constants.Property_RetainMetadata) {
                        cell.decorator = this.ierRetainMetadataDecorator;
                    } else {
                        if (cell && cell.field == ier_constants.Property_SweepState) {
                            cell.formatter = this.ierSweepStateFormatter;
                        }
                    }
                }
            }
            this.inherited(arguments);
        }, ierRetainMetadataDecorator:function (value) {
            return value === "0" ? ecm_messages.true_label : value === "1" ? ecm_messages.false_label : value;
        }, ierSweepStateFormatter:function (row) {
            var value = row.SweepState;
            var state = "";
            switch (value) {
              case "0":
                state = ier_messages.sweep_state_0_label;
                break;
              case "1":
                var lastSweep = row.LastHoldSweepDate;
                if (lastSweep && lastSweep.length > 0) {
                    state = ier_messages.sweep_state_1_1_label;
                } else {
                    state = ier_messages.sweep_state_1_2_label;
                }
                break;
              case "2":
                state = ier_messages.sweep_state_2_label;
                break;
              case "3":
                state = ier_messages.sweep_state_3_label;
                break;
              case "4":
                state = ier_messages.sweep_state_4_label;
                break;
              default:
                break;
            }
            return state;
        }, performDefaultActionForRowId:function (rowId) {
            if (this._performDefaultActionForRowId) {
                this._performDefaultActionForRowId(rowId);
            } else {
                var item = this.grid.row(rowId).item();
                if (this.grid.rowContextMenu && this.grid.rowContextMenu.performDefaultActionForItem) {
                    this.grid.rowContextMenu.performDefaultActionForItem(item);
                } else {
                    this.openItem(item);
                }
            }
        }});
        return contentList;
    });
}, "ier/widget/admin/ReportSettingsPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ier/messages", "ier/model/admin/Config", "dojo/text!./templates/ReportSettingsPane.html", "ecm/widget/HoverHelp", "ecm/widget/ValidationTextBox", "idx/layout/TitlePane"], function (declare, lang, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, messages, Config, ReportSettingsPane_html) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:ReportSettingsPane_html, config:null, dirty:false, valid:true, intermediateChangesOff:false, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._reportPathHoverHelp.set("message", messages.admin_reportCognosReportPath_tooltip);
            if (this.intermediateChangesOff) {
                this._cognosGatewayServerNameBox.intermediateChanges = false;
                this._cognosServletServerNameBox.intermediateChanges = false;
                this._cognosReportPathBox.intermediateChanges = false;
                this._reportEngineDataSourceBox.intermediateChanges = false;
                this._cognosReportNamespace.intermediateChanges = false;
            }
            this.connect(this._cognosGatewayServerNameBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._cognosServletServerNameBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._cognosReportPathBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._reportEngineDataSourceBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._cognosReportNamespace, "onChange", function () {
                this._validate(true);
            });
        }, save:function () {
            if (this.config) {
                this.config.set("cognosGatewayServerName", this._cognosGatewayServerNameBox.get("value") || "");
                this.config.set("cognosDispatchServletServerName", this._cognosServletServerNameBox.get("value") || "");
                this.config.set("cognosReportPath", this._cognosReportPathBox.get("value") || "/content/folder[@name='IERReport']");
                this.config.set("reportEngineDataSource", this._reportEngineDataSourceBox.get("value") || "");
                this.config.set("cognosReportNamespace", this._cognosReportNamespace.get("value") || "");
                ecm.model.desktop.reportSettings.cognosGatewayServerName = this.config.get("cognosGatewayServerName");
                ecm.model.desktop.reportSettings.cognosDispatchServletServerName = this.config.get("cognosDispatchServletServerName");
                ecm.model.desktop.reportSettings.cognosReportPath = this.config.get("cognosReportPath");
                ecm.model.desktop.reportSettings.cognosNamespace = this.config.get("cognosReportNamespace");
            }
        }, reset:function () {
            this._setValue(this._cognosGatewayServerNameBox, this.config && this.config.get("cognosGatewayServerName") || "");
            this._setValue(this._cognosServletServerNameBox, this.config && this.config.get("cognosDispatchServletServerName") || "");
            this._setValue(this._cognosReportPathBox, this.config && this.config.get("cognosReportPath") || "/content/folder[@name='IERReport']");
            this._setValue(this._reportEngineDataSourceBox, this.config && this.config.get("reportEngineDataSource") || "");
            this._setValue(this._cognosReportNamespace, this.config && this.config.get("cognosReportNamespace") || "");
            this._validate(false);
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/widget/QuickSearchList":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/event", "dojo/keys", "dojo/data/ItemFileReadStore", "dojo/string", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/ToolbarSeparator", "dijit/form/Button", "ecm/LoggerMixin", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/ListTypeSelector", "dojo/text!./templates/QuickSearchList.html", "dijit/form/TextBox", "ecm/widget/TitlePane", "ier/widget/TilesList"], function (dojo_declare, dojo_array, dojo_lang, dojo_event, dojo_keys, dojo_data_ItemFileReadStore, dojo_string, dijit_Widget, dijit_TemplatedMxin, dijit_WidgetsInTemplateMixin, dijit_ToolbarSeparator, dijit_form_Button, ecm_LoggerMixin, ecm_model_desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_widget_ListTypeSelector, templateString) {
        return dojo_declare("ier.widget.QuickSearchList", [dijit_Widget, dijit_TemplatedMxin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, messages:null, store:null, constructor:function () {
            this.messages = ier_messages;
        }, destroy:function () {
            this._quickSearches.setStore(null);
        }, postCreate:function () {
            this.inherited(arguments);
        }, setQueryParameters:function (queryString, fileplan, repository, onComplete) {
            this.queryString = queryString;
            this.fileplan = fileplan;
            this.repository = repository;
            this.searchBar.set("value", this.queryString);
            if (!this.rendered) {
                this._createRendering();
            }
            this._fetchSearchResults(null, onComplete);
        }, _createRendering:function () {
            this.rendered = true;
            this._quickSearchTitlePane.set("title", dojo_string.substitute(this.messages.quickSearchList_searchInText, [this.queryString, this.fileplan.name]));
            this._createActivityStream();
            this.connect(this._quickSearches, "onItemSelected", dojo_lang.hitch(this, function (selectedItem) {
                this._onListItemClickAction(selectedItem);
            }));
            this.connect(this._quickSearches, "onListItemDoubleClick", dojo_lang.hitch(this, function (selectedItem) {
                this._onListItemClickAction(selectedItem);
            }));
            this.connect(this.searchBar, "onkeydown", dojo_lang.hitch(this, function (e) {
                if (e.keyCode == dojo_keys.ENTER) {
                    this._quickSearchButtonClicked();
                    dojo_event.stop(evt);
                }
            }));
        }, _quickSearchButtonClicked:function () {
            this.setQueryParameters(this.searchBar.get("value"), this.fileplan, this.repository);
        }, _onListItemClickAction:function (selectedItem) {
            var item = selectedItem.item;
            if (item.isMore) {
                var params = {ier_quickSearchStartingPoint:item.endPoint, ier_quickSearchMoreType:item.type, callback:dojo_lang.hitch(this, function (response) {
                    this.store = new dojo_data_ItemFileReadStore({data:response, urlPreventCache:true, clearOnClose:true});
                    this._quickSearches.setStore(this.store);
                })};
                this._fetchSearchResults(params);
            } else {
                this.onItemSelected(selectedItem, this.queryString);
            }
        }, onItemSelected:function (selectedItem, queryString) {
        }, _createActivityStream:function () {
            var options = [];
            options.push({text:"All", value:"*", isSelected:"true"});
            options.push({text:"Record", value:"record"});
            options.push({text:"Record Category", value:"RecordCategory"});
            options.push({text:"Record Folder", value:"RecordFolder"});
            options.push({text:"Record Volume", value:"RecordVolume"});
            var listTypeSelector = new ier_widget_ListTypeSelector(options);
            this._loadActions(null, listTypeSelector, this._quickSearches);
            this.connect(listTypeSelector, "onChange", function (selected) {
                this._onTypeListSelector(selected);
            });
        }, _onTypeListSelector:function (selected) {
            if (this.query == null) {
                this.query = {"type":selected};
            } else {
                this.query.type = selected;
            }
            this._quickSearches.setQuery(this.query);
        }, setResults:function (data, queryString) {
            this.store = new dojo_data_ItemFileReadStore({data:data, urlPreventCache:true, clearOnClose:true});
            this._quickSearches.setStore(this.store);
            this.queryString = queryString;
            if (this.queryString) {
                this._quickSearchTitlePane.set("title", dojo_string.substitute(this.messages.quickSearchList_searchInText, [this.queryString, this.fileplan.name]));
            }
        }, _fetchSearchResults:function (params, onComplete) {
            var self = this;
            if (!params) {
                params = {callback:function (response) {
                    self.store = new dojo_data_ItemFileReadStore({data:response, urlPreventCache:true, clearOnClose:true});
                    self._quickSearches.setStore(self.store);
                    setTimeout(function () {
                        self._onTypeListSelector("a");
                        self._onTypeListSelector("*");
                        self._onTypeListSelector("a");
                        self._onTypeListSelector("*");
                    }, 200);
                    self._quickSearches.resize();
                    if (onComplete) {
                        onComplete(response);
                    }
                }};
            }
            var requestParams = ier_util.getDefaultParams(this.repository, function (response) {
                if (params.callback) {
                    params.callback(response);
                }
            });
            requestParams.requestParams[ier_constants.Param_FilePlanId] = this.fileplan.id;
            requestParams.requestParams[ier_constants.Param_QuickSearchMoreType] = params[ier_constants.Param_QuickSearchMoreType];
            requestParams.requestParams[ier_constants.Param_QuickSearchQueryString] = this.queryString;
            requestParams.requestParams[ier_constants.Param_QuickSearchStartingPoint] = params[ier_constants.Param_QuickSearchStartingPoint];
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetQuickSearchResults, ier_constants.PostEncoding, requestParams);
        }, _loadActions:function (toolbarName, selector, list) {
            var buttons = [];
            if (selector) {
                buttons.push(selector);
            }
            if (toolbarName) {
                ecm_model_desktop.loadActions(toolbarName, dojo_lang.hitch(this, function (actions) {
                    dojo_array.forEach(actions, function (action) {
                        if (action.id == "Separator") {
                            var separator = new dijit_ToolbarSeparator();
                            buttons.push(separator);
                        } else {
                            var toolbarButton = new dijit_form_Button({label:action.name});
                            toolbarButton.action = action;
                            if (selector != null && selector.declaredClass == "ecm.widget.RepositorySelector") {
                                this.connect(toolbarButton, "onClick", function () {
                                    var selectedItems = [];
                                    if (list.getSelectedItem() != null) {
                                        selectedItems.push(list.getSelectedItem().item);
                                    }
                                    var dropDown = selector.getDropdown();
                                    if (dropDown != null) {
                                        action.performAction(ecm_model_desktop.getRepository(dropDown.get("value")), selectedItems);
                                    }
                                });
                            } else {
                                this.connect(toolbarButton, "onClick", function () {
                                    if (list.getSelectedItem() != null) {
                                        var selectedItems = [];
                                        selectedItems.push(list.getSelectedItem().item);
                                        action.performAction(ecm_model_desktop.getRepository(list.getSelectedItem().item.repositoryId), selectedItems);
                                    }
                                });
                            }
                            buttons.push(toolbarButton);
                        }
                    });
                    list.setActions(buttons);
                }));
            } else {
                list.setActions(buttons);
            }
        }});
    });
}, "url:ier/widget/templates/ReportEntryForm.html":"<div style=\"width:100%; height:100%\" class=\"reportEntryPane\">\r\n    <div data-dojo-attach-point=\"mainContainer\" data-dojo-type=\"dijit.layout.BorderContainer\" class=\"contentPane\" gutters=\"false\" style=\"height:100%;width:100%\">\t\t\r\n\t\t<div data-dojo-attach-point=\"mainStackContainer\" \r\n\t\t\t data-dojo-type=\"dijit.layout.StackContainer\" \r\n\t\t\t data-dojo-props=\"region:'center'\" \r\n\t\t\t class=\"stackContainer\" style=\"width:100%; height:100%; overflow-y:auto;\">\r\n\t\t\t <div data-dojo-attach-point=\"mainPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" region=\"center\">\r\n\t\t\t\t\t<div><label data-dojo-attach-point=\"_reportTitle\" style=\"font-size:120%;font-weight: bold;margin-bottom:10px;\"></label></div>\r\n\t\t\t\t\t<div class=\"introText\" data-dojo-attach-point=\"_introText\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div region=\"center\" data-dojo-type=\"dijit.layout.ContentPane\" style=\"margin-top:15px;margin-bottom:20px;border:1px solid #dedede;overflow:auto\" >\r\n\t\t\t\t\t\t<div class=\"commonPropertiesDiv ierCommonPropertiesPane\">\r\n\t\t\t\t\t\t\t<div data-dojo-type=\"ier.widget.panes.CommonPropertiesPane\" data-dojo-attach-point=\"_reportEntryPropertiesPane\" id=\"${id}_CommonPropertiesPane\" ></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- <div data-dojo-attach-point=\"actionBar\" style=\"padding: 9px 10px 0px;background-color: white;text-align: right;border-top: 1px solid #AAA;\"> -->\r\n\t\t\t\t\t<div data-dojo-attach-point=\"actionBar\" class=\"dijitDialogPaneActionBar\">\r\n\t\t\t\t\t\t<span class=\"messageRef\" data-dojo-attach-point=\"messageRef\"></span>\r\n\t\t\t\t\t\t\t<button id=\"${id}_scheduleButton\" data-dojo-attach-point=\"_scheduleButton\" data-dojo-type=\"dijit.form.Button\" \r\n\t\t\t\t\t\t\t\t\tdojoAttachEvent=\"onClick: onScheduleReport\" disabled=true>${ier_messages.taskPane_scheduleReport}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button id=\"${id}_runButton\" data-dojo-attach-point=\"_runButton\" data-dojo-type=\"dijit.form.Button\" \r\n\t\t\t\t\t\t\t\t\tdojoAttachEvent=\"onClick: onRun\">${ier_messages.report_run}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button id=\"${id}_cancelButton\" data-dojo-attach-point=\"cancelButton\" data-dojo-type=\"dijit.form.Button\" \r\n\t\t\t\t\t\t\t\t\tdojoAttachEvent=\"onClick: onCancel\">${messages.close}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"resultsPane\" data-dojo-type=\"dijit.layout.BorderContainer\" style=\"width:100%; height:100%\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t\t<a href=\"#\" data-dojo-attach-point=\"backToParams\" style=\"display:none\">${ier_messages.reportViewer_backToParams}</a>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"baseReportViewerContainer\" style=\"height:95%\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n", "ier/model/Hold":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject) {
        var Hold = dojo_declare("ier.model.Hold", ier_model_BaseEntityObject, {constructor:function (arguments) {
        }, retrieveEntitiesOnHold:function () {
        }, isActive:function () {
            return this.attributes[ier_constants.Property_Active];
        }, getHoldType:function () {
            return this.attributes[ier_constants.Property_HoldType];
        }, getHoldReason:function () {
            return this.attributes[ier_constants.Property_HoldReason];
        }, isDynamicHold:function () {
            var conditionXML = this.attributes[ier_constants.Property_ConditionXML];
            return conditionXML != null && conditionXML.length > 0;
        }});
        ier_model_BaseEntityObject.registerClass("Hold", Hold);
        return Hold;
    });
}, "url:ier/widget/dialog/templates/FilePlanPropertiesDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\">\r\n\t\t<div title=\"${_ierMessages.baseDialog_properties}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\">\r\n\t\t</div>\r\n\t\t<div title=\"${_ierMessages.baseDialog_security}\"\r\n\t\t\tdata-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemSecurityPane\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/model/DispositionSchedule":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject) {
        var DispositionSchedule = dojo_declare("ier.model.DispositionSchedule", [ier_model_BaseEntityObject], {getDispositionAuthority:function () {
            return this.attributes[ier_constants.Property_DispositonAuthority];
        }});
        ier_model_BaseEntityObject.registerClass("DispositionSchedule", DispositionSchedule);
        return DispositionSchedule;
    });
}, "url:ier/widget/dialog/templates/NamingPatternDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_entityItemPropertiesPane\" title=\"${_ierMessages.baseDialog_properties}\"></div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_ierMessages.namingPatternDialog_patternLevels}\" class=\"ierDialogTabContent\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/panes/NamingPatternLevelPane\" data-dojo-attach-point=\"_levelPane\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/panes/LegacyDispositionSchedulePane":function () {
    require({cache:{"url:ier/widget/panes/templates/LegacyDispositionSchedulePane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\" data-dojo-attach-point=\"containerNode\">\t\r\n\t<div data-dojo-attach-point=\"_legacyScheduleSection\">\t\r\n\t\t<table class=\"propertyTable smallerIdentedPropertyTable\" style=\"margin-top:8px;\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_dispositionInstructionsLabel\" for=\"${id}_dispositionTextBox\">${messages.entityItemDispositionPane_dispositionInstructions}:</label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\" data-dojo-attach-point=\"_dispositionObjectValueRow\">\r\n\t\t\t\t\t\t<div id=\"${id}_inheritedScheduleCheckBox\" data-dojo-type=\"dijit/form/CheckBox\" class=\"dijitInline\" data-dojo-attach-point=\"_inheritedScheduleCheckBox\" style=\"display:none\"></div>\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_inheritedScheduleCheckboxLabel\" for=\"${id}_inheritedScheduleCheckBox\" style=\"display:none; margin-right:5px;\">${messages.inherited}</label>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div id=\"${id}_dispositionTextBox\" class=\"folderTargetLocation\" data-dojo-attach-point=\"_dispositionTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"disabled:true\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button style=\"display:none\" data-dojo-attach-point=\"_dispositionInstructionsCreateButton\" data-dojo-attach-event=\"onClick: _onCreateSchedule\" data-dojo-type=\"dijit.form.Button\">\r\n\t\t\t\t\t\t\t${messages.entityItemDispositionPane_createSchedule}</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"_propagationSection\" style=\"display:none\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label></label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"_dispositionPropagationSelect\" data-dojo-type=\"ier/widget/DispositionPropagationSelector\"\r\n\t\t\t\t\t\t\tname=\"${id}_propagationSelect\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label data-dojo-attach-point=\"_dispositionAuthorityLabel\" for=\"${id}_dispositonSchedule\">${messages.entityItemDispositionPane_dispositionAuthority}:</label>\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"dispositionAuthorityHoverHelp\" data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.entityItemDispositionPane_dispositionAuthorityHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div id=\"${id}_dispositonSchedule\"\r\n\t\t\t\t\t\t\tclass=\"folderTargetLocation\" data-dojo-attach-point=\"_dispositionAuthorityTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-event=\"onChange:onInputChange\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/panes/LegacyDispositionSchedulePane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/store/Memory", "dijit/registry", "ier/widget/ObjectSelector", "ier/widget/dialog/IERBaseDialogPane", "ier/constants", "ier/messages", "ier/util/util", "ier/model/DispositionSchedule", "dojo/text!./templates/LegacyDispositionSchedulePane.html", "dijit/form/Button", "ecm/widget/HoverHelp", "dijit/form/NumberSpinner", "dijit/form/FilteringSelect", "dijit/form/CheckBox", "ier/widget/DispositionPropagationSelector"], function (dojo_declare, dojo_lang, dojo_domConstruct, dojo_style, dojo_class, dojo_store_Memory, dijit_registry, ier_widget_ObjectSelector, IERBaseDialogPane, ier_constants, ier_messages, ier_util, DefensibleDisposalSchedule, templateString) {
        return dojo_declare("ier.widget.panes.LegacyDispositionSchedulePane", [IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, readOnly:false, legacyDispositionSchedule:null, item:null, parentItem:null, createRendering:function (params) {
            this.repository = params.repository;
            this.item = params.item;
            var legacyDispositionSchedule = params.legacyDispositionSchedule;
            this.parentItem = params.parentItem;
            if (this.parentItem && (this.parentItem instanceof ier.model.FilePlan)) {
                this._hideInheritedCheckbox(true);
            } else {
                this._hideInheritedCheckbox(false);
            }
            var baseConstraints = {labelId:this.id + "_dispositonScheduleLabel", label:ier_messages.entityItemDispositionPane_dispositionInstructions + ":", selectButtonLabel:this.messages.entityItemDispositionPane_browseSchedules, showCreateButton:false, readOnly:this.readOnly};
            var objectSelector = new ier_widget_ObjectSelector(baseConstraints);
            this.objectSelector = objectSelector;
            objectSelector.setRepository(this.repository);
            objectSelector.setObjectClassName(ier_constants.ClassName_DispositionSchedule);
            this.connect(objectSelector, "onItemSelected", function (item) {
                this.set("schedule", item);
            });
            this.connect(objectSelector, "onItemCreate", function () {
                this._onCreateSchedule();
            });
            this.connect(objectSelector, "onItemRemoved", function () {
                this._hidePropagationSettings(true);
                this.onInputChange();
            });
            this.connect(this._inheritedScheduleCheckBox, "onChange", function () {
                var checked = this._inheritedScheduleCheckBox.get("checked");
                if (checked == true) {
                    if (!this.parentLegacyDispositionSchedule) {
                        this.parentItem.getLegacyDispositionSchedule(dojo_lang.hitch(this, function (dispSchedule) {
                            if (dispSchedule) {
                                this.parentLegacyDispositionSchedule = dispSchedule;
                                this.objectSelector.setSelectedItem(this.parentLegacyDispositionSchedule);
                                this.dispositionScheduleInheritedFrom = this.parentItem.getGuidId();
                                this._dispositionPropagationSelect.set("disabled", false);
                                this.objectSelector.set("disabled", checked);
                                this.onInputChange();
                            }
                        }));
                    } else {
                        this.objectSelector.setSelectedItem(this.parentLegacyDispositionSchedule);
                    }
                }
                this.objectSelector.set("disabled", checked);
                this._dispositionPropagationSelect.set("disabled", false);
                this.onInputChange();
            });
            if (this.item) {
                if (this.item.attributes[ier_constants.Property_DisposalScheduleInheritedFrom]) {
                    this._hideInheritedCheckbox(false);
                    this._inheritedScheduleCheckBox.set("checked", true);
                    this.parentLegacyDispositionSchedule = legacyDispositionSchedule;
                    this.dispositionScheduleInheritedFrom = this.item.attributes[ier_constants.Property_DisposalScheduleInheritedFrom];
                }
            }
            if (!this.item) {
                this._hideInheritedCheckbox(true);
                if (this.parentItem && !(this.parentItem instanceof ier.model.FilePlan) && !legacyDispositionSchedule) {
                    this.parentItem.getLegacyDispositionSchedule(dojo_lang.hitch(this, function (dispSchedule) {
                        if (dispSchedule) {
                            this._hideInheritedCheckbox(false);
                            this._inheritedScheduleCheckBox.set("checked", true);
                            this.parentLegacyDispositionSchedule = dispSchedule;
                            legacyDispositionSchedule = this.parentLegacyDispositionSchedule;
                            if (legacyDispositionSchedule) {
                                this.dispositionScheduleInheritedFrom = this.parentItem.getGuidId();
                            }
                        }
                    }));
                }
            }
            if (legacyDispositionSchedule) {
                this.set("schedule", legacyDispositionSchedule);
            }
            if (this.dispositionScheduleInheritedFrom) {
                this.objectSelector.set("disabled", true);
            }
            this._hidePropagationSettings(true);
            dojo_style.set(this._dispositionTextBox.domNode, "display", "none");
            dojo_domConstruct.place(objectSelector.domNode, this._dispositionObjectValueRow);
        }, _hideInheritedCheckbox:function (hide) {
            if (hide) {
                dojo_style.set(this._inheritedScheduleCheckBox.domNode, "display", "none");
                dojo_style.set(this._inheritedScheduleCheckboxLabel, "display", "none");
            } else {
                dojo_style.set(this._inheritedScheduleCheckBox.domNode, "display", "");
                dojo_style.set(this._inheritedScheduleCheckboxLabel, "display", "");
            }
        }, _getScheduleAttr:function () {
            if (this._inheritedScheduleCheckBox.get("checked")) {
                return this.parentLegacyDispositionSchedule;
            } else {
                return this.legacyDispositionSchedule;
            }
        }, _getAuthorityAttr:function () {
            return this._dispositionAuthorityTextBox.get("value");
        }, _setAuthorityAttr:function (level) {
            this._dispositionAuthorityTextBox.set("value", level);
        }, _getPropagationAttr:function () {
            if (this._dispositionPropagationSelect.get("disabled") == false) {
                return this._dispositionPropagationSelect.get("value");
            } else {
                return null;
            }
        }, _setPropagationAttr:function (level) {
            this._dispositionPropagationSelect.set("value", level);
        }, getDispositionScheduleInheritedFrom:function () {
            if (this._inheritedScheduleCheckBox.get("checked")) {
                return this.dispositionScheduleInheritedFrom;
            } else {
                return null;
            }
        }, _setScheduleAttr:function (schedule) {
            if (!schedule || !this.legacyDispositionSchedule || (this.legacyDispositionSchedule && schedule && this.legacyDispositionSchedule.id != schedule.id)) {
                this.legacyDispositionSchedule = schedule;
                if (schedule) {
                    if (!schedule.name) {
                        schedule.name = schedule.attributes[ier_constants.Property_DispositionScheduleName];
                    }
                    var authority = this.item ? this.item.attributes[ier_constants.Property_DispositonAuthority] : schedule.getDispositionAuthority();
                    if (this.item && this.item.attributes[ier_constants.Property_DispositionSchedule] != schedule.id) {
                        authority = schedule.getDispositionAuthority();
                    }
                    this._dispositionAuthorityTextBox.set("value", authority);
                }
                if (this.objectSelector && this.objectSelector.selectedItem != schedule) {
                    this.objectSelector.setSelectedItem(schedule);
                }
                this._hidePropagationSettings(false);
                this.onInputChange();
            }
        }, _hidePropagationSettings:function (hide) {
            if (hide) {
                dojo_style.set(this._propagationSection, "display", "none");
            } else {
                if (this.item) {
                    dojo_style.set(this._propagationSection, "display", "");
                }
            }
            this._dispositionPropagationSelect.set("disabled", hide);
        }, _onCreateSchedule:function () {
            var containerName = null;
            if (this.entityItemPropertiesPane) {
                containerName = this.entityItemPropertiesPane.getPropertyValue(this.entityItemPropertiesPane.getDefaultNameProperty());
            }
            var dialog = new ier_dialog_AddDispositionScheduleDialog();
            dialog.addDomNodeCSSClass("ierBigDialog");
            dialog.show(this.repository, null, null, {"DisposalScheduleName":containerName});
            ier_util_dialog.manage(dialog);
        }, validate:function () {
            if (this.objectSelector) {
                if (this.objectSelector.getValue() == null || this.objectSelector.getValue().length == 0) {
                    return false;
                }
            }
            return true;
        }, isValidationRequired:function () {
            return true;
        }, _setDisabledAttr:function (disabled) {
            if (!disabled) {
                dojo_class.remove(this._dispositionInstructionsLabel, "labelReadOnly");
                dojo_class.remove(this._dispositionAuthorityLabel, "labelReadOnly");
                dojo_style.set(this._inheritedScheduleCheckboxLabel, "color", "");
            } else {
                dojo_class.add(this._dispositionInstructionsLabel, "labelReadOnly");
                dojo_class.add(this._dispositionAuthorityLabel, "labelReadOnly");
                dojo_style.set(this._inheritedScheduleCheckboxLabel, "color", "gray");
            }
            this._dispositionInstructionsCreateButton.set("disabled", disabled);
            this._dispositionAuthorityTextBox.set("disabled", disabled);
            this.dispositionAuthorityHoverHelp.set("disabled", disabled);
            this._inheritedScheduleCheckBox.set("disabled", disabled);
            var checked = this._inheritedScheduleCheckBox.get("checked");
            if (this.objectSelector) {
                this.objectSelector.set("disabled", disabled || checked);
            }
            this._dispositionPropagationSelect.set("disabled", disabled || checked);
        }});
    });
}, "url:ier/widget/tasks/templates/TaskDetailsPane.html":"<div class=\"ierSystemPropertiesPane\">\r\n\t<div data-dojo-attach-point=\"gridContainer\">\r\n\t</div>\r\n</div>", "ier/widget/DDScheduleCompositeButton":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/string", "dojo/_base/connect", "dijit/focus", "dijit/_Widget", "idx/html", "ecm/LoggerMixin", "ecm/model/Desktop", "ecm/widget/CompositeButton", "ier/messages", "ier/util/util"], function (dojo_declare, dojo_lang, dojo_class, dojo_construct, dojo_string, dojo_connect, dijit_focus, dijit_Widget, idx_html, ecm_LoggerMixin, ecm_model_desktop, ecm_widget_CompositeButton, ier_messages, ier_util) {
        return dojo_declare("ier.widget.DDScheduleCompositeButton", [ecm_LoggerMixin, dijit_Widget], {ier_messages:ier_messages, _selectedItemButton:null, showRemoveIcon:false, selectedItem:null, listenToChanges:false, parentItem:null, postCreate:function () {
            this.inherited(arguments);
            if (this.selectedItem) {
                this._createCompositeButton(this.selectedItem);
            }
            if (this.listenToChanges) {
                this._onChangeHandler = this.connect(ecm.model.desktop, "onChange", dojo_lang.hitch(function (changedModel) {
                    if (changedModel && this.parentItem && this.parentItem.id == changedModel.id) {
                        this.setSelectedItem(this.parentItem.getDefensibleDisposalSchedule());
                    }
                }));
            }
            dojo_class.add(this.domNode, ["dijit ", "dijitReset", "dijitInline"]);
        }, setSelectedItem:function (item) {
            if (this._selectedItemButton) {
                this._selectedItemButton.destroy();
            }
            this.selectedItem = item;
            this._createCompositeButton(this.selectedItem);
        }, setDisabled:function (disabled) {
            if (this._selectedItemButton) {
                this._selectedItemButton.set("disabled", disabled);
            }
        }, _createCompositeButton:function (selectedItem) {
            if (selectedItem) {
                if (this._selectedItemButton) {
                    this._selectedItemButton.destroy();
                }
                var label = this.selectedItemLabel ? this.selectedItemLabel : selectedItem.name;
                this._selectedItemButton = new ecm_widget_CompositeButton({label:label, disabled:this.readOnly, iconClass:"taskBasicScheduleIcon", actionIconClass:this.showRemoveIcon ? "removeIcon" : null, tooltip:this._getToolTip(selectedItem), actionAltText:this.showRemoveIcon ? dojo_string.substitute(ier_messages.objectSelector_remove, [selectedItem.name]) : null});
                this.connect(this._selectedItemButton, "onActionButtonClick", function (event) {
                    var itemToBeRemoved = this.selectedItem;
                    this.selectedItem = null;
                    this._selectedItemButton.destroy();
                    this.onItemRemoved(itemToBeRemoved, event);
                });
                dojo_construct.place(this._selectedItemButton.domNode, this.domNode, "only");
            }
        }, _getToolTip:function (item) {
            var tooltip = [];
            if (item.getRMRetentionTriggerPropertyName()) {
                tooltip.push(this._getToolTipText(ier_messages.retentionTriggerPropertyName + ": " + item.getRMRetentionTriggerPropertyName()));
            }
            if (item.getRMRetentionPeriod()) {
                tooltip.push(this._getToolTipText(ier_messages.entityItemDispositionPane_retentionPeriod + ": " + item.getRMRetentionPeriod("years") + " " + ier_messages.dispositionPane_years + " - " + item.getRMRetentionPeriod("months") + " " + ier_messages.dispositionPane_months + " - " + item.getRMRetentionPeriod("days") + " " + ier_messages.dispositionPane_days));
            }
            return tooltip.join("");
        }, _getToolTipText:function (name) {
            return "<div style='white-space:nowrap;'>" + idx_html.escapeHTML(name) + "</div>";
        }, _onFocusContainer:function (evt) {
            if (this._selectButton) {
                dijit_focus.focus(this._selectButton);
            }
        }, get:function (name) {
            if (name == "displayedValue" || name == "value") {
                return this.selectedItem ? this.selectedItem.id : "";
            } else {
                if (name == "label") {
                    return this.selectedItem ? this.selectedItem.name : "";
                } else {
                    return this.inherited(arguments);
                }
            }
        }, destroy:function () {
            if (this._onChangeHandler) {
                dojo_connect.disconnect(this._onChangeHandler);
            }
            this.inherited(arguments);
        }, _nop:null});
    });
}, "url:ier/widget/layout/templates/TaskPane.html":"<div class=\"taskPane ierCenterPane\">\r\n\t<div data-dojo-type=\"idx.layout.BorderContainer\" data-dojo-attach-point=\"mainPane\" data-dojo-props=\"gutters:false, design:'sidebar'\">\r\n\t\t\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'leading', gutters:false, splitter:true\"\r\n\t\t\tdata-dojo-attach-point=\"taskMenuPane\" class=\"tasksMenuPane\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"taskMenuContainer\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"taskResultPane\" data-dojo-props=\"region:'center'\" data-dojo-attach-point=\"taskListingContainerPane\" style=\"width:95%\">\r\n\t\t\t<div data-dojo-type=\"idx.layout.BorderContainer\" data-dojo-attach-point=\"taskListingBorderPane\" data-dojo-props=\"gutters:false, design:'headline'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit/layout/StackContainer\" data-dojo-props=\"region:'center'\" class=\"taskListingPane taskManagerPaneBorder\" \r\n\t\t\t\t\tdata-dojo-attach-point=\"taskListingStackContainer\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-props=\"region:'bottom', splitter:true, gutters:false\" data-dojo-type=\"dijit.layout.ContentPane\"\r\n\t\t\t\t\tdata-dojo-attach-point=\"taskInformationPaneContainer\" open=\"false\" class=\"taskManagerPaneBorder\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/FolderTree":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "ecm/widget/FolderTree", "ecm/widget/Tree", "ecm/model/ContentItem", "ier/constants", "ier/util/menu", "ier/util/util", "ier/model/FolderTreeModel", "ier/model/_BaseEntityObject", "ier/widget/Tree", "dojo/text!./templates/FolderTree.html"], function (dojo_declare, dojo_lang, dojo_construct, ecm_widget_FolderTree, ecm_widget_Tree, ecm_model_ContentItem, ier_constants, ier_util_menu, ier_util, ier_model_FolderTreeModel, ier_model_BaseEntityObject, ier_widget_Tree, templateString) {
        var folderTree = dojo_declare("ier.widget.FolderTree", [ecm_widget_FolderTree], {templateString:templateString, rootFolderId:ier_constants.Id_RecordsManagementFolder, itemsUpdated:{}, postCreate:function () {
            this.inherited(arguments);
        }, setRepository:function (repository) {
            this.inherited(arguments);
            if (this.itemsUpdateHandler) {
                this.disconnect(this.itemsUpdateHandler);
            }
            this.itemsUpdateHandler = this.connect(this.repository, "onItemsUpdated", function (item) {
                this.itemsUpdated[item.id] = item;
            });
        }, createTree:function (params) {
            if (params) {
                params.getRowClass = dojo_lang.hitch(this, this.getTreeRowClass);
                if (this.newTreeModel) {
                    params.model = this.newTreeModel;
                }
                return new ier_widget_Tree(params);
            }
        }, getContextMenuType:function (targetNode) {
            var item = targetNode.item;
            return ier_util_menu.getContainerContextMenuType(item, true);
        }, onContextMenuCreated:function (actionMenu, items) {
            if (actionMenu && items) {
                var addRecordCategoryButton = actionMenu.getMenu(ier_constants.Action_AddRecordCategory);
                var addRecordFolderButton = actionMenu.getMenu(ier_constants.Action_AddRecordFolder);
                var addRecordVolumeButton = actionMenu.getMenu(ier_constants.Action_AddRecordVolume);
                if (items.length > 0 && addRecordCategoryButton && addRecordFolderButton && addRecordVolumeButton) {
                    var item = items[0];
                    if (this.itemsUpdated[item.id] != null && this.itemsUpdated[item.id].getTimeStamp() > item.getTimeStamp()) {
                        item.setAllowedRMTypes(this.itemsUpdated[item.id].getAllowedRMTypes());
                    }
                    ier_util_menu.updateAddContainersToolbar(items[0], addRecordCategoryButton, addRecordFolderButton, addRecordVolumeButton);
                }
            }
        }});
        return folderTree;
    });
}, "ier/widget/dialog/RecordCategoryPropertiesDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/string", "ier/constants", "ier/messages", "ier/widget/dialog/RecordContainerPropertiesDialog"], function (dojo_declare, dojo_lang, dojo_string, ier_constants, ier_messages, ier_dialog_RecordContainerPropertiesDialog) {
        return dojo_declare("ier.widget.dialog.RecordCategoryPropertiesDialog", [ier_dialog_RecordContainerPropertiesDialog], {showDispositionPane:true, _renderDialog:function () {
            this.set("title", ier_messages.recordCategory);
            this.setResizable(true);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:ier_constants.ClassName_RecordCategory, defaultNameProperty:ier_constants.Property_RecordCategoryName, entityType:ier_constants.EntityType_RecordCategory, hideContentClassSelector:false, disableContentClassSelector:true, item:this.item, isCreate:false});
            this.connect(this._entityItemDispositionPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemDispositionPane.isLoaded()) {
                    this.item.getLegacyDispositionSchedule(dojo_lang.hitch(this, function (dispSchedule) {
                        this._entityItemDispositionPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, entityItemPropertiesPane:this._entityItemPropertiesPane, legacyDispositionSchedule:dispSchedule, item:this.item});
                    }));
                }
            }));
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes) {
                this._entityItemDetailPane.createRendering(this.item, attributes);
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, this.item, this._parentFolder, contentClass, properties, !this.item.privModifyPermissions);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
            });
            this._initHoldPane();
            this._initLinksPane();
            this._initHistoryPane();
        }});
    });
}, "url:ier/widget/templates/MultipleFoldersDropDown.html":"<div data-dojo-attach-point=\"containerNode\">\r\n</div>", "ier/widget/tasks/TaskResultsPane":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "dojo/dom-construct", "dojo/date/locale", "ier/constants", "ier/messages", "ier/widget/tasks/TaskDetailsPane", "dojo/text!./templates/TaskDetailsPane.html", "ecm/widget/PropertyGrid"], function (dojo_declare, dojo_domStyle, dojo_construct, dojo_date_locale, ier_constants, ier_messages, ier_widget_TaskDetailsPane, templateString, ecm_grid_PropertyGrid) {
        return dojo_declare("ier.widget.tasks.TaskResultsPane", [ier_widget_TaskDetailsPane], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            this._createPropertiesGrid(item);
        }, _createPropertiesGrid:function (item) {
            if (this.propGrid) {
                this.propGrid.destroy();
            }
            var data = {};
            var resources = {};
            var propertiesArray = [];
            if (item instanceof ecm.model.AsyncTaskInstance) {
                item = item.parent;
            }
            for (var index in item.taskRequest.results) {
                var parameter = item.taskRequest.results[index];
                if (parameter) {
                    var name = index;
                    var label = ier_messages[index];
                    var value = parameter;
                    if (value && label) {
                        data[name] = value;
                        resources[name + "Label"] = label || name;
                        propertiesArray.push(name);
                    }
                }
            }
            var taskProperties = propertiesArray.join(",");
            this.propGrid = new ecm_grid_PropertyGrid({data:data, properties:taskProperties, labelKeySuffix:"Label", resources:resources});
            this.propGrid.startup();
            this.propGrid.placeAt(this.gridContainer, "first");
            this.resize();
        }});
    });
}, "url:ier/widget/dialog/templates/LinkRecordDialog.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<table class=\"generalTable\">\r\n\t<tbody>   \r\n\t\t<!-- <tr data-dojo-attach-point=\"_linkSelectorRow\">\r\n\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t<label for=\"${id}_linkSelector\">${_messages.baseDialog_class}</label>\r\n\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_folderSelectorHoverHelp\" message=\"${_messages.linkRecordDialog_fileplanLocationHoverHelp}\"></div>\r\n\t\t\t</td>\r\n\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t<div id=\"${id}_contentClassSelector\"\r\n\t\t\t\t\tdata-dojo-type=\"ecm.widget.ContentClassSelector\" \r\n\t\t\t\t\tdata-dojo-attach-point=\"_contentClassSelector\" \r\n\t\t\t\t\tdata-dojo-props=\"selectorStyle:'dropdown', hasAll:false, onlySelectable:true\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"commonPropertiesDiv\">\r\n\t\t\t\t\t<div data-dojo-type=\"ier.widget.panes.CommonPropertiesPane\" data-dojo-attach-point=\"_commonProperties\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr> -->\r\n\t\t\t\r\n\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t\t<td class=\"propertyRowLabel\">\r\n \t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t<label for=\"${id}_folderSelector\">${_messages.linkRecordDialog_fileplanLocation}</label>\r\n\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"_folderSelectorHoverHelp\" message=\"${_messages.linkRecordDialog_fileplanLocationHoverHelp}\"></div>\r\n\t\t\t</td>\r\n\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t<div data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t\t<div data-dojo-type=\"ier.widget.panes.EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\"></div>\r\n\t</div>\r\n</div>", "ier/widget/listView/modules/TaskFilter":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-class", "dojo/dom-style", "dojo/keys", "dijit/form/CheckBox", "dijit/form/Select", "dijit/form/Button", "ecm/widget/listView/modules/_Module", "ecm/model/Desktop", "ier/messages", "ier/constants", "ier/widget/FilePlanSearchBar"], function (dojo_declare, dojo_lang, dojo_construct, dojo_class, dojo_style, dojo_keys, dijit_form_CheckBox, dijit_form_Select, dojo_Button, ecm_listView_Module, ecm_model_desktop, ier_messages, ier_constants, ier_widget_FilePlanSearchBar) {
        return dojo_declare("ier.widget.listView.modules.TaskFilter", [ecm_listView_Module], {name:"taskFilter", showUserOnlyCheckbox:true, filterSelectOptions:null, showFilterButton:true, getAPIPath:function () {
            return {taskFilter:this};
        }, preload:function () {
            this.domNode = dojo_construct.create("span", {"class":"filterData"});
            if (this.showUserOnlyCheckbox) {
                this.userCheckBox = new dijit_form_CheckBox({name:"userCheckbox", id:this.contentList.id + "_userCheckbox", value:true, style:"vertical-align: middle;"});
                dojo_construct.place(this.userCheckBox.domNode, this.domNode);
                this.connect(this.userCheckBox, "onClick", "onUserCheckboxClicked");
                this.setUserCheckBox();
                dojo_construct.create("label", {"for":this.contentList.id + "_userCheckbox", innerHTML:ier_messages.taskPane_currentUserTasksOnly, style:"margin-right: 10px;"}, this.domNode);
            }
            this.filterSelect = new dijit_form_Select({id:this.contentList.id + "_filterSelect", name:"filterSelect", options:this.filterSelectOptions, style:"margin-right: 7px;"});
            dojo_construct.place(this.filterSelect.domNode, this.domNode);
            this.connect(this.filterSelect, "onChange", function (value) {
                this.onFilterSelectChange(value);
            });
            dojo_construct.create("label", {"for":this.contentList.id + "_filterSelect", innerHTML:ier_messages.taskPane_currentUserTasksOnly, style:"display:none"}, this.domNode);
            this.filterTextBox = new ier_widget_FilePlanSearchBar({style:"margin-right: 10px;", placeHolder:ier_messages.nameContains, "aria-label":ier_messages.search_for});
            this.connect(this.filterTextBox, "onSearchButtonClicked", "onTextFilter");
            dojo_construct.place(this.filterTextBox.domNode, this.domNode);
        }, destroy:function () {
            var t = this;
            t._cleanUp();
            t.inherited(arguments);
        }, _cleanUp:function () {
            var t = this;
            if (t.filterTextBox) {
                t.filterTextBox.destroy();
            }
            if (t.userCheckBox) {
                t.userCheckBox.destroy();
            }
            if (t.filterSelect) {
                t.filterSelect.destroy();
            }
        }, clearFilter:function () {
            var t = this;
            t.filterTextBox.set("value", "");
            t.onTextFilter("");
            t.onClearFilter();
        }, reset:function () {
            this.filterTextBox.set("value", "");
            this.userCheckBox.set("checked", false);
            if (this.filterSelect && this.filterSelectOptions) {
                this.filterSelect.set("value", this.filterSelectOptions[0].value);
            }
        }, onTextFilter:function (value) {
        }, onClearFilter:function () {
        }, onFilterSelectChange:function (value) {
        }, onUserCheckboxClicked:function (value) {
        }, setUserCheckBox:function () {
            var isTaskUserOnly = !ecm_model_desktop.taskManager.isTaskAdmin() && ecm_model_desktop.taskManager.isTaskUser();
            if (isTaskUserOnly) {
                this.userCheckBox.set("checked", true);
                this.userCheckBox.set("disabled", true);
            } else {
                this.userCheckBox.set("checked", ecm_model_desktop.taskManager.showCurrentUserOnly);
            }
        }});
    });
}, "url:ier/widget/panes/templates/NamingPatternLevelPane.html":"<div class=\"ierNamingPatternLevelPane\">\r\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse;\" role=\"presentation\">\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"ierNamingPatternLevelCell\">\r\n\t\t\t\t\t<div class=\"ierLevelHeader\">\r\n\t\t\t\t\t\t<label><span class=\"required\">*</span>${_messages.namingPatternLevelPane_level}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.namingPatternLevelPane_level_help}\" data-dojo-props=\"isFocusible:true\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"ierNamingPatternLevelCell\">\r\n\t\t\t\t\t<div class=\"ierEntityTypeHeader\">\r\n\t\t\t\t\t\t<label><span class=\"required\">*</span>${_messages.namingPatternLevelPane_entityType}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.namingPatternLevelPane_entityType_help}\" data-dojo-props=\"isFocusible:true\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"ierNamingPatternLevelCell\">\r\n\t\t\t\t\t<div class=\"ierPatternHeader\">\r\n\t\t\t\t\t\t<label><span class=\"required\">*</span>${_messages.namingPatternLevelPane_pattern}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.namingPatternLevelPane_pattern_help}\" data-dojo-props=\"isFocusible:true\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"ierNamingPatternLevelCell\">\r\n\t\t\t\t\t<div class=\"ierIncrementHeader\">\r\n\t\t\t\t\t\t<label>${_messages.namingPatternLevelPane_increment}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.namingPatternLevelPane_increment_help}\" data-dojo-props=\"isFocusible:true\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody data-dojo-attach-point=\"_levelContainer\"></tbody>\r\n\t</table>\r\n\t<div class=\"ierSectionContainer\">\r\n\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"_addButton\">${_messages.namingPatternLevelPane_addLevel}</button>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/DispositionScheduleDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/PropertyDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_util, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.DispositionScheduleDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, entityProperties:null, postCreate:function () {
            this.inherited(arguments);
            this.setIntroText(ier_messages.addDispositionScheduleDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh11.htm"));
            this.setResizable(true);
            this.addChildPane(this._propertiesPane);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
        }, show:function (repository, item, retentionModeValue, entityProperties) {
            this.inherited("show", []);
            this.item = item;
            this.entityProperties = entityProperties;
            if (item) {
                this.set("title", ier_messages.addDispositionScheduleDialog_editTitle);
            } else {
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this.set("title", ier_messages.addDispositionScheduleDialog_title);
            }
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderDialog:function (retentionModeValue) {
            this._propertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_DispositionSchedule, defaultNameProperty:ier_constants.Property_DispositionScheduleName, entityType:ier_constants.EntityType_DispositionSchedule, hideContentClassSelector:true, item:this.item, isReadOnly:true});
            this.connect(this._propertiesPane, "onCompleteRendering", dojo_lang.hitch(this, function () {
                this._propertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            }));
        }, validateInput:function () {
            return false;
        }, _save:function (close) {
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "url:ier/widget/templates/MultipleFoldersSelector.html":"<div data-dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"_selectedFoldersSection\" class=\"dijitInline\"></div>\r\n\t<button data-dojo-attach-point=\"button\" data-dojo-type=\"dijit/form/Button\" type=\"button\">${messages.baseDialog_select}</button>\r\n</div>", "ier/widget/panes/DefensibleDisposalDispositionPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/store/Memory", "dijit/registry", "ier/widget/dialog/IERBaseDialogPane", "ier/constants", "ier/messages", "ier/util/util", "ier/model/DefensibleDisposalSchedule", "dojo/text!./templates/DefensibleDisposalDispositionPane.html", "dijit/form/Button", "ecm/widget/HoverHelp", "dijit/form/NumberSpinner", "dijit/form/FilteringSelect"], function (dojo_declare, dojo_lang, dojo_domConstruct, dojo_style, dojo_class, dojo_store_Memory, dijit_registry, IERBaseDialogPane, ier_constants, ier_messages, ier_util, DefensibleDisposalSchedule, templateString) {
        return dojo_declare("ier.widget.panes.DefensibleDisposalDispositionPane", [IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, readOnly:false, defensibleScheduleItem:null, createRendering:function (params) {
            this.repository = params.repository != null ? params.repository : null;
            this.item = params.item != null ? params.item : null;
            if (!this.readOnly) {
                this._getAllAvailableRecordProperties(dojo_lang.hitch(this, function (options) {
                    this.retentionTriggerPropertyNameSelect.reset();
                    this.retentionTriggerPropertyNameSelect.store = null;
                    var store = new dojo_store_Memory({data:{identifier:"value", label:"label", items:options}});
                    this.retentionTriggerPropertyNameSelect.store = store;
                    if (this.defensibleScheduleItem) {
                        this.set("schedule", this.defensibleScheduleItem);
                    }
                    if (this.retentionTriggerPropertyNameSelect.getValue()) {
                        this.retentionTriggerPropertyNameSelect.filter(this.retentionTriggerPropertyNameSelect.getValue());
                    }
                }));
            } else {
                if (this.defensibleScheduleItem) {
                    this.set("schedule", this.defensibleScheduleItem);
                }
            }
        }, _getScheduleAttr:function () {
            var triggerPropertyName = this.retentionTriggerPropertyNameSelect.get("value");
            var retentionPeriodYear = this.retentionPeriod_years.get("value");
            var retentionPeriodMonth = this.retentionPeriod_months.get("value");
            var retentionPeriodDays = this.retentionPeriod_days.get("value");
            return new DefensibleDisposalSchedule({"retentionTriggerPropertyName":triggerPropertyName, "retentionPeriod":retentionPeriodYear + "-" + retentionPeriodMonth + "-" + retentionPeriodDays});
        }, _setScheduleAttr:function (schedule) {
            this.defensibleScheduleItem = schedule;
            this.retentionTriggerPropertyNameSelect.set("value", this.defensibleScheduleItem.getRMRetentionTriggerPropertyName());
            this.retentionPeriod_years.set("value", this.defensibleScheduleItem.getRMRetentionPeriod("years"));
            this.retentionPeriod_months.set("value", this.defensibleScheduleItem.getRMRetentionPeriod("months"));
            this.retentionPeriod_days.set("value", this.defensibleScheduleItem.getRMRetentionPeriod("days"));
        }, _getAllAvailableRecordProperties:function (callback) {
            this.repository.getAllRecordProperties(dojo_lang.hitch(this, function (properties) {
                var recordProps = [];
                if (properties) {
                    for (var i in properties) {
                        var property = properties[i];
                        if (property.dataType == "xs:timestamp") {
                            recordProps.push({label:property.name, value:String(property.id)});
                        }
                    }
                }
                callback(recordProps);
            }));
        }, validate:function () {
            var triggerPropertyName = this.retentionTriggerPropertyNameSelect.get("value");
            if (triggerPropertyName == null || triggerPropertyName.length == 0) {
                return false;
            }
            return true;
        }, isValidationRequired:function () {
            return true;
        }, _setDisabledAttr:function (disabled) {
            if (!disabled) {
                dojo_class.remove(this.rententionTriggerPropertyNameLabel, "labelReadOnly");
                dojo_class.remove(this.retentionPeriodLabel, "labelReadOnly");
                dojo_class.remove(this.retentionPeriodLabel_years, "labelReadOnly");
                dojo_class.remove(this.retentionPeriodLabel_months, "labelReadOnly");
                dojo_class.remove(this.retentionPeriodLabel_days, "labelReadOnly");
            } else {
                dojo_class.add(this.rententionTriggerPropertyNameLabel, "labelReadOnly");
                dojo_class.add(this.retentionPeriodLabel, "labelReadOnly");
                dojo_class.add(this.retentionPeriodLabel_years, "labelReadOnly");
                dojo_class.add(this.retentionPeriodLabel_months, "labelReadOnly");
                dojo_class.add(this.retentionPeriodLabel_days, "labelReadOnly");
            }
            this.retentionPeriod_years.set("disabled", disabled);
            this.retentionPeriod_months.set("disabled", disabled);
            this.retentionPeriod_days.set("disabled", disabled);
            this.retentionTriggerPropertyNameSelect.set("disabled", disabled);
            this.retentionPeriodHoverHelp.set("disabled", disabled);
            this.triggerPropertyNameHoverHelp.set("disabled", disabled);
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemPropertiesPane.html":"<div class=\"ierEntityItemPropertiesPane\">\r\n\t<div class=\"propertiesContainer\" style=\"width: 100%; height:95%\">\r\n\t\t<div class=\"contentClassSelector\">\r\n\t\t\t<div data-dojo-attach-point=\"_classLabel\" class=\"dijitInline\">${_messages.baseDialog_class}: </div>\r\n\t\t\t<div id=\"${id}_contentClassSelector\"\r\n\t\t\t\tdata-dojo-type=\"ecm.widget.ContentClassSelector\" \r\n\t\t\t\tdata-dojo-attach-point=\"_contentClassSelector\" \r\n\t\t\t\tdata-dojo-props=\"selectorStyle:'dropdown', hasAll:false, onlySelectable:true\"\r\n\t\t\t\tstyle=\"display:none\">\r\n\t\t\t</div>\r\n\t\t\t<div id=\"${id}_contentClassSelectorDisabled\" data-dojo-type=\"dijit.form.TextBox\" \r\n\t\t\t\tdisabled=\"disabled\"\r\n\t\t\t\tclass=\"ierDropDownInput\"\r\n\t\t\t\tdata-dojo-attach-point=\"_contentClassSelectorDisabled\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"commonPropertiesContainer\" class=\"commonPropertiesMargins\">\r\n\t\t\t<div data-dojo-type=\"ier.widget.panes.CommonPropertiesPane\" data-dojo-attach-point=\"_commonProperties\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/model/RecordEntryTemplate":function () {
    define("ier/model/RecordEntryTemplate", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/_ModelObject", "ecm/model/Request", "ecm/model/EntryTemplateOption", "ecm/model/EntryTemplatePropertyOptions", "ecm/model/AttributeDefinition", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_ModelObject, ecm_model_Request, ecm_model_EntryTemplateOption, ecm_model_EntryTemplatePropertyOptions, ecm_model_AttributeDefinition, ier_constants, ier_util) {
        return dojo_declare("ier.model.RecordEntryTemplate", [ecm_model_ModelObject], {constructor:function (itemJSON) {
            this._showRecordClassSelection = new ecm_model_EntryTemplateOption({on:true, readOnly:true, hidden:false});
            this._selectedRecordClassId = null;
            this._selectedRecordClassLabel = null;
            this._showClassAndLocationSelectorsStep = true;
            this._showFilePlanLocationSelection = new ecm_model_EntryTemplateOption({on:true, readOnly:false, hidden:false});
            this._filePlanFolderLocations = [];
            this._startingFilePlanLocationId = null;
            this._constrainStartingFilePlanLocation = false;
            this._primaryFilePlanLocationId = null;
            this._propertiesOptions = [];
            this._showPropertiesStep = true;
            this._retrieved = false;
            this._targetRecordObjectStoreId = null;
            this._targetRecordObjectStoreDisplayName = null;
        }, isRetrieved:function () {
            return this._retrieved;
        }, getPrimaryFilePlanLocationId:function () {
            return this._primaryFilePlanLocationId;
        }, getTargetObjectStoreP8Id:function () {
            return this._targetRecordObjectStoreId;
        }, getTargetRecordObjectStoreDisplayName:function () {
            return this._targetRecordObjectStoreDisplayName;
        }, getRepository:function () {
            return this.repository;
        }, getDescription:function () {
            return this.description;
        }, setDescription:function (description) {
            this.description = description;
            this.onChange(this);
        }, setRepository:function (repository) {
            this.repository = repository;
            this.onChange(this);
        }, getShowRecordClassSelection:function () {
            return this._showRecordClassSelection;
        }, getShowFilePlanLocationSelection:function () {
            return this._showFilePlanLocationSelection;
        }, getFilePlanLocations:function () {
            return this._filePlanFolderLocations;
        }, getStartingFilePlanLocationId:function () {
            return this._startingFilePlanLocationId;
        }, getIsConstrainedToStartingFilePlanLocation:function () {
            return this._constrainStartingFilePlanLocation;
        }, getShowPropertiesStep:function () {
            return this._showPropertiesStep;
        }, getShowClassAndLocationSelectorsStep:function () {
            return this._showClassAndLocationSelectorsStep;
        }, getPropertyOptions:function () {
            return this._propertiesOptions;
        }, getSelectedRecordClassId:function () {
            return this._selectedRecordClassId;
        }, getSelectedRecordClassLabel:function () {
            return this._selectedRecordClassLabel;
        }, retrieveEntryTemplate:function (callback, editMode) {
            if (this._retrieved) {
                if (callback) {
                    callback(this);
                }
                this.onEntryTemplateRetrieved(this);
            } else {
                var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    this._retrieveEntryTemplateCompleted(response, callback);
                }));
                params.requestParams[ier_constants.Param_TemplateName] = this.id;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_OpenRecordEntryTemplate, ier_constants.PostEncoding, params);
            }
        }, _retrieveEntryTemplateCompleted:function (response, callback) {
            this.id = response.id;
            this.name = response.displayName;
            this.setDescription(response.description);
            this._showPropertiesStep = response.showPropertiesStep;
            this._showClassAndLocationSelectorsStep = response.showClassAndLocationSelectorsStep;
            this._selectedRecordClassId = response.selectedRecordClassId;
            this._selectedRecordClassLabel = response.selectedRecordClassLabel;
            this._targetRecordObjectStoreId = response.targetRecordObjectStoreId;
            this._targetRecordObjectStoreDisplayName = response.targetRecordObjectStoreDisplayName;
            if (response.showRecordClassSelection) {
                this._showRecordClassSelection = new ecm_model_EntryTemplateOption({id:"showRecordClassSelection", name:"showRecordClassSelection", on:response.showRecordClassSelection.on, readOnly:response.showRecordClassSelection.readOnly, hidden:response.showRecordClassSelection.hidden});
            }
            if (response.showFilePlanLocationSelection) {
                this._showFilePlanLocationSelection = new ecm_model_EntryTemplateOption({id:"showFilePlanLocationSelection", name:"showFilePlanLocationSelection", on:response.showFilePlanLocationSelection.on, readOnly:response.showFilePlanLocationSelection.readOnly, hidden:response.showFilePlanLocationSelection.hidden});
            }
            if (response.filePlanFolderLocations) {
                for (var i in response.filePlanFolderLocations) {
                    var filePlanLocationJSON = response.filePlanFolderLocations[i];
                    this._filePlanFolderLocations.push({"folderId":filePlanLocationJSON.folderId, "objectstore":filePlanLocationJSON.objectstore});
                }
            }
            if (response.constrainStartingFilePlanLocation) {
                this._constrainStartingFilePlanLocation = response.constrainStartingFilePlanLocation;
            }
            if (response.startingFilePlanLocationId) {
                this._startingFilePlanLocationId = response.startingFilePlanLocationId;
            }
            if (response.primaryFilePlanLocation) {
                this._primaryFilePlanLocationId = response.primaryFilePlanLocation;
            }
            if (response.propertiesOptions) {
                this._propertiesOptions = [];
                for (var i in response.propertiesOptions) {
                    var propOptionsJSON = response.propertiesOptions[i];
                    if (propOptionsJSON) {
                        var propOption = new ecm_model_EntryTemplatePropertyOptions({id:propOptionsJSON.name, name:propOptionsJSON.name, dataType:propOptionsJSON.dataType, defaultValue:propOptionsJSON.defaultValue, required:propOptionsJSON.required, cardinality:propOptionsJSON.cardinality, requiredClass:propOptionsJSON.required_template !== undefined ? propOptionsJSON.required_template.template_id : "", on:propOptionsJSON.on, readOnly:propOptionsJSON.readOnly, hidden:propOptionsJSON.hidden});
                        this._propertiesOptions.push(propOption);
                    }
                }
            }
            this._retrieved = true;
            if (callback) {
                callback(this);
            }
            this.onRecordEntryTemplateRetrieved(this);
        }, setRecordEntryTemplateAttributeDefs:function (repository, attributeDefs) {
            var propsOptions = this.getPropertyOptions();
            if (!propsOptions) {
                return attributeDefs;
            }
            var origAttrDefsById = {};
            var attrDef;
            for (var attrDefNdx in attributeDefs) {
                attrDef = attributeDefs[attrDefNdx];
                origAttrDefsById[attrDef.id] = attrDef;
            }
            var clonedAttributeDefs = attributeDefs.slice(0);
            attributeDefs.length = 0;
            var entryTemplateAttrDef;
            var entryTemplateAttrDefsByName = {};
            var propOptions;
            var defaultValue;
            var isValueRequired;
            var isReadOnly;
            var isHidden;
            var requiredClass;
            for (var propOptionsNdx in propsOptions) {
                propOptions = propsOptions[propOptionsNdx];
                attrDef = origAttrDefsById[propOptions.id];
                if (!attrDef || (attrDef.dataType != propOptions.dataType && propOptions.dataType != "xs:date")) {
                    continue;
                }
                isHidden = attrDef.hidden;
                isReadOnly = attrDef.readOnly;
                isValueRequired = attrDef.required;
                if (propOptions.hidden) {
                    isHidden = true;
                }
                if (propOptions.readOnly) {
                    isReadOnly = true;
                }
                if (propOptions.required) {
                    isValueRequired = true;
                }
                defaultValue = propOptions.defaultValue;
                if (!defaultValue || (defaultValue.length == 0)) {
                    defaultValue = attrDef.defaultValue;
                }
                requiredClass = propOptions.requiredClass;
                if (!requiredClass) {
                    requiredClass = attrDef.requiredClass;
                }
                entryTemplateAttrDef = attrDef.clone();
                entryTemplateAttrDef.repositoryType = repository.type;
                entryTemplateAttrDef.required = isValueRequired;
                entryTemplateAttrDef.defaultValue = defaultValue;
                entryTemplateAttrDef.readOnly = isReadOnly;
                entryTemplateAttrDef.hidden = isHidden;
                entryTemplateAttrDef.requiredClass = requiredClass;
                attributeDefs.push(entryTemplateAttrDef);
                entryTemplateAttrDefsByName[entryTemplateAttrDef.id] = entryTemplateAttrDef;
            }
            if (clonedAttributeDefs.length != attributeDefs.length) {
                for (var attrDefNdx in clonedAttributeDefs) {
                    attrDef = clonedAttributeDefs[attrDefNdx];
                    entryTemplateAttrDef = entryTemplateAttrDefsByName[attrDef.id];
                    if (!entryTemplateAttrDef) {
                        if (attrDef.id == "EntryTemplateObjectStoreName") {
                            defaultValue = [this.id.split(",", 2)[1]];
                        } else {
                            if (attrDef.id == "EntryTemplateId") {
                                defaultValue = [this.id.split(",")[2]];
                            } else {
                                defaultValue = attrDef.defaultValue;
                            }
                        }
                        entryTemplateAttrDef = attrDef.clone();
                        entryTemplateAttrDef.repositoryType = repository.type;
                        entryTemplateAttrDef.defaultValue = defaultValue;
                        attributeDefs.push(entryTemplateAttrDef);
                        entryTemplateAttrDefsByName[attrDef.id] = entryTemplateAttrDef;
                    }
                }
            }
        }, onRecordEntryTemplateRetrieved:function (template) {
        }, _nop:null});
    });
}, "ier/widget/listView/modules/ConfigureToolbar":function () {
    define("ier/widget/listView/modules/ConfigureToolbar", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dijit/registry", "dijit/focus", "ecm/model/Desktop", "ier/widget/listView/modules/Toolbar", "ier/constants", "ier/util/menu"], function (dojo_declare, dojo_array, dojo_lang, dijit_registry, dijit_focus, ecm_model_Desktop, ier_widget_listView_modules_Toolbar, ier_constants, ier_util_menu) {
        return dojo_declare("ier.widget.listView.modules.ConfigureToolbar", [ier_widget_listView_modules_Toolbar], {isConfigure:true, onToolbarButtonsCreated:function (toolbarButtons) {
            this.inherited(arguments);
        }, updateToolbarState:function (action) {
            this.inherited(arguments);
        }, cleanUpToolButtons:function () {
            if (this._timeoutHandle) {
                clearTimeout(this._timeoutHandle);
                this._timeoutHandle = null;
            }
            if (this._watchHandle) {
                this._watchHandle.unwatch();
                this._watchHandle = null;
            }
            this.inherited(arguments);
        }, onToolbarButtonsCreated:function (toolbarButtons) {
            dojo_array.forEach(toolbarButtons, function (toolbarButton) {
                var actionId = toolbarButton.action.id;
                this.connect(toolbarButton, "onFocus", function () {
                    this._selectedToolBarButtonActionId = actionId;
                });
            }, this);
            if (this._selectedToolBarButtonActionId) {
                var focusFunc = function (buttons, actionId) {
                    dojo_array.some(buttons, function (button) {
                        if (!button._destroyed && button.action.id == actionId) {
                            button.focus();
                            return true;
                        }
                    });
                };
                var isVisibleFunc = function (node) {
                    while (node) {
                        if (node.style && node.style.display == "none") {
                            return false;
                        }
                        node = node.parentNode;
                    }
                    return true;
                };
                var timeoutFunc = dojo_lang.hitch(this, function () {
                    if (dijit_focus.curNode == null || !isVisibleFunc(dijit_focus.curNode)) {
                        this._timeoutHandle = null;
                        focusFunc(toolbarButtons, this._selectedToolBarButtonActionId);
                    } else {
                        this._timeoutHandle = setTimeout(function () {
                            timeoutFunc();
                        }, 500);
                    }
                });
                timeoutFunc();
                this._watchHandle = dijit_focus.watch("curNode", dojo_lang.hitch(this, function (name, oldVal, newVal) {
                    this._watchHandle.unwatch();
                    this._watchHandle = null;
                    if (this._timeoutHandle) {
                        clearTimeout(this._timeoutHandle);
                        this._timeoutHandle = null;
                        if (!newVal) {
                            focusFunc(toolbarButtons, this._selectedToolBarButtonActionId);
                        }
                    }
                }));
            }
            this.inherited(arguments);
        }});
    });
}, "url:ier/widget/dialog/templates/AddHoldDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" title=\"${_ierMessages.baseDialog_properties}\" class=\"ierPropertiesTitlePane\"\r\n\t\t\tdata-dojo-attach-point=\"_propertyTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" data-dojo-props=\"open: false\" title=\"${_ierMessages.holdDialog_conditions}\" \r\n\t\t\tclass=\"ierConditionTitlePane\" data-dojo-attach-point=\"_conditionTitlePane\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/HoldConditionPane\" data-dojo-attach-point=\"_conditionPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/ScheduleDDSweepReportTaskWizard":function () {
    define("ier/widget/dialog/ScheduleDDSweepReportTaskWizard", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/string", "dojo/dom-style", "dojo/date/locale", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/BaseAccordionWizardDialog", "ier/widget/panes/DDReportSweepPane", "ier/widget/panes/AsyncTaskSchedulerPane"], function (dojo_declare, dojo_lang, dojo_construct, dojo_string, dojo_style, dojo_locale, ecm_model_Desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, BaseAccordionWizardDialog, ScheduleDDReportSweepPane, AsyncTaskSchedulerPane) {
        return dojo_declare("ier.widget.dialog.ScheduleDDSweepReportTaskWizard", [BaseAccordionWizardDialog], {finishButtonLabel:ier_messages.scheduleDDReportSweep_scheduleSweep, task:null, postCreate:function () {
            this.inherited(arguments);
            this.set("title", ier_messages.scheduleDDReportSweepWizard_title);
            this.setIntroText(ier_messages.scheduleDDReportSweepWizard_description);
            this.setResizable(true);
            this.scheduleDDReportSweepPane = new ScheduleDDReportSweepPane();
            this.addChildPane(this.scheduleDDReportSweepPane);
            this.connect(this.scheduleDDReportSweepPane, "onInputChange", function () {
                if (this.scheduleDDReportSweepPane.validate()) {
                    this.enablePane(this.taskSchedulerPane);
                } else {
                    this.disablePane(this.taskSchedulerPane);
                }
                this.updateButtonsState();
            });
            this.taskSchedulerPane = new AsyncTaskSchedulerPane({disabled:true, showLoginInformation:true});
            this.addChildPane(this.taskSchedulerPane);
            this.startup();
        }, _setScheduleAttr:function (schedule) {
            var asyncTaskSchedulerPane = this.taskSchedulerPane.asyncTaskSchedulerPane;
            ier_util.setTaskSchedulerPane(asyncTaskSchedulerPane, schedule, true);
        }, _setPropertiesAttr:function (properties) {
            this.scheduleDDReportSweepPane.set("properties", properties);
        }, show:function (repository, item) {
            this.inherited("show", []);
            this.scheduleDDReportSweepPane.createRendering(repository, item);
        }, onFinishButtonClicked:function () {
            var reportSweepProperties = this.scheduleDDReportSweepPane.get("properties");
            var params = {};
            var repository = this.scheduleDDReportSweepPane.repository;
            params[ier_constants.Param_RepositoryId] = repository.id;
            params[ier_constants.Param_P8RepositoryId] = repository.objectStoreName;
            params[ier_constants.Param_ContainerId] = reportSweepProperties.containerIds;
            params[ier_constants.Param_ContainerName] = reportSweepProperties.containerNames;
            params[ier_constants.Param_CE_EJB_URL] = repository.serverName;
            params["advancedDays"] = reportSweepProperties.advancedDays;
            params["reportOnly"] = reportSweepProperties.reportOnly;
            params["connectionPointName"] = reportSweepProperties.connectionPoint;
            params["needApproval"] = reportSweepProperties.needApproval;
            params["containerToDeclareRecordTo"] = reportSweepProperties.containerToDeclareRecordId;
            params["defensibleSweepAlwaysDeclareRecord"] = repository.defensibleSweepSettings.defensibleSweepAlwaysDeclareRecord;
            params["defensibleSweepAlwaysShowDeclareResult"] = repository.defensibleSweepSettings.defensibleSweepAlwaysShowDeclareResult;
            params["defensibleDisposalWorkflowId"] = reportSweepProperties.defensibleDisposalWorkflowId;
            for (var i in ecm_model_Desktop.defensibleSweepSettings) {
                params[i] = ecm_model_Desktop.defensibleSweepSettings[i];
            }
            params[ier_constants.Param_RootDownloadLinkURL] = ier_util.getRootDownloadLinkURL(repository);
            params[ier_constants.Param_ParameterList] = ier_constants.Param_ContainerName + "," + "advancedDays" + "," + "reportOnly" + "," + "connectionPointName" + "," + "needApproval" + "," + "containerToDeclareRecordTo";
            params["parent"] = "IER";
            var taskSchedule = this.taskSchedulerPane.get("schedule");
            if (!this.task) {
                ecm.model.desktop.taskManager.scheduleAsyncTask(taskSchedule, ier_constants.TaskType_DDReportSweepClass, params, null, dojo_lang.hitch(this, function (response) {
                    this.onFinish(response);
                    ecm_model_Desktop.taskManager.onAsyncTaskItemAdded(response);
                    this.onCancel();
                }));
            } else {
                var taskRequest = this.task.taskRequest;
                taskRequest[ier_constants.Param_UserId] = taskSchedule.username;
                taskRequest[ier_constants.Param_Password] = taskSchedule.password;
                taskRequest[ier_constants.Param_EmailAddress] = taskSchedule.email;
                taskRequest[ier_constants.Param_Name2] = taskSchedule.name;
                taskRequest[ier_constants.Param_Description2] = taskSchedule.description;
                dojo_declare.safeMixin(taskRequest.specificTaskRequest, params);
                this.task.reschedule(dojo_lang.hitch(this, function (response) {
                    this.onFinish(response);
                    this.task.refresh();
                    this.onCancel();
                }), taskRequest);
            }
        }, onFinish:function (response) {
        }});
    });
}, "url:ier/widget/dialog/templates/AddRecordFolderDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemGeneralPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemGeneralPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t <div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_disposition}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemDispositionPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemDispositionPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\" open=\"false\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/admin/SystemPropertyPane":function () {
    require({cache:{"url:ier/widget/admin/templates/SystemPropertyPane.html":"<div class=\"ecmAdminTab\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\" class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_editButton\">${_messages.admin_edit}</button>\r\n\t\t<div data-dojo-type=\"dijit/Menu\" data-dojo-attach-point=\"_menu\" style=\"display: none;\">\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_editMenu\">${_messages.admin_edit}</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-attach-point=\"_gridContainer\" data-dojo-props=\"region: 'center'\" class=\"ecmContentList ierCenterPane\"></div>\r\n</div>\r\n", "url:ier/widget/admin/templates/SystemPropertyDialogContent.html":"<div data-dojo-type=\"dijit/layout/BorderContainer\" data-dojo-props=\"gutters: false\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">\r\n\t\t<table role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>${_messages.admin_list_label}</label></td>\r\n\t\t\t\t<td><span data-dojo-attach-point=\"_listNode\" class=\"ierAdminValue\"></span></td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t\t<div class=\"ierAdminSloshBucketFilterBar\">\r\n\t\t\t<label for=\"${id}_filterBox\" style=\"display: none;\">${_messages.admin_filter}</label>\r\n\t\t\t<div data-dojo-type=\"ecm/widget/FilterTextBox\" data-dojo-attach-point=\"_filterBox\"\r\n\t\t\t\tdata-dojo-props=\"intermediateChanges: true\" placeholder=\"${_messages.admin_filter}\" id=\"${id}_filterBox\" style=\"float: none;\"></div>\r\n\t\t\t<div class=\"ierAdminSloshBucketToolbar\">\r\n\t\t\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_restoreButton\">${_messages.admin_restoreDefaults}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm/widget/SloshBucket\" data-dojo-attach-point=\"_propertySelector\" data-dojo-props=\"region: 'center'\" class=\"ierAdminPropertySelector\"></div>\r\n</div>\r\n"}});
    define("ier/widget/admin/SystemPropertyPane", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/store/Memory", "dojo/string", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/BorderContainer", "idx/data/JsonStore", "ecm/model/Request", "ier/constants", "ier/messages", "ier/model/admin/Config", "ier/widget/admin/Grid", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/SystemPropertyPane.html", "dojo/text!./templates/SystemPropertyDialogContent.html", "dijit/Menu", "dijit/MenuItem", "dijit/form/Button", "dijit/form/TextBox", "dijit/layout/ContentPane", "ecm/widget/FilterTextBox", "ecm/widget/SloshBucket"], function (array, declare, lang, Memory, string, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, JsonStore, Request, constants, messages, Config, Grid, IERBaseDialog, SystemPropertyPane_html, SystemPropertyDialogContent_html) {
        function newStore(data) {
            return new JsonStore({identifier:"value", label:"name", data:data || []});
        }
        var Dialog = declare(IERBaseDialog, {contentString:SystemPropertyDialogContent_html, title:messages.admin_systemProperties, repository:null, config:null, object:null, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this.addDomNodeCSSClass("ierSmallDialog");
            this._saveButton = this.addButton(messages.admin_save, "_onSave", false, true);
            this._propertySelector.hideAvailableOnAdd = true;
            this._availableStructure = [{field:"name", name:messages.admin_availableProperties, width:"100%"}];
            this._selectedStructure = [{field:"name", name:messages.admin_selectedProperties, width:"100%"}];
            this.connect(this._filterBox, "onChange", "_onFilterChange");
            this.connect(this._restoreButton, "onClick", "_onRestore");
        }, _setObjectAttr:function (object) {
            this._set("object", object);
            this._listNode.innerHTML = object && object.name || "";
            this._filterBox.set("value", "");
            this._propertySelector.setAvailableGridModel(newStore(), this._availableStructure);
            this._propertySelector.setSelectedValuesGridModel(newStore(), this._selectedStructure);
            this._loadAvailableProperties();
        }, _loadAvailableProperties:function () {
            if (this.repository && this.object) {
                Request.invokeService("openContentClass", this.repository.type, {repositoryId:this.repository.id, objectStoreId:this.repository.objectStoreName, template_name:this.object.id, ier_config:true}, lang.hitch(this, function (response) {
                    var data = [];
                    array.forEach(response.criterias, function (c) {
                        if (c.system) {
                            data.push({value:c.name, name:c.label || c.name});
                        }
                    });
                    data.sort(function (a, b) {
                        return (a.name > b.name ? 1 : -1);
                    });
                    this._propertySelector.setAvailableGridModel(newStore(data), this._availableStructure);
                    this._loadSelectedProperties();
                }));
            }
        }, _loadSelectedProperties:function () {
            if (this.object) {
                var props = this.object.props;
                var names = this.object.names;
                var selected = {};
                var data = array.map(props, function (p) {
                    selected[p] = p;
                    return {value:p, name:names[p] || p};
                });
                this._propertySelector.setSelectedValuesGridModel(newStore(data), this._selectedStructure, selected);
                this._propertySelector.filter({});
            }
        }, _onFilterChange:function () {
            var value = this._filterBox.get("value");
            this._propertySelector.filter({name:"*" + value + "*"});
        }, _onRestore:function () {
            if (this.object) {
                Config.getConfig("repository", "default", lang.hitch(this, function (config) {
                    this.object = {id:this.object.id, name:this.object.name};
                    this.object.props = config.get(this.object.id + "SystemProperties");
                    this.object.names = config.get(this.object.id + "DisplayNames");
                    this._loadSelectedProperties();
                }));
            }
        }, _onSave:function () {
            if (this.config && this.object) {
                var data = this._propertySelector.getData(this._propertySelector.getSelectedValuesGrid());
                if (data && data.length > 0) {
                    var names = this.object.names;
                    this.object.props = array.map(data, function (d) {
                        var p = d.value;
                        names[p] = names[p] || d.name;
                        return p;
                    });
                    this.config.set(this.object.id + "SystemProperties", this.object.props);
                    Config.saveConfig(this.config, lang.hitch(this, function () {
                        this.onSave(this.object);
                        this.hide();
                    }));
                }
            }
        }, onSave:function (object) {
        }});
        return declare([BorderContainer, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:SystemPropertyPane_html, gutters:false, repository:null, config:null, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this._supportingWidgets = [];
            var structure = [{field:"name", name:messages.type, width:"20%"}, {field:"props", name:messages.admin_systemProperties, width:"80%", sortable:false, formatter:function (object) {
                var names = object.names;
                return array.map(object.props, function (p) {
                    return names[p] || p;
                }).join(", ");
            }}];
            this._grid = new Grid({structure:structure, sortInitialOrder:{colId:1}});
            this._grid.placeAt(this._gridContainer.containerNode);
            this.connect(this._editButton, "onClick", "_onEdit");
            this.connect(this._editMenu, "onClick", "_onEdit");
            this.connect(this._grid, "onSelectionChange", "_onSelectionChange");
            this._grid.menu.bind(this._menu, {hookPoint:"row"});
            this._onSelectionChange();
        }, destroy:function () {
            if (this._dialog) {
                this._dialog.destroyRecursive();
            }
            this.inherited(arguments);
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._grid.setStore(new Memory({data:this._getData()}));
        }, _getData:function () {
            var data = [];
            if (this.config) {
                var values = this.config.values;
                for (var key in values) {
                    var index = key.indexOf("SystemProperties");
                    if (index > 0) {
                        var id = key.substring(0, index);
                        var name;
                        if (id == constants.ClassName_Container) {
                            name = messages.container;
                        } else {
                            name = values[id + "DisplayName"] || id;
                        }
                        var props = values[key] || [];
                        var names = values[id + "DisplayNames"] || {};
                        data.push({id:id, name:name, props:props, names:names});
                    }
                }
            }
            return data;
        }, _getDialog:function () {
            if (!this._dialog) {
                this._dialog = new Dialog({repository:this.repository, config:this.config});
                this.connect(this._dialog, "onSave", "_onSave");
            }
            return this._dialog;
        }, _onEdit:function () {
            var selected = this._grid.getSelected();
            var dialog = this._getDialog();
            var object = this._grid.store.get(selected[0]);
            dialog.set("object", object);
            dialog.show();
        }, _onSave:function (object) {
            this._grid.store.put(object);
        }, _onSelectionChange:function () {
            var selected = this._grid.getSelected();
            var disabled = selected.length !== 1;
            this._editButton.set("disabled", disabled);
            this._editMenu.set("disabled", disabled);
        }});
    });
}, "ier/widget/listView/modules/Toolbar":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dijit/registry", "ecm/widget/listView/modules/Toolbar", "ecm/model/Desktop", "ecm/widget/ActionMenu", "ier/constants", "ier/util/menu"], function (dojo_declare, dojo_array, dojo_lang, dijit_registry, ecm_widget_listView_modules_Toolbar, ecm_model_Desktop, ActionMenu, ier_constants, ier_util_menu) {
        return dojo_declare("ier.widget.listView.modules.Toolbar", [ecm_widget_listView_modules_Toolbar], {getParentFolder:function () {
            return this.getResultSet().parentFolder;
        }, getRepository:function () {
            return this.getResultSet().repository;
        }, getResultSet:function () {
            return this.contentList.getResultSet();
        }, loadContextMenu:function (selectedItems, callback) {
            var menu = null;
            var item = selectedItems ? selectedItems[0] : null;
            if (item && (item instanceof ecm.model.AsyncTask || item instanceof ecm.model.AsyncTaskInstance)) {
                for (var i in selectedItems) {
                    var item = selectedItems[i];
                    if (item && (item instanceof ecm.model.AsyncTask || item instanceof ecm.model.AsyncTaskInstance)) {
                        if (item.hasPrivilege(ier_constants.Privilege_TaskAdmin)) {
                            item[ier_constants.Privilege_TaskUser] = true;
                        }
                    }
                }
                menu = ier_util_menu.getTaskContextMenuType(selectedItems);
                ecm_model_Desktop.loadMenuActions(menu, dojo_lang.hitch(this, function (actions) {
                    if (!this.actionMenu) {
                        this.actionMenu = new ActionMenu();
                    }
                    this.actionMenu.createMenu(actions, selectedItems, "", null, ecm.model.desktop.getAuthenticatingRepository(), null, this.contentList.getResultSet(), {widget:this.contentList});
                    this.onContextMenuCreated(this.actionMenu, selectedItems);
                    dojo_array.forEach(this.actionMenu.getChildren(), function (child) {
                        this.actionsButton.dropDown.addChild(child);
                    }, this);
                }));
            } else {
                menu = ier_util_menu.getContainersAndRecordsContextMenuType(selectedItems);
                ecm_model_Desktop.loadMenuActions(menu, callback);
            }
        }, onToolbarButtonsCreated:function (toolbarButtons) {
            this.inherited(arguments);
            dojo_array.forEach(this.getToolbarButtons(), function (toolbarButton) {
                var action = toolbarButton.action;
                if (action.id == ier_constants.Action_Refresh) {
                    this.setupRefreshAction(this.findToolbarButton(toolbarButtons, ier_constants.Action_Refresh), this.isConfigure);
                } else {
                    if (action && action.global) {
                        this.setupGlobalAction(this.findToolbarButton(toolbarButtons, action.id));
                    }
                }
            }, this);
        }, setupAddContainerButtons:function (button) {
            if (button) {
                var onClickHandler = function (evt) {
                    var button = dijit_registry.getEnclosingWidget(evt.target);
                    button.action.performAction(this.getRepository(), this.getParentFolder() ? [this.getParentFolder()] : null, null, null, this.getResultSet());
                };
                button.onClick = null;
                this.connect(button, "onClick", onClickHandler);
            }
        }, setupRefreshAction:function (refreshButton, isConfigure) {
            if (refreshButton) {
                var onClickHandler = function (evt) {
                    var button = dijit_registry.getEnclosingWidget(evt.target);
                    button.action.performAction(this.getRepository(), this.getParentFolder(), isConfigure, this.getResultSet());
                };
                refreshButton.onClick = null;
                this.connect(refreshButton, "onClick", onClickHandler);
            }
        }, setupGlobalAction:function (button) {
            if (button && button.action.id != ier_constants.Action_Refresh) {
                button.onClick = null;
                this.connect(button, "onClick", function () {
                    button.action.performAction(this.getRepository(), null, null, null, this.getResultSet());
                });
                this._handleGlobalActions(button);
            }
        }, findToolbarButton:function (toolbarButtons, actionId) {
            var toolbarButton = null;
            if (toolbarButtons) {
                for (var i in toolbarButtons) {
                    if (toolbarButtons[i].action.id == actionId) {
                        toolbarButton = toolbarButtons[i];
                        break;
                    }
                }
            }
            return toolbarButton;
        }, _handleGlobalActions:function (button) {
            var action = button.action;
            var canPerform = true;
            var privileges = {};
            var repository = this.getRepository();
            if (repository) {
                privileges = repository ? repository.privileges : null;
            }
            privileges["privTaskAdminPermission"] = ecm_model_Desktop.taskManager.isTaskAdmin();
            privileges["privTaskUserPermission"] = ecm_model_Desktop.taskManager.isTaskUser() || ecm_model_Desktop.taskManager.isTaskAdmin();
            if (action && action.privileges) {
                for (var j = 0; j < action.privileges.length; j++) {
                    var privilege = action.privileges[j];
                    if (privileges && privileges[privilege] != true) {
                        canPerform = false;
                    }
                }
            } else {
                canPerform = false;
            }
            button.set("disabled", !canPerform);
        }, updateToolbarState:function (action) {
            this.inherited(arguments);
            dojo_array.forEach(this.getToolbarButtons(), function (toolbarButton) {
                var action = toolbarButton.action;
                if (action && action.global && action.privileges && action.id != ier_constants.Action_Refresh) {
                    this._handleGlobalActions(toolbarButton);
                }
            }, this);
        }});
    });
}, "ier/widget/dialog/RecordFolderPropertiesDialog":function () {
    define(["dojo/_base/declare", "dojo/string", "dojo/_base/lang", "dojo/_base/array", "ier/constants", "ier/messages", "ier/widget/dialog/RecordContainerPropertiesDialog"], function (dojo_declare, dojo_string, dojo_lang, dojo_array, ier_constants, ier_messages, ier_dialog_IERBaseDialog) {
        return dojo_declare("ier.widget.dialog.RecordFolderPropertiesDialog", [ier_dialog_IERBaseDialog], {showDispositionPane:true, _classes:[{type:ier_constants.EntityType_ElectronicRecordFolder, name:ier_constants.ClassName_ElectronicRecordFolder}, {type:ier_constants.EntityType_PhysicalContainer, name:ier_constants.ClassName_PhysicalContainer, id:"PhysicalBox"}, {type:ier_constants.EntityType_HybridRecordFolder, name:ier_constants.ClassName_HybridRecordFolder}, {type:ier_constants.EntityType_PhysicalRecordFolder, name:ier_constants.ClassName_PhysicalRecordFolder}], _renderDialog:function () {
            this.set("title", ier_messages.recordFolder);
            this.setResizable(true);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:this.item.getContentClass().id, defaultNameProperty:ier_constants.Property_RecordFolderName, entityType:ier_constants.EntityType_RecordFolder, disableContentClassSelector:true, defaultClass:this.item.getContentClass(), item:this.item, isCreate:false, shouldGetItemAttributes:true});
            this.connect(this._entityItemDispositionPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemDispositionPane.isLoaded()) {
                    this.item.getLegacyDispositionSchedule(dojo_lang.hitch(this, function (dispSchedule) {
                        this._entityItemDispositionPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, entityItemPropertiesPane:this._entityItemPropertiesPane, legacyDispositionSchedule:dispSchedule, item:this.item});
                    }));
                }
            }));
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes) {
                this._entityItemDetailPane.createRendering(this.item, attributes);
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, this.item, this._parentFolder, contentClass, properties, !this.item.privModifyPermissions);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
            });
            this._initHoldPane();
            this._initLinksPane();
            this._initHistoryPane();
        }});
    });
}, "ier/widget/ObjectCompositeButton":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/string", "dojo/_base/connect", "dijit/focus", "dijit/_Widget", "idx/html", "ecm/LoggerMixin", "ecm/model/Desktop", "ecm/widget/CompositeButton", "ier/messages", "ier/util/util"], function (dojo_declare, dojo_lang, dojo_class, dojo_construct, dojo_style, dojo_string, dojo_connect, dijit_focus, dijit_Widget, idx_html, ecm_LoggerMixin, ecm_model_desktop, ecm_widget_CompositeButton, ier_messages, ier_util) {
        return dojo_declare("ier.widget.ObjectCompositeButton", [ecm_LoggerMixin, dijit_Widget], {ier_messages:ier_messages, _selectedItemButton:null, repository:null, showRemoveIcon:false, selectedItemLabel:null, selectedItem:null, listenToChanges:false, parentItem:null, parentItemColumn:null, postCreate:function () {
            this.inherited(arguments);
            if (this.selectedItem) {
                this._createCompositeButton(this.selectedItem);
            }
            if (this.listenToChanges) {
                this._onChangeHandler = this.connect(ecm.model.desktop, "onChange", dojo_lang.hitch(this, function (changedModel) {
                    if (changedModel && this.parentItem && this.parentItem.id == changedModel.id) {
                        this.parentItem.fetchIERObjectItem(this.parentItemColumn, dojo_lang.hitch(this, function (value) {
                            if (value != this.selectedItem) {
                                this.setSelectedItem(value);
                            }
                        }));
                    }
                }));
            }
            dojo_class.add(this.domNode, ["dijit ", "dijitReset", "dijitInline"]);
        }, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, setSelectedItem:function (item) {
            if (this._selectedItemButton) {
                this._selectedItemButton.destroy();
            }
            this.selectedItem = item;
            this._createCompositeButton(this.selectedItem);
        }, getSelectedItem:function () {
            return this.selectedItem;
        }, setLabel:function (label) {
            this.selectedItemLabel = label;
        }, setDisabled:function (disabled) {
            if (this._selectedItemButton && this.selectedItem) {
                this._selectedItemButton.set("disabled", disabled);
                if (this._selectedItemButton._actionFocusNode) {
                    if (disabled) {
                        dojo_style.set(this._selectedItemButton._actionFocusNode, "display", "none");
                    } else {
                        dojo_style.set(this._selectedItemButton._actionFocusNode, "display", "");
                    }
                }
                if (this._selectedItemButton._focusNode && this._selectedItemButton._focusNode.childNodes[0]) {
                    if (disabled) {
                        dojo_style.set(this._selectedItemButton._focusNode.childNodes[0], "color", "gray");
                    } else {
                        dojo_style.set(this._selectedItemButton._focusNode.childNodes[0], "color", "");
                    }
                }
            }
        }, _createCompositeButton:function (selectedItem) {
            if (selectedItem) {
                if (this._selectedItemButton) {
                    this._selectedItemButton.destroy();
                }
                var label = this.selectedItemLabel ? this.selectedItemLabel : selectedItem.name;
                this._selectedItemButton = new ecm_widget_CompositeButton({label:label, disabled:this.readOnly, iconClass:ier_util.getIconClass(selectedItem) + " objectIcon", actionIconClass:this.showRemoveIcon ? "removeIcon" : null, tooltip:this._getToolTip(selectedItem), actionAltText:this.showRemoveIcon ? dojo_string.substitute(ier_messages.objectSelector_remove, [selectedItem.name]) : null});
                this.connect(this._selectedItemButton, "onTitleClick", function (event) {
                    if (this.selectedItem) {
                        var actionsHandler = ecm_model_desktop.getActionsHandler();
                        var action = "actionIERProperties";
                        if (!this.selectedItem.isIERLoaded || !this.selectedItem.isIERLoaded()) {
                            this.repository.retrieveItem(this.selectedItem.id, dojo_lang.hitch(this, function (itemRetrieved) {
                                this.selectedItem = itemRetrieved;
                                this.selectedItem.IERLoaded = true;
                                if (actionsHandler && actionsHandler[action]) {
                                    actionsHandler[action](this.repository, [this.selectedItem]);
                                }
                            }), this.selectedItem.template);
                        } else {
                            if (actionsHandler && actionsHandler[action]) {
                                this.selectedItem.repository = this.repository;
                                actionsHandler[action](this.repository, [this.selectedItem]);
                            }
                        }
                        this.onItemClicked(this.selectedItem, event);
                    }
                });
                this.connect(this._selectedItemButton, "onActionButtonClick", function (event) {
                    var itemToBeRemoved = this.selectedItem;
                    this.clearItem();
                    this.onItemRemoved(itemToBeRemoved, event);
                });
                dojo_construct.place(this._selectedItemButton.domNode, this.domNode, "only");
            }
        }, clearItem:function () {
            this.selectedItem = null;
            this._selectedItemButton.destroy();
        }, _getToolTip:function (item) {
            var tooltip = [];
            tooltip.push(this._getToolTipText(dojo_string.substitute(ier_messages.objectSelector_name, [item.name])));
            if (item.getRMDescription && item.getRMDescription()) {
                tooltip.push(this._getToolTipText(dojo_string.substitute(ier_messages.objectSelector_description, [item.getRMDescription()])));
            }
            return tooltip.join("");
        }, _getToolTipText:function (name) {
            return "<div style='white-space:nowrap;'>" + idx_html.escapeHTML(name) + "</div>";
        }, _onFocusContainer:function (evt) {
            if (this._selectButton) {
                dijit_focus.focus(this._selectButton);
            }
        }, setObjectClassName:function (objectClassName) {
            this.objectClassName = objectClassName;
        }, get:function (name) {
            if (name == "displayedValue" || name == "value") {
                return this.getValue();
            } else {
                if (name == "label") {
                    return this.selectedItem ? this.selectedItem.name : "";
                } else {
                    return this.inherited(arguments);
                }
            }
        }, getValue:function () {
            return this.selectedItem ? this.selectedItem.id : "";
        }, onItemRemoved:function (selectedItem, event) {
        }, onItemClicked:function (selectedItem, event) {
        }, destroy:function () {
            if (this._onChangeHandler) {
                dojo_connect.disconnect(this._onChangeHandler);
            }
            this.inherited(arguments);
        }, _nop:null});
    });
}, "ier/model/actions/RecordPropertiesAction":function () {
    define(["dojo/_base/declare", "ecm/model/Action"], function (dojo_declare, ecm_model_action) {
        return dojo_declare("ier.model.actions.RecordPropertiesAction", [ecm_model_action], {canPerformAction:function (repository, itemList, listType, teamspace, resultSet) {
            var canPerform = this.inherited(arguments);
            if (canPerform) {
                if (itemList) {
                    if (itemList.length && itemList.length > 1) {
                        canPerform = false;
                    }
                    var item = itemList[0];
                    if (item.declaredAsRecord) {
                        canPerform = true;
                    } else {
                        canPerform = false;
                    }
                }
            }
            return canPerform;
        }});
    });
}, "ier/model/NamingPattern":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject) {
        var NamingPattern = dojo_declare("ier.model.NamingPattern", [ier_model_BaseEntityObject], {constructor:function (arguments) {
        }, getPatternName:function () {
            return this.attributes[ier_constants.Property_PatternName];
        }, isAppliedToName:function () {
            return this.attributes[ier_constants.Property_ApplyToNameOrId] == "Name";
        }});
        ier_model_BaseEntityObject.registerClass("NamingPattern", NamingPattern);
        return NamingPattern;
    });
}, "ier/widget/admin/RepositoryPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/BorderContainer", "ecm/model/Desktop", "ier/messages", "ier/model/admin/Config", "ier/util/dialog", "dojo/text!./templates/RepositoryPane.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/admin/DisplayColumnPane", "ier/widget/admin/DisplayPropertyPane", "ier/widget/admin/RepositorySecurityPane", "ier/widget/admin/RepositoryReportPane", "ier/widget/admin/RepositoryDDSweepPane"], function (declare, lang, _TemplatedMixin, _WidgetsInTemplateMixin, BorderContainer, Desktop, messages, Config, util_dialog, RepositoryPane_html) {
        return declare("ier.widget.admin.RepositoryPane", [BorderContainer, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:RepositoryPane_html, gutters:false, repositoryId:"", dirty:false, _messages:messages, buildRendering:function () {
            this.inherited(arguments);
            this._titleNode.innerHTML = messages.admin_repository_label + ": <b>" + this.title + "</b>";
        }, startup:function () {
            this.inherited(arguments);
            var repository = Desktop.getRepository(this.repositoryId);
            if (repository) {
                if (repository.isIERLoaded()) {
                    this._load(repository);
                } else {
                    repository.loadIERRepository(lang.hitch(this, function (repository) {
                        this._load(repository);
                    }));
                }
            } else {
                this._abort();
            }
        }, _load:function (repository) {
            if (repository && repository.isFilePlanRepository()) {
                Config.getConfig("repository", repository.id, lang.hitch(this, function (config) {
                    this._settingsPane.repository = repository;
                    this._settingsPane.set("config", config);
                    this.connect(this._settingsPane, "onChange", this._validate);
                    this._displayColumnPane.repository = repository;
                    this._displayColumnPane.set("config", config);
                    this._displayPropertyPane.repository = repository;
                    this._displayPropertyPane.set("config", config);
                    this._systemPropertyPane.repository = repository;
                    this._systemPropertyPane.set("config", config);
                    this._securityPane.setRepository(repository);
                    this._reportPane.setRepository(repository);
                    this._reportPane.set("config", config);
                    this._ddSweepPane.setRepository(repository);
                    this._ddSweepPane.set("config", config);
                }));
            } else {
                this._abort();
            }
        }, _abort:function () {
            util_dialog.showMessage(messages.no_fileplans_available);
            var parent = this.getParent();
            if (parent && parent.closeChild) {
                parent.closeChild(this);
            }
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "url:ier/widget/dialog/templates/HoldDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\" \r\n\t\t\ttitle=\"${_ierMessages.baseDialog_properties}\"></div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"${_ierMessages.holdDialog_conditions}\" class=\"ierDialogTabContent\">\r\n\t\t\t<div data-dojo-type=\"ier/widget/panes/HoldConditionPane\" data-dojo-attach-point=\"_conditionPane\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/EventTriggerDialog":function () {
    require({cache:{"url:ier/widget/dialog/templates/PropertyDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\" \r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"></div>\r\n\t</div>\r\n</div>\r\n"}});
    define("ier/widget/dialog/EventTriggerDialog", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/PropertyDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane"], function (dojo_declare, dojo_lang, dojo_domStyle, ier_constants, ier_messages, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.EventTriggerDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, triggerModeValue:ier_constants.EventType_InternalEventTrigger, aggregation:null, postCreate:function () {
            this.inherited(arguments);
            this.setResizable(true);
            this.addDomNodeCSSClass("ierAddTriggersDialog");
            this.addChildPane(this._propertiesPane);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, true);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this.connect(this._propertiesPane, "onCompleteRendering", function () {
                this._propertiesPane.resize();
                this.resize();
            });
        }, show:function (repository, item) {
            this.inherited("show", []);
            this.item = item;
            if (!this.item) {
                this.set("title", ier_messages.eventTriggerDialog_addTitle);
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this._applyButton.domNode.style.display = "none";
            } else {
                this.set("title", ier_messages.eventTriggerDialog_title);
            }
            this.setIntroText(ier_messages.eventTriggerDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh03.htm"));
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            this._propertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_DispositionTrigger, defaultNameProperty:ier_constants.Property_DispositionTriggerName, entityType:ier_constants.EntityType_DispositionTrigger, hideContentClassSelector:true, item:this.item, isCreate:this.item ? false : true, isReadOnly:true});
            this.triggerModeValue = this.item.attributes[ier_constants.Property_EventType];
            this.connect(this._propertiesPane, "onRenderAttributes", function (attributes) {
                if (this.triggerModeValue == ier_constants.EventType_InternalEventTrigger) {
                    for (var index in attributes) {
                        var attribute = attributes[index];
                        if (attribute.id == ier_constants.Property_DispositionTriggerName) {
                            attribute.name = ier_messages.addInternalEventTriggerDialog_internalEventName;
                        } else {
                            if (attribute.id == ier_constants.Property_RMEntityDescription) {
                                attribute.name = ier_messages.addInternalEventTriggerDialog_internalDescription;
                            } else {
                                if (attribute.id == ier_constants.Property_Aggregation) {
                                    attribute.required = true;
                                    attribute.readOnly = false;
                                    var values = attribute.allowedValues;
                                    var newValues = [];
                                    for (var i in values) {
                                        var value = values[i];
                                        if (value != ier_constants.ClassName_FilePlan) {
                                            newValues.push(value);
                                        }
                                    }
                                    attribute.allowedValues = newValues;
                                }
                            }
                        }
                        attribute.setMetaData(ier_constants.DispositionEventType, ier_constants.EventType_InternalEventTrigger);
                    }
                } else {
                    for (var index in attributes) {
                        var attribute = attributes[index];
                        if (attribute.id == ier_constants.Property_DispositionTriggerName) {
                            attribute.name = ier_messages.addExternalEventTriggerDialog_externalEventName;
                        } else {
                            if (attribute.id == ier_constants.Property_RMEntityDescription) {
                                attribute.name = ier_messages.addExternalEventTriggerDialog_externalDescription;
                            }
                        }
                        attribute.setMetaData(ier_constants.DispositionEventType, ier_constants.EventType_ExternalEventTrigger);
                    }
                }
            });
        }, validateInput:function () {
            return false;
        }, _save:function (close) {
            var properties = this._propertiesPane.getProperties();
            this.repository.addTrigger(properties, conditions, this.triggerModeValue, dojo_lang.hitch(this, function () {
                if (close) {
                    this.hide();
                }
            }));
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "ier/util/menu":function () {
    define(["dojo/_base/declare", "dojo/dom-style", "ecm/LoggerMixin", "ecm/model/AsyncTaskInstance", "ier/constants", "ier/model/_BaseEntityObject"], function (dojo_declare, dojo_style, ecm_LoggerMixin, ecm_model_AsyncTaskInstance, ier_constants, ier_model_BaseEntityObject) {
        var _MenuUtil = dojo_declare("ier.util._MenuUtil", [ecm_LoggerMixin], {getContainersAndRecordsContextMenuType:function (items, browse) {
            var contextMenuType = null;
            if (items.length == 1) {
                var item = items[0];
                if (item instanceof ier_model_BaseEntityObject) {
                    var entityType = item.getEntityType();
                    if (item.isFolder()) {
                        if (item.parent && item.parent.isIERHoldCondition) {
                            contextMenuType = ier_constants.MenuType_IERHoldConditionContainerContextMenu;
                        } else {
                            contextMenuType = this.getContainerContextMenuType(item, browse);
                        }
                    } else {
                        if (entityType == ier_constants.EntityType_ElectronicRecord || entityType == ier_constants.EntityType_EmailRecord || entityType == ier_constants.EntityType_PDFRecord || entityType == ier_constants.EntityType_PhysicalRecord) {
                            if (item.parent && item.parent.isIERHoldCondition) {
                                contextMenuType = ier_constants.MenuType_IERHoldConditionRecordContextMenu;
                            } else {
                                contextMenuType = this.getRecordContextMenuType(item);
                            }
                        } else {
                            if (entityType == ier_constants.EntityType_Hold) {
                                if (item.inPlaceOnHold) {
                                    contextMenuType = ier_constants.MenuType_IERPlaceOnHoldContextMenu;
                                } else {
                                    if (item.inRemoveHold) {
                                        contextMenuType = ier_constants.MenuType_IERRemoveHoldContextMenu;
                                    } else {
                                        contextMenuType = ier_constants.MenuType_IERHoldsConfigureContextMenu;
                                    }
                                }
                            } else {
                                if (entityType == ier_constants.EntityType_Location || entityType == ier_constants.EntityType_NamingPattern || entityType == ier_constants.EntityType_TransferMapping || entityType == ier_constants.EntityType_RecordType || entityType == ier_constants.EntityType_ReportDefinition) {
                                    contextMenuType = ier_constants.MenuType_IERCustomObjectsContextMenu;
                                } else {
                                    if (entityType == ier_constants.EntityType_DispositionSchedule || entityType == ier_constants.EntityType_DispositionAction || entityType == ier_constants.EntityType_DispositionTrigger || item.template == ier_constants.ClassName_WorkflowDefinition) {
                                        contextMenuType = ier_constants.MenuType_IERPropertiesOnlyCustomObjectsContextMenu;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    var entityType = item.entityType;
                    if (entityType && entityType == ier_constants.EntityType_ReportDefinition) {
                        contextMenuType = ier_constants.MenuType_IERReportDefinitionsConfigureContextMenu;
                    }
                }
            } else {
                if (items.length > 1 && items[0] instanceof ier_model_BaseEntityObject) {
                    var entityType = items[0].getEntityType();
                    if (entityType == ier_constants.EntityType_Hold) {
                        contextMenuType = ier_constants.MenuType_IERHoldsConfigureContextMenu;
                    } else {
                        if (entityType == ier_constants.EntityType_Location || entityType == ier_constants.EntityType_NamingPattern || entityType == ier_constants.EntityType_TransferMapping || entityType == ier_constants.EntityType_RecordType || entityType == ier_constants.EntityType_ReportDefinition) {
                            contextMenuType = ier_constants.MenuType_IERMultipleCustomObjectsContextMenu;
                        } else {
                            if (entityType == ier_constants.EntityType_DispositionSchedule || entityType == ier_constants.EntityType_DispositionAction || entityType == ier_constants.EntityType_DispositionTrigger) {
                                contextMenuType = ier_constants.MenuType_IERPropertiesOnlyCustomObjectsContextMenu;
                            } else {
                                var folderFound = false;
                                var recordFound = false;
                                for (var i in items) {
                                    if (entityType && items[i].getEntityType() != entityType) {
                                        entityType = null;
                                    }
                                    if (items[i].isFolder()) {
                                        folderFound = true;
                                    } else {
                                        recordFound = true;
                                    }
                                }
                                if (folderFound && recordFound) {
                                    contextMenuType = ier_constants.MenuType_IERMultipleContainerAndRecordContextMenu;
                                } else {
                                    if (folderFound && !recordFound) {
                                        if (entityType) {
                                            contextMenuType = this.getContainerContextMenuType(items[0], browse);
                                        } else {
                                            contextMenuType = ier_constants.MenuType_IERMultipleContainerContextMenu;
                                        }
                                    } else {
                                        if (entityType) {
                                            contextMenuType = this.getRecordContextMenuType(items[0]);
                                        } else {
                                            contextMenuType = ier_constants.MenuType_IERMultipleRecordContextMenu;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (items.length > 1) {
                        var entityType = items[0].entityType;
                        if (entityType && entityType == ier_constants.EntityType_ReportDefinition) {
                            contextMenuType = ier_constants.MenuType_IERMultipleCustomObjectsContextMenu;
                        }
                    }
                }
            }
            return contextMenuType;
        }, getRecordContextMenuType:function (item) {
            var contextMenuType = null;
            if (item && item instanceof ier_model_BaseEntityObject) {
                var entityType = item.getEntityType();
                var parentEntityType = item.parent && item.parent.entityType;
                switch (entityType) {
                  case ier_constants.EntityType_ElectronicRecord:
                  case ier_constants.EntityType_EmailRecord:
                  case ier_constants.EntityType_PDFRecord:
                    if (parentEntityType) {
                        contextMenuType = ier_constants.MenuType_IERElectronicRecordContextMenu;
                    } else {
                        contextMenuType = ier_constants.MenuType_IERSearchElectronicRecordContextMenu;
                    }
                    break;
                  case ier_constants.EntityType_PhysicalRecord:
                    if (parentEntityType) {
                        contextMenuType = ier_constants.MenuType_IERPhysicalRecordContextMenu;
                    } else {
                        contextMenuType = ier_constants.MenuType_IERSearchPhysicalRecordContextMenu;
                    }
                    break;
                  default:
                    contextMenuType = null;
                    break;
                }
            }
            return contextMenuType;
        }, getContainerContextMenuType:function (item, browse) {
            var contextMenuType = null;
            if (item && item instanceof ier_model_BaseEntityObject) {
                var entityType = item.getEntityType();
                switch (entityType) {
                  case ier_constants.EntityType_FilePlan:
                    if (browse) {
                        contextMenuType = ier_constants.MenuType_IERFilePlanContextMenu;
                    } else {
                        contextMenuType = ier_constants.MenuType_IERFilePlanConfigureContextMenu;
                    }
                    break;
                  case ier_constants.EntityType_RecordCategory:
                    contextMenuType = ier_constants.MenuType_IERRecordCategoryContextMenu;
                    break;
                  case ier_constants.EntityType_HybridRecordFolder:
                  case ier_constants.EntityType_PhysicalRecordFolder:
                  case ier_constants.EntityType_PhysicalContainer:
                    contextMenuType = ier_constants.MenuType_IERPhysicalBoxHybridRecordFolderContextMenu;
                    break;
                  case ier_constants.EntityType_ElectronicRecordFolder:
                    contextMenuType = ier_constants.MenuType_IERElectronicRecordFolderContextMenu;
                    break;
                  case ier_constants.EntityType_Volume:
                    contextMenuType = ier_constants.MenuType_IERVolumeContextMenu;
                    break;
                  default:
                    contextMenuType = null;
                    break;
                }
            }
            return contextMenuType;
        }, updateAddContainersToolbar:function (item, addRecordCategoryButton, addRecordFolderButton, addRecordVolumeButton) {
            dojo_style.set(addRecordCategoryButton.domNode, "display", "none");
            dojo_style.set(addRecordFolderButton.domNode, "display", "none");
            dojo_style.set(addRecordVolumeButton.domNode, "display", "none");
            if (item && item.getEntityType && item.getEntityType() == ier_constants.EntityType_FilePlan) {
                dojo_style.set(addRecordCategoryButton.domNode, "display", "");
            }
            if (item && item.getAllowedRMTypes && item.getAllowedRMTypes()) {
                var allowedRMContaineesArray = item.getAllowedRMTypes();
                if (allowedRMContaineesArray && allowedRMContaineesArray.length > 0) {
                    for (var i in allowedRMContaineesArray) {
                        var allowedContaineeType = allowedRMContaineesArray[i];
                        if (allowedContaineeType == ier_constants.EntityType_RecordCategory) {
                            dojo_style.set(addRecordCategoryButton.domNode, "display", "");
                        } else {
                            if (allowedContaineeType == ier_constants.EntityType_RecordFolder || allowedContaineeType == ier_constants.EntityType_ElectronicRecordFolder || allowedContaineeType == ier_constants.EntityType_PhysicalContainer || allowedContaineeType == ier_constants.EntityType_HybridRecordFolder || allowedContaineeType == ier_constants.EntityType_PhysicalRecordFolder) {
                                dojo_style.set(addRecordFolderButton.domNode, "display", "");
                            } else {
                                if (allowedContaineeType == ier_constants.EntityType_Volume) {
                                    dojo_style.set(addRecordVolumeButton.domNode, "display", "");
                                }
                            }
                        }
                    }
                }
            }
        }, getTaskContextMenuType:function (items) {
            if (items.length == 1) {
                var item = items[0];
                var handlerClass = item.attributes[ier_constants.Attribute_Type];
                if (item.isInstanceOf && item.isInstanceOf(ecm.model.AsyncTask)) {
                    var status = item.attributes.status;
                    if (status == ier_constants.TaskStatus_InProgress || status == ier_constants.TaskStatus_Init || status == ier_constants.TaskStatus_Pending) {
                        return ier_constants.MenuType_IERInProgressTaskContextMenu;
                    } else {
                        if (status == ier_constants.TaskStatus_Completed) {
                            if (item.isTaskRecurring()) {
                                return ier_constants.MenuType_IERCompletedRecurringTaskContextMenu;
                            } else {
                                if (handlerClass == ier_constants.TaskType_ReportClass) {
                                    return ier_constants.MenuType_IERReportsCompletedTaskContextMenu;
                                } else {
                                    return ier_constants.MenuType_IERCompletedTaskContextMenu;
                                }
                            }
                        } else {
                            if (status == ier_constants.TaskStatus_Scheduled) {
                                if (item.isTaskRecurring()) {
                                    return ier_constants.MenuType_IERScheduledRecurringTaskContextMenu;
                                } else {
                                    return ier_constants.MenuType_IERScheduledTaskContextMenu;
                                }
                            } else {
                                if (status == ier_constants.TaskStatus_Failed) {
                                    if (item.isTaskRecurring()) {
                                        return ier_constants.MenuType_IERFailedRecurringTaskContextMenu;
                                    } else {
                                        return ier_constants.MenuType_IERFailedTaskContextMenu;
                                    }
                                } else {
                                    if (status == ier_constants.TaskStatus_Paused) {
                                        if (item.isTaskRecurring()) {
                                            return ier_constants.MenuType_IERDisabledRecurringTaskContextMenu;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (item instanceof ecm_model_AsyncTaskInstance) {
                    var status = item.attributes.status;
                    if (status == ier_constants.TaskStatus_InProgress || status == ier_constants.TaskStatus_Init || status == ier_constants.TaskStatus_Pending) {
                        return ier_constants.MenuType_IERInProgressTaskInstanceContextMenu;
                    } else {
                        if (status == ier_constants.TaskStatus_Completed) {
                            if (handlerClass == ier_constants.TaskType_ReportClass) {
                                return ier_constants.MenuType_IERReportsCompletedTaskInstanceContextMenu;
                            } else {
                                return ier_constants.MenuType_IERCompletedTaskInstanceContextMenu;
                            }
                        } else {
                            if (status == ier_constants.TaskStatus_Scheduled) {
                                return ier_constants.MenuType_IERScheduledTaskInstanceContextMenu;
                            } else {
                                if (status == ier_constants.TaskStatus_Failed) {
                                    return ier_constants.MenuType_IERFailedTaskInstanceContextMenu;
                                }
                            }
                        }
                    }
                }
            } else {
                return ier_constants.MenuType_IERMultipleTasksContextMenu;
            }
        }, getFavoriteContextMenuType:function (items) {
            var contextMenuType = null;
            if (items && items.length > 0 && items[0].isIERFavorite) {
                var fav = items[0];
                var type = fav.item && fav.item.entityType;
                if (!type || type == "-1") {
                    type = fav.template;
                }
                switch (type) {
                  case ier_constants.EntityType_RecordCategory:
                  case ier_constants.ClassName_RecordCategory:
                    contextMenuType = ier_constants.MenuType_IERFavoriteRecordCategoryContextMenu;
                    break;
                  case ier_constants.EntityType_ElectronicRecordFolder:
                  case ier_constants.ClassName_ElectronicRecordFolder:
                    contextMenuType = ier_constants.MenuType_IERFavoriteElectronicRecordFolderContextMenu;
                    break;
                  case ier_constants.EntityType_HybridRecordFolder:
                  case ier_constants.EntityType_PhysicalRecordFolder:
                  case ier_constants.EntityType_PhysicalContainer:
                  case ier_constants.ClassName_HybridRecordFolder:
                  case ier_constants.ClassName_PhysicalRecordFolder:
                  case ier_constants.ClassName_PhysicalContainer:
                    contextMenuType = ier_constants.MenuType_IERFavoritePhysicalRecordFolderContextMenu;
                    break;
                  case ier_constants.EntityType_Volume:
                  case ier_constants.ClassName_Volume:
                    contextMenuType = ier_constants.MenuType_IERFavoriteVolumeContextMenu;
                    break;
                  case ier_constants.EntityType_Record:
                  case ier_constants.EntityType_ElectronicRecord:
                  case ier_constants.ClassName_ElectronicRecord:
                  case ier_constants.ClassName_EmailRecord:
                    contextMenuType = ier_constants.MenuType_IERFavoriteElectronicRecordContextMenu;
                    break;
                  case ier_constants.EntityType_PhysicalRecord:
                  case ier_constants.ClassName_PhysicalRecord:
                    contextMenuType = ier_constants.MenuType_IERFavoritePhysicalRecordContextMenu;
                    break;
                  default:
                    if (fav.type == "search") {
                        contextMenuType = "FavoriteSearchTemplateContextMenu";
                    } else {
                        contextMenuType = "FavoriteFolderContextMenu";
                    }
                    break;
                }
            } else {
                contextMenuType = this.getContainersAndRecordsContextMenuType(items);
            }
            return contextMenuType;
        }});
        var menuUtil = new _MenuUtil();
        return menuUtil;
    });
}, "url:ier/widget/layout/templates/AdminPane.html":"<div data-dojo-attach-point=\"containerNode\" class=\"ecmAdminPage ecmCenterPane ierAdminPane\">\r\n\t<div data-dojo-type=\"idx/layout/BorderContainer\" data-dojo-props=\"gutters: false\" class=\"contentPane\">\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'leading', splitter: true\" class=\"leadingPaneAdminOverflow\">\r\n\t\t\t<div data-dojo-type=\"ecm/widget/admin/AdminTree\" data-dojo-attach-point=\"_tree\"></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'center'\">\r\n\t\t\t<div data-dojo-type=\"ecm/widget/admin/AdminTabs\" data-dojo-attach-point=\"_tabs\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/RecordPropertiesDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-style", "dojo/string", "ier/constants", "ier/messages", "ier/util/util", "ecm/model/Request", "ier/widget/dialog/IERBaseDialog", "ecm/MessagesMixin", "dojo/text!./templates/RecordPropertiesDialogContent.html", "idx/grid/PropertyGrid", "idx/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane", "ier/widget/panes/EntityItemHoldPane", "ier/widget/panes/EntityItemLinksPane", "ier/widget/panes/EntityItemHistoryPane", "ier/widget/panes/EntityItemFoldersFiledInPane", "dijit/layout/TabContainer"], function (dojo_declare, dojo_lang, dojo_array, dom_style, dojo_string, ier_constants, ier_messages, ier_util, ecm_model_Request, ier_dialog_IERBaseDialog, ecm_MessageMixin, contentString, PropertyGrid) {
        return dojo_declare("ier.widget.dialog.RecordPropertiesDialog", [ier_dialog_IERBaseDialog, ecm_MessageMixin], {contentString:contentString, dlgTitle_editable:ier_messages.recordPropDlg_title_editable, dlgTitle_readOnly:ier_messages.recordPropDlg_title_readOnly, isReadOnly:false, showOnlyProperties:false, postMixInProperties:function () {
            this.inherited(arguments);
        }, postCreate:function () {
            this.inherited(arguments);
            this._classes = [{type:ier_constants.EntityType_Record, name:ier_constants.ClassName_Record}, {type:ier_constants.EntityType_ElectronicRecord, name:ier_constants.ClassName_ElectronicRecord}, {type:ier_constants.EntityType_EmailRecord, name:ier_constants.ClassName_EmailRecord}, {type:ier_constants.EntityType_PhysicalRecord, name:ier_constants.ClassName_PhysicalRecord}, {type:ier_constants.EntityType_PDFRecord, name:ier_constants.ClassName_Record}];
            this.addChildPane(this._entityItemPropPane);
            this.addChildPane(this._entityItemSecurityPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", true, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", true, false);
            this.connect(this._entityItemPropPane, "onPropertiesChanged", "_enableButton");
            this.connect(this._entityItemSecurityPane, "onSecuritiyChanged", "_enableButton");
            this.connect(this._entityItemFiledInPane, "onFiledInChanged", "_enableButton");
            this.connect(this, "_onClickApply", "_disableButton");
        }, setDialogMode:function (editable) {
            if (editable) {
                dom_style.set(this._saveButton.domNode, "display", "");
                dom_style.set(this._applyButton.domNode, "display", "");
                this.cancelButton.set("label", ier_messages.baseDialog_cancelButton);
            } else {
                dom_style.set(this._saveButton.domNode, "display", "none");
                dom_style.set(this._applyButton.domNode, "display", "none");
                this.cancelButton.set("label", ier_messages.baseDialog_closeButton);
            }
        }, hasEditablePane:function () {
            return !this.isReadOnly && (this.item.privModifyProperties || this.item.privModifyPermissions);
        }, show:function (repository, item) {
            this.inherited("show", []);
            this.item = item;
            this.repository = repository;
            if (this.showOnlyProperties) {
                dom_style.set(this._entityItemSecurityPane.controlButton.domNode, "display", "none");
                dom_style.set(this._entityItemFiledInPane.controlButton.domNode, "display", "none");
                dom_style.set(this._entityItemLinksPane.controlButton.domNode, "display", "none");
                dom_style.set(this._entityItemHoldPane.controlButton.domNode, "display", "none");
                dom_style.set(this._entityItemHistoryPane.controlButton.domNode, "display", "none");
            }
            this.setDialogMode(this.hasEditablePane());
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, validateInput:function () {
            var childPanes = this.getChildPanes();
            for (var i in childPanes) {
                var childPane = childPanes[i];
                if (childPane.isValidationRequired()) {
                    var validate = childPane.validate();
                    if (!validate) {
                        this._disableButton();
                        return false;
                    }
                }
            }
            this._enableButton();
            return true;
        }, _renderDialog:function () {
            this.set("title", ier_messages.record);
            this.setIntroText(ier_messages.recordPropDlg_description);
            this.setResizable(true);
            this._initPropPane();
            if (!this.showOnlyProperties) {
                this._initSecurityPane();
                this._initFiledInPane();
                this._initHoldPane();
                this._initLinksPane();
                this._initHistoryPane();
            }
        }, _initPropPane:function () {
            this._entityItemPropPane.createRendering({repository:this.repository, parentFolder:this.item.parent, rootClassId:this.item.getContentClass().id, defaultNameProperty:ier_constants.Property_Name, entityType:ier_constants.EntityType_Record, disableContentClassSelector:true, defaultClass:this.item.getContentClass(), item:this.item, isCreate:false, isReadOnly:this.isReadOnly});
            this.connect(this._entityItemPropPane, "onRenderAttributes", function (attributes, deferArray) {
                this._entityItemDetailPane.createRendering(this.item, attributes);
            });
        }, _initFiledInPane:function () {
            this._entityItemFiledInPane.setItem(this.item);
            this._entityItemFiledInPane.render();
        }, _initSecurityPane:function () {
            this.connect(this._entityItemPropPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropPane.getContentClass();
                var properties = this._entityItemPropPane.getProperties();
                if (!this.showOnlyProperties) {
                    this._entityItemSecurityPane.createRendering(this.repository, this.item, this._parentFolder, contentClass, properties, !this.item.privModifyPermissions);
                }
                this._entityItemPropPane.resizeCommonProperties();
                this.resize();
            });
        }, _initHoldPane:function () {
            this.connect(this._entityItemHoldPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemHoldPane.isLoaded()) {
                    this._entityItemHoldPane.createRendering(this.repository, this.item);
                }
            }));
        }, _initLinksPane:function () {
            this.connect(this._entityItemLinksPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemLinksPane.isLoaded()) {
                    this._entityItemLinksPane.createRendering(this.repository, this.item);
                }
            }));
        }, _initHistoryPane:function () {
            this.connect(this._entityItemHistoryPane, "onShow", dojo_lang.hitch(this, function () {
                if (!this._entityItemHistoryPane.isLoaded()) {
                    this._entityItemHistoryPane.createRendering(this.repository, this.item);
                }
            }));
        }, _onClickApply:function () {
            this._submitChanges(false);
        }, _onClickSave:function () {
            this._submitChanges(true);
        }, _submitChanges:function (closeDlg) {
            var className = this._entityItemPropPane.getContentClass().id;
            var properties = this._entityItemPropPane.getProperties();
            var permissions = this._entityItemSecurityPane.getPermissions();
            var securityParentId = this._entityItemFiledInPane.getSecurityParentItemId();
            this._updateEntityItem(className, properties, permissions, null, securityParentId, closeDlg);
        }, _updateEntityItem:function (className, criterias, permissions, dispScheduleId, securityParentId, closeDlg) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                this.item.permissions = null;
                this.item.retrieveAttributes(null, false);
                if (closeDlg) {
                    this.onCancel();
                }
            }));
            params.requestParams[ier_constants.Param_RecordId] = this.item.id;
            params.requestParams[ier_constants.Param_RecordClass] = className;
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            data[ier_constants.Param_SecurityParentItemId] = securityParentId;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_EditRecord, ier_constants.PostEncoding, params);
        }, _enableButton:function () {
            this._saveButton.set("disabled", false);
            this._applyButton.set("disabled", false);
        }, _disableButton:function () {
            this._saveButton.set("disabled", true);
            this._applyButton.set("disabled", true);
        }});
    });
}, "ier/widget/tasks/DDSweepTaskInformationPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-style", "dojo/dom-geometry", "dijit/layout/ContentPane", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ier/constants", "ier/messages", "ier/widget/tasks/TaskInformationPane", "ier/widget/tasks/TaskDetailsPane", "ier/widget/tasks/TaskParametersPane", "ier/widget/tasks/DDSweepTaskResultsPane", "ier/widget/tasks/TaskErrorPane", "ier/widget/tasks/TaskExecutionRecordPane", "dojo/text!./templates/TaskInformationPane.html", "ier/widget/tasks/ReportTaskDetailsPane", "idx/layout/HeaderPane"], function (dojo_declare, dojo_lang, dojo_connect, dojo_style, dojo_geo, dijit_layout_ContentPane, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ier_constants, ier_messages, ier_widget_TaskInformationPane, TaskDetailsPane, TaskParametersPane, DDSweepTaskResultsPane, TaskErrorPane, TaskEexecutionRecordPane, templateString) {
        return dojo_declare("ier.widget.tasks.DDSweepTaskInformationPane", [ier_widget_TaskInformationPane], {templateString:templateString, widgetsInTemplate:true, setUpTabs:function () {
            this.detailsTab = new TaskDetailsPane({UUID:"details", title:ier_messages.taskPane_previewDetails, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.detailsTab);
            this.parametersTab = new TaskParametersPane({UUID:"parameters", title:ier_messages.taskPane_previewParameters, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.parametersTab);
            this.resultsTab = new DDSweepTaskResultsPane({UUID:"results", title:ier_messages.taskPane_previewResults, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.resultsTab);
            this.errorsTab = new TaskErrorPane({UUID:"errors", title:ier_messages.taskPane_previewErrors, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.errorsTab);
            this.taskInstancesTab = new TaskEexecutionRecordPane({UUID:"asyncTaskInstances", title:ier_messages.taskPane_previewExecutionRecords, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.taskInstancesTab);
        }});
    });
}, "ier/widget/admin/RepositoryDDSweepPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-construct", "dojo/dom-class", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ier/messages", "ier/constants", "ier/model/admin/Config", "ier/widget/_FolderSelectorDropDown", "ecm/widget/FolderSelectorCallback", "ier/widget/ObjectSelector", "dojo/text!./templates/RepositoryDDSweepPane.html", "ecm/widget/HoverHelp", "ecm/widget/ValidationTextBox", "idx/layout/TitlePane"], function (declare, lang, connect, dom_construct, dom_class, dijit_layout_ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, messages, ier_constants, Config, FolderSelectorDropDown, FolderSelectorCallback, ObjectSelector, template) {
        return declare("ier.widget.admin.RepositoryDDSweepPane", [dijit_layout_ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:template, repository:null, config:null, dirty:false, valid:true, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._createFolderSelector();
            this.connect(this._alwaysDeclaredRecordSelect, "onChange", function () {
                if (this._alwaysDeclaredRecordSelect.get("value") == "true") {
                    this._disableRecordContainerSelector(false);
                } else {
                    this._disableRecordContainerSelector(true);
                }
                this._validate(true);
            });
            this.connect(this._alwaysShowDeclareResultSelect, "onChange", this._validate);
            this.connect(this._saveButton, "onClick", this._save);
            this.connect(this._resetButton, "onClick", this._reset);
            this.connect(this._clearButton, "onClick", this._clearValue);
            this._saveButton.set("disabled", true);
            this._resetButton.set("disabled", true);
        }, _disableRecordContainerSelector:function (disable) {
            if (disable) {
                dom_class.add(this._recordContainerDirectorySelector.domNode, "dijitComboBoxDisabled");
                this._recordContainerDirectorySelector.setDisabled(true);
                this._clearButton.set("disabled", true);
            } else {
                dom_class.remove(this._recordContainerDirectorySelector.domNode, "dijitComboBoxDisabled");
                this._recordContainerDirectorySelector.setDisabled(false);
                this._clearButton.set("disabled", false);
            }
            this._alwaysShowDeclareResultSelect.set("disabled", disable);
        }, _createWorkflowSelector:function (repository) {
            if (!this._defaultDDWorkflowSelector) {
                this._defaultDDWorkflowSelector = new ObjectSelector({id:this.id + "_defaultDDWorkflow", label:messages.repositoryDDSweepPane_defaultWorkflow, labelId:this.id + "_defaultDDWorkflowLabel", showVersionSelection:true, type:ier_constants.WorkflowType_BasicSchedule});
                dom_construct.place(this._defaultDDWorkflowSelector.domNode, this._defaultDDWorkflowSelectorContainer, "only");
            }
            this._defaultDDWorkflowSelector.setRepository(repository);
            this._defaultDDWorkflowSelector.setObjectClassName(ier_constants.ClassName_WorkflowDefinition);
            if (this._defaultDDWorkflowSelector) {
                this.connect(this._defaultDDWorkflowSelector, "onChange", function () {
                    this._validate(true);
                });
            }
        }, _createFolderSelector:function () {
            if (this._recordContainerDirectorySelector) {
                this._recordContainerDirectorySelector.destroy();
                connect.disconnect(this._onFolderSelectedHandler);
            }
            this._recordContainerDirectorySelector = new FolderSelectorDropDown({preventSelectRoot:true});
            dom_construct.place(this._recordContainerDirectorySelector.domNode, this._recordContainerDirectorySelectorContainer, "only");
            var folderSelectorCallback = new FolderSelectorCallback(ier_constants.Privilege_CanDeclareRecordToContainer, messages.declareRecordDialog_notAllowedToDeclareToFolder);
            this._recordContainerDirectorySelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            this._onFolderSelectedHandler = this.connect(this._recordContainerDirectorySelector, "onFolderSelected", function () {
                this._validate(true);
                this._clearButton.set("disabled", false);
            });
        }, setRepository:function (repository) {
            this.repository = repository;
            this._recordContainerDirectorySelector.setRoot(repository);
            this._createWorkflowSelector(repository);
        }, _setConfigAttr:function (config) {
            this._set("config", config);
            this._reset();
        }, _save:function () {
            if (this.config) {
                if (!this._recordContainerDirectorySelector.disabled) {
                    var folder = this._recordContainerDirectorySelector.getSelected();
                    if (folder) {
                        folder = folder.item.id;
                    }
                    this.config.set("defensibleDisposalRecordContainerId", folder || "");
                } else {
                    this.config.set("defensibleDisposalRecordContainerId", "");
                }
                var workflow = this._defaultDDWorkflowSelector.get("value");
                this.config.set("defensibleDisposalWorkflowId", workflow || "");
                this.config.set("defensibleSweepAlwaysDeclareRecord", this._alwaysDeclaredRecordSelect.get("value"));
                if (!this._alwaysShowDeclareResultSelect.disabled) {
                    this.config.set("defensibleSweepAlwaysShowDeclareResult", this._alwaysShowDeclareResultSelect.get("value"));
                } else {
                    this.config.set("defensibleSweepAlwaysShowDeclareResult", "");
                }
                Config.saveConfig(this.config, lang.hitch(this, function () {
                    this._validate(false);
                    this.repository.defensibleSweepSettings.defensibleSweepAlwaysDeclareRecord = this.config.get("defensibleSweepAlwaysDeclareRecord");
                    this.repository.defensibleSweepSettings.defensibleSweepAlwaysShowDeclareResult = this.config.get("defensibleSweepAlwaysShowDeclareResult");
                    this.repository.defensibleSweepSettings.defensibleDisposalRecordContainerId = this.config.get("defensibleDisposalRecordContainerId");
                    this.repository.defensibleSweepSettings.defensibleDisposalWorkflowId = this.config.get("defensibleDisposalWorkflowId");
                }));
            }
        }, _clearValue:function () {
            this._createFolderSelector();
            this._clearButton.set("disabled", true);
            this._recordContainerDirectorySelector.setRoot(this.repository);
            this._validate(true);
        }, _reset:function () {
            if (this.config) {
                this._recordContainerDirectorySelector.repository = this.repository;
                var output = this.config.get("defensibleDisposalRecordContainerId");
                var path = output;
                if (output) {
                    if (lang.isArray(output)) {
                        path = output[0] + "," + output[1] + "," + output[2];
                    }
                    this.repository.retrieveItem(path, lang.hitch(this, function (itemRetrieved) {
                        this._recordContainerDirectorySelector.setSelected(itemRetrieved);
                    }));
                    this._clearButton.set("disabled", false);
                } else {
                    this._clearValue();
                }
                output = this.config.get("defensibleDisposalWorkflowId");
                path = output;
                if (output) {
                    if (lang.isArray(output)) {
                        path = output[0] + "," + output[1] + "," + output[2];
                    }
                    if (this._defaultDDWorkflowSelector) {
                        this.repository.retrieveItem(path, lang.hitch(this, function (itemRetrieved) {
                            this._defaultDDWorkflowSelector.setSelectedItem(itemRetrieved);
                        }), "WorkflowDefinition");
                    }
                } else {
                    this._defaultDDWorkflowSelector.clearItem();
                }
                var value = this.config.get("defensibleSweepAlwaysDeclareRecord");
                this._alwaysDeclaredRecordSelect.set("value", value != null ? String(value) : "true");
                value = this.config.get("defensibleSweepAlwaysShowDeclareResult");
                this._alwaysShowDeclareResultSelect.set("value", value != null ? String(value) : "false");
                if (this._alwaysDeclaredRecordSelect.get("value") == "true") {
                    this._disableRecordContainerSelector(false);
                } else {
                    this._disableRecordContainerSelector(true);
                }
                this._validate(false);
            }
        }, _setValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this._saveButton.set("disabled", !dirty || !this.valid);
            this._resetButton.set("disabled", !dirty);
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/model/RMContainerMixin":function () {
    define("ier/model/RMContainerMixin", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util) {
        return dojo_declare("ier.model.RMContainerMixin", null, {isDefensibleDisposal:function () {
            var triggerPropertyName = this.attributes[ier_constants.Property_RMRetentionTriggerPropertyName];
            var retentionPeriod = this.attributes[ier_constants.Property_RMRetentionPeriod];
            return (triggerPropertyName != null && triggerPropertyName.length > 0 && retentionPeriod != null && retentionPeriod.length > 0);
        }});
    });
}, "url:ier/widget/admin/templates/GeneralSettingsPane.html":"<div class=\"ierAdminContent\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_browseConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span>${_messages.admin_browseSettings_label}:</label>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input id=\"${id}_folderOnlyBox\" data-dojo-type=\"dijit/form/CheckBox\" data-dojo-attach-point=\"_folderOnlyBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"intermediateChanges: true\"/>\r\n\t\t\t\t\t\t<label for=\"${id}_folderOnlyBox\">${_messages.admin_browseFolderOnly}</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<input id=\"${id}_disableSortBox\" data-dojo-type=\"dijit/form/CheckBox\" data-dojo-attach-point=\"_disableSortBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"intermediateChanges: true\"/>\r\n\t\t\t\t\t\t<label for=\"${id}_disableSortBox\" data-dojo-attach-point=\"_disableSortLabel\">${_messages.admin_browseDisableSort}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_browseDisableSort_tooltip}\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_taskManagerConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_taskManagerLogDirectory\">${_messages.admin_generalTaskManagerLogDirectory}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_generalTaskManagerLogDirectory_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_taskManagerLogDirectory\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_taskManagerLogDirectory\" \r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" open=\"true\" title=\"${_messages.admin_cbrPageSizeConfigurations}\" style=\"margin-top:10px; margin-left: -0px\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_cbrPageSize\">${_messages.admin_generalCBRPageSize}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_generalCBRPageSize_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t                    \t<!-- data-dojo-attach-event=\"onKeyUp: _onFieldChange\"  -->\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t                    <div id=\"${id}_cbrPageSize\"  \r\n\t                    \tdata-dojo-attach-point=\"_cbrPageSize\" \r\n\t                    \tvalue=\"50\"\r\n\t                    \tinvalidMessage=\"${ecmMessages.property_integer_invalid}\" constraints=\"{min:30, max:200, places:0}\" \r\n\t                    \tdata-dojo-type=\"ecm.widget.NumberTextBox\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n</div>\r\n", "ier/widget/MultipleFoldersDropDown":function () {
    require({cache:{"url:ier/widget/templates/MultipleFoldersDropDown.html":"<div data-dojo-attach-point=\"containerNode\">\r\n</div>"}});
    define("ier/widget/MultipleFoldersDropDown", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-class", "dojo/dom-style", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/focus", "ecm/widget/UnselectableFolder", "ier/messages", "ier/widget/FolderSelector", "dojo/text!./templates/MultipleFoldersDropDown.html"], function (dojo_declare, dojo_lang, dojo_connect, dojo_domClass, dojo_domStyle, ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, dijit_focus, UnselectableFolder, ier_messages, FolderSelector, template) {
        return dojo_declare("ier.widget.MultipleFoldersDropDown", [ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:template, widgetsInTemplate:true, repository:null, unselectableFolders:null, constructor:function () {
            this.unselectableFolders = [];
        }, postCreate:function () {
            this.inherited(arguments);
            this._folderSelector = new FolderSelector({preventSelectRoot:true, showIncludeSubfolders:false, selectRootInitially:false, "style":"inline"});
            this._folderSelector.startup();
            dojo_domStyle.set(this._folderSelector.domNode, "height", "350px");
            dojo_domStyle.set(this._folderSelector.domNode, "width", "300px");
            this.connect(this._folderSelector, "onFolderSelect", function (folder) {
                this.addUnselectableFolder(folder);
                this.onFolderSelected(folder);
            });
            this._folderSelector.setRoot(this.repository);
            this.containerNode.appendChild(this._folderSelector.domNode);
        }, addUnselectableFolder:function (item) {
            this.unselectableFolders.push(new UnselectableFolder(item.id, false));
            this._folderSelector.setUnselectableFolders(this.unselectableFolders);
        }, removeUnselectableFolder:function (item) {
            for (var i in this.unselectableFolders) {
                if (this.unselectableFolders[i].id == item.id) {
                    this.unselectableFolders.splice(i);
                }
            }
            this._folderSelector.setUnselectableFolders(this.unselectableFolders);
        }, focus:function () {
            this._folderSelector.selectRootNode();
        }, resize:function () {
            if (this._folderSelector) {
                this._folderSelector.resize();
            }
            this.inherited(arguments);
        }, onFolderSelected:function (item) {
        }});
    });
}, "ier/widget/DispositionPropagationSelector":function () {
    define(["dojo/_base/declare", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ier/messages", "ier/constants", "dojo/text!./templates/DispositionPropagationSelector.html", "dijit/form/Select", "dijit/layout/ContentPane", "ecm/widget/HoverHelp"], function (dojo_declare, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ier_messages, ier_constants, templateString) {
        return dojo_declare("ier.widget.DispositionPropagationSelector", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, constants:ier_constants, messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.connect(this._dispositionPropagationSelect, "onChange", function (value) {
                this._setPropagationHoverHelp();
            });
            this._setPropagationHoverHelp();
        }, onChange:function () {
        }, _setPropagationHoverHelp:function () {
            var level = this._dispositionPropagationSelect.get("value");
            if (level == ier_constants.SchedulePropagation_None) {
                this.propagationHoverHelp.set("message", ier_messages.entityItemDispositionPane_noPropagationHoverHelp);
            } else {
                if (level == ier_constants.SchedulePropagation_ToAllInheritingEntities) {
                    this.propagationHoverHelp.set("message", ier_messages.entityItemDispositionPane_allInheritorsHoverHelp);
                } else {
                    if (level == ier_constants.SchedulePropagation_ToImmediateSubContainersAndInheritingEntities) {
                        this.propagationHoverHelp.set("message", ier_messages.entityItemDispositionPane_allImmediateSubcontainersAndInheritorsHoverHelp);
                    } else {
                        if (level == ier_constants.SchedulePropagation_ToAllNonAssignedSubContainers) {
                            this.propagationHoverHelp.set("message", ier_messages.entityItemDispositionPane_allNonAssignedSubcontainersHoverHelp);
                        }
                    }
                }
            }
        }, _getDisabledAttr:function () {
            return this._dispositionPropagationSelect.get("disabled");
        }, _setDisabledAttr:function (disabled) {
            this.propagationHoverHelp.set("disabled", disabled);
            this._dispositionPropagationSelect.set("disabled", disabled);
        }, _getValueAttr:function () {
            return this._dispositionPropagationSelect.get("value");
        }, _setValueAttr:function (level) {
            this._dispositionPropagationSelect.set("value", level);
        }, _nop:null});
    });
}, "ier/widget/layout/ConfigureFlyoutPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/data/ItemFileReadStore", "dijit/ToolbarSeparator", "dijit/form/Button", "ecm/model/Desktop", "ecm/widget/layout/_RepositorySelectorMixin", "ecm/widget/layout/_LaunchBarDialogPane", "ier/widget/TilesList", "ier/constants", "ier/messages", "dojo/text!./templates/FlyoutPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_lang, dojo_data_ItemFileReadStore, dijit_ToolbarSeparator, dijit_form_Button, ecm_model_desktop, ecm_widget_layout_RepositorySelectorMixin, ecm_widget_layout_LaunchBarDialogPane, ier_widget_TilesList, ier_constants, ier_messages, templateString) {
        return dojo_declare("ier.widget.layout.ConfigureFlyoutPane", [ecm_widget_layout_LaunchBarDialogPane, ecm_widget_layout_RepositorySelectorMixin], {templateString:templateString, widgetsInTemplate:true, postCreate:function () {
            this.inherited(arguments);
            this.createRepositorySelector();
            this.setRepositoryTypes("p8");
            this.doRepositorySelectorConnections();
            if (this.repositorySelector.getNumRepositories() > 1) {
                this.topPane.domNode.appendChild(this.repositorySelector.domNode);
            }
        }, setRepository:function (repository) {
            this.repository = repository;
            if (this.repository) {
                this.repositorySelector.getDropdown().set("value", this.repository.id);
            }
        }, loadContent:function () {
            this.setPaneDefaultLayoutRepository();
            if (this.repository) {
                this.setRepository(this.repository);
                this.tileList = ier_widget_TilesList();
                this.bottomPane.domNode.appendChild(this.tileList.domNode);
                this.tileList.startup();
                this.tileList.setStore(this._getLinksStore());
                this.tileList.filter.destroy();
                this._loadActions();
                this.connect(this.tileList, "onItemSelected", function (selectedItem) {
                    var item = selectedItem.item;
                    this.selectContentPane(ier_constants.Feature_IERConfigure, {repository:this.repository, id:item.id[0], entityType:item.entityType[0], className:item.name[0]});
                    this.closePopup();
                });
                this.isLoaded = true;
                this.needReset = false;
            }
        }, reset:function () {
            this.setRepository(this.repository, true);
        }, _getLinksStore:function (repository) {
            var items = [];
            items.push(this._createEntry(ier_constants.ClassName_DispositionSchedule, ier_constants.EntityType_DispositionSchedule, "dispositionScheduleIcon", ier_messages.configurePane_dispositionSchedules));
            items.push(this._createEntry(ier_constants.ClassName_Hold, ier_constants.EntityType_Hold, "onHoldIcon", ier_messages.configurePane_holds));
            items.push(this._createEntry(ier_constants.ClassName_Location, ier_constants.EntityType_Location, "locationIcon", ier_messages.configurePane_locations));
            items.push(this._createEntry(ier_constants.ClassName_DispositionAction, ier_constants.EntityType_DispositionAction, "dispositionActionIcon", ier_messages.configurePane_actions));
            items.push(this._createEntry(ier_constants.ClassName_DispositionTrigger, ier_constants.EntityType_DispositionTrigger, "dispositionTriggerIcon", ier_messages.configurePane_triggers));
            items.push(this._createEntry(ier_constants.ClassName_NamingPattern, ier_constants.EntityType_NamingPattern, "namingPatternIcon", ier_messages.configurePane_namingPatterns));
            var store = new dojo_data_ItemFileReadStore({data:{items:items, identifier:"id"}});
            return store;
        }, _createEntry:function (className, entityType, iconClass, title) {
            var entry = {id:entityType, name:className, entityType:entityType, iconClass:iconClass, title:title};
            return entry;
        }, _loadActions:function () {
            var buttons = [];
            var self = this;
            ecm_model_desktop.loadActions(ier_constants.MenuType_IERConfigureFlyoutToolbarMenu, dojo_lang.hitch(this, function (actions) {
                for (var i in actions) {
                    var action = actions[i];
                    if (action.id == "Separator") {
                        var separator = new dijit_ToolbarSeparator();
                        buttons.push(separator);
                    } else {
                        var toolbarButton = new dijit_form_Button({label:action.name});
                        toolbarButton.action = action;
                        this.connect(toolbarButton, "onClick", function () {
                            toolbarButton.action.performAction(self.repository);
                        });
                        buttons.push(toolbarButton);
                    }
                }
                self.tileList.setActions(buttons);
            }));
        }});
    });
}, "ier/widget/dialog/DeclareRecordDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-attr", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/DeclareRecordDialog.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/RecordDeclareGeneralPane", "ier/widget/panes/RecordDeclarePropertiesPane"], function (dojo_declare, dojo_lang, dojo_attr, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.DeclareRecordDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _parentFolder:null, _firstFocusItem:this.titleNode, tabStart:this.titleNode, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._recordDeclareGeneralPane);
            this.addChildPane(this._recordDeclarePropertiesPane);
            this.addButton(ier_messages.declareRecordDialog_declare, "_onClickDeclare", true, true);
            this._firstFocusItem = this.titleNode;
            this.tabStart = this.titleNode;
        }, show:function (repository, items, parentFolder) {
            this.inherited("show", []);
            this._parentFolder = parentFolder;
            this._items = items;
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            this.setTitle(ier_messages.declareRecordDialog_title);
            this.setIntroText(ier_messages.declareRecordDialog_info);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh12.htm"));
            this._recordDeclareGeneralPane.createRendering(this.repository, this);
            this._recordDeclarePropertiesPane.createRendering(this.repository, this._items);
            if (this._recordDeclarePropertiesPane.getFilePlanRepositories().length == 1) {
                this.setMessage(ier_messages.error_noFilePlanRepositoriesAvailableForDeclare);
            } else {
                this.clearMessage();
            }
            this.connect(this._recordDeclarePropertiesPane, "onCompleteRendering", function () {
                this._recordDeclarePropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _onClickDeclare:function () {
            if (this.validateInput()) {
                var items = this._items;
                var repository = this.repository;
                var properties = this._recordDeclarePropertiesPane.getClassProperties();
                var data = new Object();
                data[ier_constants.Param_Properties] = properties;
                var serviceParams = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    this.onCancel();
                    for (var i in items) {
                        items[i].privileges = items[i].privileges ^ ecm.model.Item.PrivilegeToBitmask["privIERRecordDeclare"];
                        items[i].declaredAsRecord = "true";
                        items[i].onChange([items[i]]);
                    }
                }));
                serviceParams.requestParams[ier_constants.Param_FilePlanRepositoryNexusId] = this._recordDeclarePropertiesPane.getFilePlanRepository().id;
                serviceParams.requestParams[ier_constants.Param_NumberOfDocuments] = items.length;
                serviceParams.requestParams[ier_constants.Param_FilePlanRepositoryFolderLocation] = this._recordDeclarePropertiesPane.getFPRepositoryLocation();
                serviceParams.requestParams[ier_constants.Param_RecordClass] = this._recordDeclarePropertiesPane.getRecordClassSymbolicName();
                serviceParams.requestParams[ier_constants.Param_Properties] = properties;
                serviceParams["requestBody"] = data;
                for (var i in items) {
                    serviceParams.requestParams[ier_constants.Param_DocId + i] = items[i].id;
                }
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_Declare, ier_constants.PostEncoding, serviceParams);
            }
        }});
    });
}, "url:ier/widget/dialog/templates/RelocateContainerDialogContent.html":"<div data-dojo-type=\"dijit.layout.BorderContainer\" class=\"ierDialogContent\"\r\n\tdata-dojo-props=\"gutters:false\">\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\"\r\n\t\tdata-dojo-props=\"region:'center'\">\r\n\t\t<div data-dojo-attach-point=\"_relocateContainerGeneralPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.RelocateContainerGeneralPane\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/dialog/AddReportDefinitionDialog":function () {
    define("ier/widget/dialog/AddReportDefinitionDialog", ["dojo/_base/declare", "dojo/_base/lang", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialog", "ier/widget/dialog/ReportDefinitionDialog", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane", "ier/widget/panes/ReportDefinitionQueryPane", "ier/widget/panes/ReportDefinitionPropertiesPane"], function (dojo_declare, dojo_lang, ier_constants, ier_messages, ier_dialog_IERBaseDialog, ier_dialog_ReportDefinitionDialog) {
        return dojo_declare("ier.widget.dialog.AddReportDefinitionDialog", [ier_dialog_ReportDefinitionDialog], {ier_messages:ier_messages, showSecurity:true, postCreate:function () {
            this.inherited(arguments);
            this.showSecurity = ecm.model.desktop.showSecurity;
        }});
    });
}, "ier/model/RecordFolder":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject", "ier/model/RecordContainerMixin", "ier/model/RecordFolderContainerMixin", "ier/model/RecordVolumeContainerMixin", "ier/model/RMContainerMixin"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RecordFolderContainerMixin, ier_model_RecordVolumeContainerMixin, ier_model_RMContainerMixin) {
        var RecordFolder = dojo_declare("ier.model.RecordFolder", [ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RecordFolderContainerMixin, ier_model_RecordVolumeContainerMixin, ier_model_RMContainerMixin], {constructor:function (arguments) {
        }});
        ier_model_BaseEntityObject.registerClass("RecordFolder", RecordFolder);
        return RecordFolder;
    });
}, "ier/widget/dialog/AddFilePlanDialog":function () {
    require({cache:{"url:ier/widget/dialog/templates/AddFilePlanDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_filePlanRepositoryPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/FilePlanRepositoryPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier/widget/panes/EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/dialog/AddFilePlanDialog", ["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/model/ResultSet", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/AddFilePlanDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/FilePlanRepositoryPane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_lang, ecm_model_desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_model_ResultSet, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.AddFilePlanDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _messages:ier_messages, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._filePlanRepositoryPane);
            this.addChildPane(this._entityItemPropertiesPane);
            if (ecm_model_desktop.showSecurity) {
                this.addChildPane(this._entityItemSecurityPane);
            } else {
                this._entityItemSecurityPane.getParent().domNode.style.display = "none";
            }
            this.addButton(ier_messages.baseDialog_addButton, "_onClickAdd", true, true);
        }, show:function (repository) {
            this.inherited("show", arguments);
            this.repository = repository;
            if (!this.repository || this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderDialog:function () {
            this.set("title", ier_messages.addFilePlanDialog_title);
            this.getDefaultButton().set("label", this._ierMessages.baseDialog_addButton);
            this.setIntroText(ier_messages.addFilePlanDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh01.htm"));
            this.setResizable(true);
            this._filePlanRepositoryPane.createRendering(this.repository, null, true);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_FilePlan, entityType:ier_constants.EntityType_FilePlan, hideContentClassSelector:true, item:null, isReadOnly:this._isReadOnly});
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes) {
                for (var index in attributes) {
                    var attribute = attributes[index];
                    if (attribute.id == ier_constants.Property_RetainMetadata) {
                        attribute.defaultValue = 1;
                        break;
                    }
                }
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, null, null, contentClass, properties, this._isReadOnly);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _addFilePlan:function (className, criterias, permissions) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                var resultSet = new ier_model_ResultSet(response);
                var items = resultSet.getItems();
                this.repository.clearFilePlans();
                this.repository.onConfigure(this.repository, items);
                this.onCancel();
            }));
            params.requestParams[ier_constants.Param_FilePlanRepositoryId] = this.repository.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateFilePlan, ier_constants.PostEncoding, params);
        }, _onClickAdd:function () {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var className = this._entityItemPropertiesPane.getContentClass().id;
                this._addFilePlan(className, properties, permissions);
            }
        }});
    });
}, "ier/widget/dialog/AddRecordVolumeDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Deferred", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/model/RecordVolumeContainerMixin", "ier/widget/dialog/IERBaseDialog", "ier/util/util", "dojo/text!./templates/AddRecordVolumeDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemGeneralPane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_lang, dojo_deferred, ecm_model_desktop, ecm_model_Request, ier_constants, ier_messages, ier_model_RecordVolumeContainerMixin, ier_dialog_IERBaseDialog, ier_util, contentString) {
        return dojo_declare("ier.widget.dialog.AddRecordVolumeDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, parentFolder:null, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemGeneralPane);
            this.addChildPane(this._entityItemPropertiesPane);
            if (ecm_model_desktop.showSecurity) {
                this.addChildPane(this._entityItemSecurityPane);
            } else {
                this._entityItemSecurityPane.getParent().domNode.style.display = "none";
            }
            this.addButton(ier_messages.baseDialog_addButton, "_onClickAdd", true, true);
        }, show:function (repository, parentFolder, item) {
            this.inherited("show", []);
            this.parentFolder = parentFolder;
            this.item = item;
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderDialog:function () {
            if (this.item) {
                this.set("title", ier_messages.addRecordVolumeDialog_editTitle);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_updateButton);
            } else {
                this.set("title", ier_messages.addRecordVolumeDialog_title);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_addButton);
            }
            this.setIntroText(ier_messages.addRecordVolumeDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh07.htm"));
            this.setResizable(true);
            this._entityItemGeneralPane.createRendering(this.repository, this.parentFolder);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this.parentFolder, rootClassId:ier_constants.ClassName_Volume, defaultNameProperty:ier_constants.Property_VolumeName, entityType:ier_constants.EntityType_RecordVolume, hideContentClassSelector:true, item:this.item});
            this._entityItemPropertiesPane.enableAndSetNamingPattern(ier_constants.Property_VolumeName, null);
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes, deferArray) {
                this._entityItemPropertiesPane.setReviewerAndCurrentDate(attributes, deferArray);
                var deferred = new dojo_deferred();
                deferArray.push(deferred);
                var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    if (response.name) {
                        this.volumeName = response.name;
                        var volumeAttr = this._entityItemPropertiesPane.getAttributeDefinition(ier_constants.Property_VolumeName, attributes);
                        if (volumeAttr) {
                            volumeAttr.defaultValue = this.volumeName;
                        }
                    }
                    deferred.resolve();
                }));
                params.requestParams[ier_constants.Param_Id] = this.parentFolder.id;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetNextVolumeName, ier_constants.PostEncoding, params);
                this._entityItemPropertiesPane.setReviewerAndCurrentDate(attributes, deferArray);
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, null, this.parentFolder, contentClass, properties);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _addEntityItem:function (className, criterias, permissions) {
            if (this.parentFolder.isInstanceOf(ier_model_RecordVolumeContainerMixin)) {
                this.parentFolder.addRecordVolume(className, criterias, permissions, dojo_lang.hitch(this, function (recordVolume) {
                    if (this.parentFolder) {
                        this.parentFolder.refresh();
                    }
                    this.onCancel();
                }));
            }
        }, _onClickAdd:function () {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var className = this._entityItemPropertiesPane.getContentClass().id;
                this._addEntityItem(className, properties, permissions);
            }
        }});
    });
}, "ier/widget/ObjectSelector":function () {
    require({cache:{"url:ier/widget/templates/ObjectSelector.html":"<div class=\"ierObjectSelector noFocus dijitInline\" data-dojo-attach-point=\"containerNode\"  \r\n\tdata-dojo-attach-event=\"onFocus: _onFocusContainer\">\r\n\t<div class=\"dijitInline\" data-dojo-attach-point=\"_selectedObjectsContainer\" tabindex=\"0\" aria-label=\"${label}\">\r\n\t\t<input id=\"${labelId}\" type=\"text\" style=\"display:none\">\r\n\t\t<input tabIndex=\"-1\" type=\"hidden\" class=\"dijitOffScreen\" data-dojo-attach-point=\"valueNode\"/>\r\n\t\t\r\n\t\t<button class=\"selectButton\" type=\"button\"\r\n\t\t\tdata-dojo-attach-point=\"_selectButton,focusNode\" \r\n\t\t\taria-labelledby=\"${labelId}\" aria-label=\"${label}\"\r\n\t\t\tdata-dojo-type=\"ecm.widget.Button\"\r\n\t\t\tdata-dojo-attach-event=\"onClick: _onSelectObject\">${selectButtonLabel}</button>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/ObjectSelector", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/focus", "dijit/form/Button", "ecm/LoggerMixin", "ecm/widget/_SinglePropertyEditorMixin", "ier/constants", "ier/messages", "ier/widget/ObjectCompositeButton", "ier/widget/dialog/ObjectListDialog", "dojo/text!./templates/ObjectSelector.html", "ecm/widget/Button"], function (dojo_declare, dojo_lang, dojo_class, dojo_construct, dojo_style, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_focus, dijit_form_Button, ecm_LoggerMixin, ecm_widget_SinglePropertyEditorMixin, ier_constants, ier_messages, ier_widget_ObjectCompositeButton, ier_widget_dialog_ObjectListDialog, templateString) {
        return dojo_declare("ier.widget.ObjectSelector", [ecm_LoggerMixin, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_widget_SinglePropertyEditorMixin], {templateString:templateString, widgetsInTemplate:true, objectClassName:ier_constants.ClassName_CustomObject, ier_messages:ier_messages, selectedItem:null, _selectedItemButton:null, _createButton:null, _objectDialog:null, _dialogCssClass:null, _entityType:null, showVersionSelection:false, repository:null, selectButtonLabel:ier_messages.select_with_elipsis, label:null, type:null, disableContextMenu:false, createLabel:ier_messages.baseDialog_addButton, showCreateButton:false, attributeMap:dojo_lang.delegate(dijit_Widget.prototype.attributeMap, {id:"focusNode", tabIndex:"focusNode"}), postCreate:function () {
            this.inherited(arguments);
            if (this.selectedItem) {
                this._createCompositeButton(this.selectedItem);
            }
            if (this.name) {
                this.valueNode.name = this.name;
            }
            if (this.readOnly) {
                this.set("disabled", true);
            }
            if (this.noSelectButton) {
                dojo_style.set(this._selectButton.domNode, "display", "none");
            } else {
                this._selectButton.set("label", this.selectButtonLabel);
            }
        }, destroy:function () {
            if (this._selectedItemButton) {
                this._selectedItemButton.destroy();
            }
            if (this._createButton) {
                this._createButton.destroy();
            }
            if (this._objectDialog) {
                this._objectDialog.destroy();
            }
            this.inherited(arguments);
        }, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, addDialogCssClass:function (cssClass) {
            this._dialogCssClass = cssClass;
        }, getPromptText:function () {
            return ier_messages.objectSelector_promptText;
        }, setSelectedItem:function (item, initial) {
            if (this._selectedItemButton) {
                if (this.showVersionSelection) {
                    this._selectedItemButton.selectedItemLabel = this._getVersionLabel(item);
                }
                this._selectedItemButton.setSelectedItem(item);
            } else {
                this._createCompositeButton(item);
            }
            this.selectedItem = item;
            this.onItemSelected(this.selectedItem);
            if (!initial) {
                this.onChange();
            }
        }, _getVersionLabel:function (selectedItem) {
            if (this.showVersionSelection) {
                var label = selectedItem.name + " ( " + ier_messages.version + " " + selectedItem.attributes["MajorVersionNumber"] + "." + (selectedItem.attributes["MinorVersionNumber"] ? selectedItem.attributes["MinorVersionNumber"] : "0") + " )";
                return label;
            }
            return null;
        }, _onSelectObject:function () {
            if (this._objectDialog) {
                this._objectDialog.destroy();
            }
            this._objectDialog = new ier_widget_dialog_ObjectListDialog({contentClass:this.contentClass, showVersionSelection:this.showVersionSelection, showCreateButton:this.showCreateButton, createLabel:this.createLabel, type:this.type, disableContextMenu:this.disableContextMenu});
            this.connect(this._objectDialog, "onSelect", "_onSelectItem");
            this.connect(this._objectDialog, "onCreateButtonClicked", "onItemCreate");
            if (this._dialogCssClass) {
                this._objectDialog.addDomNodeCSSClass(this._dialogCssClass);
            }
            if (this._entityType) {
                this._objectDialog.setEntityType(this._entityType);
            }
            if (this.propertyName) {
                this._objectDialog.setPropertyClassName(this.propertyName);
            }
            this._objectDialog.show(this.repository, this.objectClassName);
        }, _onSelectItem:function (selectedItems) {
            if (selectedItems && selectedItems.length > 0) {
                if (selectedItems[0] != this.selectedItem) {
                    this.selectedItem = selectedItems[0];
                    this.valueNode.value = this.selectedItem.id;
                    this.setSelectedItem(this.selectedItem);
                }
            }
        }, _createCompositeButton:function (selectedItem) {
            if (selectedItem) {
                if (this._selectedItemButton) {
                    this._selectedItemButton.destroy();
                }
                var label = null;
                if (this.showVersionSelection) {
                    label = this._getVersionLabel(selectedItem);
                }
                this._selectedItemButton = new ier_widget_ObjectCompositeButton({showRemoveIcon:true, selectedItemLabel:label, selectedItem:selectedItem, repository:this.repository, readOnly:this.readOnly});
                this.connect(this._selectedItemButton, "onItemClicked", "onItemClicked");
                this.connect(this._selectedItemButton, "onItemRemoved", dojo_lang.hitch(this, function (selectedItem, event) {
                    this.clearItem();
                    this.onItemRemoved(event);
                }));
                dojo_construct.place(this._selectedItemButton.domNode, this._selectedObjectsContainer, "first");
            }
        }, clearItem:function () {
            if (this._selectedItemButton) {
                this._selectedItemButton.clearItem();
            }
            this.selectedItem = null;
            this.valueNode.value = "";
            this.onChange();
        }, createCreateButton:function () {
            this.showCreateButton = true;
            if (this._createButton) {
                this._createButton.destroy();
            }
            this._createButton = new dijit_form_Button({label:ier_messages.objectSelector_createEntities});
            if (this.readOnly) {
                this._createButton.set("disabled", true);
            }
            this.connect(this._createButton, "onClick", "_onCreateButtonClicked");
            dojo_construct.place(this._createButton.domNode, this._selectedObjectsContainer);
        }, _onCreateButtonClicked:function () {
            var createDialog = this.onItemCreate();
            if (createDialog && createDialog.onAdd) {
                this.connect(createDialog, "onAdd", function (items) {
                    this._onSelectItem(items);
                });
            }
        }, _onFocusContainer:function (evt) {
            dijit_focus.focus(this._selectButton);
        }, setObjectClassName:function (objectClassName) {
            this.objectClassName = objectClassName;
        }, setPropertyClassName:function (propertyName) {
            this.propertyName = propertyName;
        }, setEntityType:function (entityType) {
            this._entityType = entityType;
        }, get:function (name) {
            if (name == "value") {
                return this.getValue();
            } else {
                if (name == "displayedValue") {
                    return this.selectedItem ? this.selectedItem.name : "";
                } else {
                    return this.inherited(arguments);
                }
            }
        }, getValue:function () {
            return this.selectedItem ? this.selectedItem.id : "";
        }, _setDisabledAttr:function (bool) {
            if (bool) {
                dojo_class.add(this.domNode, "dijitDisabled");
            } else {
                dojo_class.remove(this.domNode, "dijitDisabled");
            }
            if (this._selectButton) {
                if (bool) {
                    dojo_class.add(this._selectButton.domNode, "disabled");
                } else {
                    dojo_class.remove(this._selectButton.domNode, "disabled");
                }
                this._selectButton.set("disabled", bool);
            }
            if (this._createButton) {
                if (bool) {
                    dojo_class.add(this._createButton.domNode, "disabled");
                } else {
                    dojo_class.remove(this._createButton.domNode, "disabled");
                }
                this._createButton.set("disabled", bool);
            }
            if (this._selectedItemButton) {
                this._selectedItemButton.setDisabled(bool);
            }
        }, onItemSelected:function (selectedItem) {
        }, onItemCreate:function () {
        }, onItemClicked:function (selectedItem, event) {
        }, onItemRemoved:function (event) {
        }, onChange:function () {
        }, isValid:function () {
            if (this.required) {
                return (this.selectedItem != null);
            }
            return true;
        }, _nop:null});
    });
}, "ier/widget/dialog/AddRecordCategoryDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Desktop", "ier/constants", "ier/messages", "ier/model/RecordCategoryContainerMixin", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/AddRecordCategoryDialogContent.html", "dijit/layout/ContentPane", "idx/layout/TitlePane", "ier/widget/panes/EntityItemDispositionPane", "ier/widget/panes/EntityItemGeneralPane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_lang, ecm_model_desktop, ier_constants, ier_messages, ier_model_RecordCategoryContainerMixin, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.AddRecordCategoryDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, _messages:ier_messages, _parentFolder:null, postCreate:function () {
            this.inherited(arguments);
            this.addChildPane(this._entityItemGeneralPane);
            this.addChildPane(this._entityItemPropertiesPane);
            this.addChildPane(this._entityItemDispositionPane);
            if (ecm_model_desktop.showSecurity) {
                this.addChildPane(this._entityItemSecurityPane);
            } else {
                this._entityItemSecurityPane.getParent().domNode.style.display = "none";
            }
            this.addButton(ier_messages.baseDialog_addButton, "_onClickAdd", true, true);
        }, show:function (repository, parentFolder, item) {
            this.inherited("show", []);
            this._parentFolder = parentFolder;
            this.item = item;
            this.repository = repository;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, _renderDialog:function () {
            if (this.item) {
                this.set("title", ier_messages.addRecordCategoryDialog_editTitle);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_updateButton);
            } else {
                this.set("title", ier_messages.addRecordCategoryDialog_title);
                this.getDefaultButton().set("label", this._ierMessages.baseDialog_addButton);
            }
            this.setIntroText(ier_messages.addRecordCategoryDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh04.htm"));
            this.setResizable(true);
            this._entityItemGeneralPane.createRendering(this.repository, this._parentFolder);
            this._entityItemPropertiesPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, rootClassId:ier_constants.ClassName_RecordCategory, defaultNameProperty:ier_constants.Property_RecordCategoryName, entityType:ier_constants.EntityType_RecordCategory, hideContentClassSelector:true, item:this.item});
            this._entityItemPropertiesPane.enableAndSetNamingPattern(ier_constants.Property_RecordCategoryName, ier_constants.Property_RecordCategoryIdentifier);
            this._entityItemDispositionPane.createRendering({repository:this.repository, parentFolder:this._parentFolder, entityItemPropertiesPane:this._entityItemPropertiesPane});
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes, deferArray) {
                this._entityItemPropertiesPane.setReviewerAndCurrentDate(attributes, deferArray);
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                var contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemSecurityPane.createRendering(this.repository, null, this._parentFolder, contentClass, properties);
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.resize();
                this.validateInput();
            });
        }, _onClickAdd:function () {
            if (this.validateInput()) {
                var properties = this._entityItemPropertiesPane.getProperties();
                var permissions = this._entityItemSecurityPane.getPermissions();
                var className = this._entityItemPropertiesPane.getContentClass().id;
                var dispSchedule = this._entityItemDispositionPane.getDispositionSchedule();
                var legacyScheduleParams = this._entityItemDispositionPane.getLegacyDispositionScheduleProperties();
                if (this._parentFolder.isInstanceOf(ier_model_RecordCategoryContainerMixin)) {
                    this._parentFolder.addRecordCategory(className, properties, permissions, dispSchedule, legacyScheduleParams, dojo_lang.hitch(this, function (recordcategory) {
                        if (this._parentFolder) {
                            this._parentFolder.refresh();
                        }
                        this.onCancel();
                    }));
                }
            }
        }});
    });
}, "ier/widget/layout/ReportPane":function () {
    require({cache:{"url:ier/widget/layout/templates/ReportPane.html":"<div class=\"ierFlyoutPane ierReportPane\" >\r\n\t<div data-dojo-type=\"dijit.layout.BorderContainer\" class=\"flyoutContainer\" data-dojo-props=\"gutters:false\" width=\"500px\">\r\n\t\t<div data-dojo-attach-point=\"topPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\" class=\"flyoutContainerTop\" style=\"padding-bottom:0px\">\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"bottomPane\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\" class=\"flyoutContainerBottom\" style=\"padding-top:0px\">\r\n\t\t</div>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/layout/ReportPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/event", "dojo/dom-style", "dojo/dom-construct", "dojo/dom-class", "ier/widget/TilesList", "ier/constants", "ier/messages", "ier/widget/layout/ReportsFlyoutPane", "dojo/text!./templates/ReportPane.html", "dijit/layout/BorderContainer", "dijit/layout/ContentPane"], function (dojo_declare, dojo_lang, dojo_event, dojo_domStyle, dojo_domConstruct, dojo_domClass, ier_widget_TilesList, ier_constants, ier_messages, ier_widget_layout_ReportsFlyoutPane, templateString) {
        return dojo_declare("ier.widget.layout.ReportPane", [ier_widget_layout_ReportsFlyoutPane], {widgetsInTemplate:true, templateString:templateString, createTileList:function () {
            return new ier_widget_TilesList({hideFilterBox:true});
        }});
    });
}, "ier/messages":function () {
    define("ier/messages", ["dojo/i18n!ier/nls/messages"], function (dojo_i18n_ier_messages) {
        var messages = dojo_i18n_ier_messages;
        messages.product_name = "IBM Enterprise Records";
        messages.product_version = "5.1.2";
        messages.build_version = "rec560.177";
        messages.build_date = "11/04/2013";
        return messages;
    });
}, "ier/widget/tasks/DefensibleDisposalTasksListingPane":function () {
    define(["dojo/_base/declare", "ecm/widget/listView/modules/Bar", "ier/constants", "ier/messages", "ier/widget/listView/modules/TaskFilter", "ier/widget/listView/modules/Toolbar", "ier/widget/tasks/TasksListingPane"], function (dojo_declare, ecm_widget_listView_Bar, ier_constants, ier_messages, ier_widget_listView_TaskFilter, ier_widget_listView_Toolbar, ier_widget_TasksListingPane) {
        return dojo_declare("ier.widget.tasks.DefensibleDisposalTasksListingPane", [ier_widget_TasksListingPane], {toolbarDef:"IERDefensibleDispositionTaskToolbarMenuType", postCreate:function () {
            this.inherited(arguments);
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ecm_widget_listView_Bar, top:[[[{moduleClass:ier_widget_listView_Toolbar}, {moduleClass:ier_widget_listView_TaskFilter, filterSelectOptions:[{label:ier_messages.taskPane_allTasks, value:"all", selected:true}, {label:ier_messages.taskPane_scheduledTasks, value:ier_constants.TaskStatus_Scheduled}, {label:ier_messages.taskPane_recurringTasks, value:ier_constants.TaskStatus_Recurring}, {label:ier_messages.taskPane_inProgressTasks, value:ier_constants.TaskStatus_InProgress}, {label:ier_messages.taskPane_completedTasks, value:ier_constants.TaskStatus_Completed}, {label:ier_messages.taskPane_failedTasks, value:ier_constants.TaskStatus_Failed}]}]]]});
            return array;
        }, setupTaskFilterConnections:function () {
            this.inherited(arguments);
            if (this._onTaskFilterSelectChangeHandler) {
                this.disconnect(this._onTaskFilterSelectChangeHandler);
            }
            this._onTaskFilterSelectChangeHandler = this.connect(this.taskFilterModule, "onFilterSelectChange", function (value) {
                this.categoryTask.taskStatus = value;
                this.retrieveTasks();
            });
        }});
    });
}, "url:ier/widget/admin/templates/DisplayColumnPane.html":"<div class=\"ecmAdminTab\">\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\" class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_editButton\">${_messages.admin_edit}</button>\r\n\t\t<div data-dojo-type=\"dijit/Menu\" data-dojo-attach-point=\"_menu\" style=\"display: none;\">\r\n\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-attach-point=\"_editMenu\">${_messages.admin_edit}</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-attach-point=\"_gridContainer\" data-dojo-props=\"region: 'center'\" class=\"ecmContentList ierCenterPane\"></div>\r\n</div>\r\n", "ier/widget/TilesListItem":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/event", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/keys", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/Menu", "dijit/MenuItem", "dijit/MenuSeparator", "dijit/PopupMenuItem", "dijit/form/DropDownButton", "idx/form/Link", "idx/html", "ecm/Messages", "ecm/LoggerMixin", "dojo/text!./templates/TilesListItem.html"], function (dojo_declare, dojo_array, dojo_event, dojo_lang, dojo_domClass, dojo_domConstruct, dojo_domGeom, dojo_keys, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_Menu, dijit_MenuItem, dijit_MenuSeparator, dijit_PopupMenuItem, dijit_DropDownButton, idx_Link, idx_Html, ecm_Messages, ecm_LoggerMixin, template) {
        return dojo_declare("ier.widget.TilesListItem", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:template, widgetsInTemplate:true, item:null, store:null, actionButton:null, _resizeHandle:null, constructor:function () {
            this.messages = ecm.messages;
        }, postCreate:function () {
            this.inherited(arguments);
            this.connect(this.domNode, "keyup", function (event) {
                if (event.keyCode == dojo_keys.ENTER || event.keyCode == dojo_keys.SPACE) {
                    this.onListItemClick(event);
                }
            });
            this._createView();
        }, resize:function (newSize, currentSize) {
            clearTimeout(this._resizeHandle);
            this._resizeHandle = setTimeout(dojo_lang.hitch(this, function () {
                this._asynchResize(newSize, currentSize);
            }), 100);
        }, _asynchResize:function (newSize, currentSize) {
            if (this.domNode) {
                var titleMarginBox = dojo_domGeom.getMarginBox(this.titleArea);
                var iconMarginBox = dojo_domGeom.getMarginBox(this.iconArea);
                dojo_domGeom.setMarginBox(this.dataArea, {h:Math.max(iconMarginBox.h, titleMarginBox.h)});
            }
        }, setItem:function (item) {
            this.item = item;
            this._createView();
        }, setStore:function (store) {
            this.store = store;
        }, getItem:function () {
            return this.item;
        }, getStore:function () {
            return this.store;
        }, _createView:function () {
            if (this.item && this.store) {
                this.containerNode.title = this.store.getValue(this.item, "name");
                if (this.item.iconClass) {
                    var icon = "<div class=\"" + this.store.getValue(this.item, "iconClass") + "\">&nbsp;</div>";
                    this.iconArea.innerHTML = icon;
                }
                var titleDiv = null;
                if (this.store.getValue(this.item, "titleOnClick")) {
                    var titleObj = new idx_Link({label:this.item.title, onClick:this.store.getValue(this.item, "titleOnClick")});
                    this.connect(titleObj.domNode, "oncontextmenu", function (evt) {
                        dojo_event.stop(evt);
                        return false;
                    });
                    titleDiv = dojo_domConstruct.create("div", {"class":"title"});
                    titleDiv.appendChild(titleObj.domNode);
                } else {
                    titleDiv = dojo_domConstruct.create("div", {"class":"title", innerHTML:this.store.getValue(this.item, "title")});
                }
                var descriptionDiv = null;
                if (this.store.getValue(this.item, "description")) {
                    descriptionDiv = dojo_domConstruct.create("div", {"class":"description", innerHTML:this.store.getValue(this.item, "description")});
                }
                var contentDiv = null;
                if (this.store.getValue(this.item, "content")) {
                    contentDiv = dojo_domConstruct.create("div", {"class":"content", innerHTML:this.store.getValue(this.item, "content")});
                }
                var actionMenuType = this.store.getValue(this.item, "actionMenu");
                if (actionMenuType) {
                    this._createActionButton(actionMenuType, contentDiv);
                    this.connect(this.containerNode, "oncontextmenu", function (evt) {
                        dojo_event.stop(evt);
                        this._loadActions(actionMenuType, dojo_lang.hitch(this, function (menu) {
                            var coords = (evt.keyCode !== dojo_keys.F10 ? {x:evt.pageX, y:evt.pageY} : null);
                            menu._openMyself({target:evt.target, coords:coords});
                        }));
                    });
                }
                dojo_domConstruct.place(titleDiv, this.titleArea, "only");
                if (descriptionDiv) {
                    dojo_domConstruct.place(descriptionDiv, this.titleArea, "last");
                }
                if (contentDiv) {
                    dojo_domConstruct.place(contentDiv, this.titleArea, "last");
                }
            }
        }, _createActionButton:function (actionMenu, contentDiv) {
            this.actionButton = new dijit_DropDownButton({label:this.messages.actions});
            this.connect(this.actionButton.domNode, "oncontextmenu", function (evt) {
                dojo_event.stop(evt);
                return false;
            });
            this.actionButton.loadDropDown = dojo_lang.hitch(this, function (evt) {
                this._loadActions(actionMenu, dojo_lang.hitch(this, function (menu) {
                    this.actionButton.dropDown = menu;
                    this.actionButton.openDropDown();
                }));
            });
            dojo_domConstruct.place(dojo_domConstruct.create("span", {innerHTML:"&nbsp;&nbsp;|"}), contentDiv, "last");
            dojo_domConstruct.place(this.actionButton.domNode, contentDiv, "last");
        }, _loadActions:function (actionMenu, onComplete) {
            if (this._actionMenu) {
                if (onComplete) {
                    onComplete(this._actionMenu);
                }
            } else {
                ecm.model.desktop.loadMenuActions(actionMenu, dojo_lang.hitch(this, function (actions) {
                    var menu = new dijit_Menu();
                    dojo_array.forEach(actions, dojo_lang.hitch(this, function (action) {
                        if (action.id == "Separator") {
                            menu.addChild(new MenuSeparator());
                        } else {
                            this._addActionToMenu(menu, action);
                        }
                    }));
                    this._actionMenu = menu;
                    if (onComplete) {
                        onComplete(this._actionMenu);
                    }
                }));
            }
        }, _addActionToMenu:function (menu, action) {
            var self = this;
            menu.addChild(new dijit_MenuItem({label:action.name, onClick:function (evt) {
                action.performAction(null, [self.item]);
            }}));
        }, onListItemClick:function (evt) {
        }, onListItemDoubleClick:function (evt) {
        }, _onFocus:function (evt) {
            dojo_domClass.add(this.domNode, "ierTilesListItemHover");
        }, _onBlur:function (evt) {
            dojo_domClass.remove(this.domNode, "ierTilesListItemHover");
        }});
    });
}, "url:ier/widget/panes/templates/EntityItemSecurityPane.html":"<div class=\"ierEntityItemSecurityPane\">\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"_contentPane\">\r\n\t\t<div  data-dojo-attach-point=\"_securityPane\" data-dojo-type=\"ecm.widget.SecurityPane\"></div>\t\r\n\t</div>\r\n</div>", "url:ier/widget/panes/templates/ObjectStoreSecurityPane.html":"<div class=\"ecmSecurityPane\">\t\r\n\t<div data-dojo-attach-point=\"_centerPane\" class=\"centerPane\" ></div>\r\n</div>", "ier/widget/tasks/CompletedTasksListingPane":function () {
    define(["dojo/_base/declare", "ecm/widget/listView/modules/Bar", "ier/constants", "ier/messages", "ier/widget/listView/modules/TaskFilter", "ier/widget/listView/modules/Toolbar", "ier/widget/tasks/TasksListingPane"], function (dojo_declare, ecm_widget_listView_Bar, ier_constants, ier_messages, ier_widget_listView_TaskFilter, ier_widget_listView_Toolbar, ier_widget_TasksListingPane) {
        return dojo_declare("ier.widget.tasks.CompletedTasksListingPane", [ier_widget_TasksListingPane], {ier_messages:ier_messages, toolbarDef:"IERCompletedTaskToolbarMenuType", postCreate:function () {
            this.inherited(arguments);
        }, getContentListModules:function () {
            var array = [];
            array.push({moduleClass:ecm_widget_listView_Bar, top:[[[{moduleClass:ier_widget_listView_Toolbar}, {moduleClass:ier_widget_listView_TaskFilter, filterSelectOptions:[{label:ier_messages.taskPane_filterAllTypes, value:"all", selected:true}, {label:ier_messages.reports, value:ier_constants.TaskType_Report}, {label:ier_messages.defensibleDisposal, value:ier_constants.TaskType_DefensibleDisposal}]}]]]});
            return array;
        }});
    });
}, "ier/widget/layout/DashboardPane":function () {
    define(["dojo/_base/declare", "dojo/data/ItemFileReadStore", "dojo/dom-style", "dojo/aspect", "dojo/_base/lang", "ecm/widget/layout/_LaunchBarPane", "ier/widget/TilesList", "ecm/model/Request", "idx/layout/HeaderPane", "ier/messages", "dojo/text!./templates/DashboardPane.html"], function (dojo_declare, dojo_data_ItemFileReadStore, dojo_style, dojo_aspect, dojo_lang, ecm_widget_layout_LaunchBarPane, ecm_widget_TilesList, ecm_model_Request, idx_layout_HeaderPane, ier_messages, templateString) {
        return dojo_declare("ier.widget.layout.DashboardPane", [ecm_widget_layout_LaunchBarPane], {templateString:templateString, _messages:ier_messages, widgetsInTemplate:true, postCreate:function () {
            this.inherited(arguments);
            this._setUpTilesList(this.widget1_tileList, "ier/widget/test/dashboard.json");
            this._setUpTilesList(this.widget2_tileList, "ier/widget/test/dashboard.json");
            this._setUpTilesList(this.widget3_tileList, "ier/widget/test/dashboard.json");
            this._setUpTilesList(this.widget4_tileList, "ier/widget/test/dashboard.json");
            this._setUpTilesList(this.widget5_tileList, "ier/widget/test/dashboard.json");
            this._setUpTilesList(this.widget6_tileList, "ier/widget/test/dashboard.json");
        }, destroy:function () {
            this.inherited(arguments);
        }, _setUpTilesList:function (tileList, url) {
            this.connect(tileList, "onMaximize", function () {
                tileList.resize();
            });
            this.connect(tileList, "onRestore", function () {
                tileList.resize();
            });
            dojo_style.set(tileList.toolbarArea.domNode, "display", "none");
            var jsonURL = ecm_model_Request.getPluginResourceUrl("IERApplicationPlugin", url);
            var store = new dojo_data_ItemFileReadStore({url:jsonURL});
            tileList.setStore(store);
        }, setParams:function (params) {
        }, loadContent:function () {
            this.isLoaded = true;
        }, reset:function () {
        }, setRepository:function (repository) {
        }});
    });
}, "url:ier/widget/panes/templates/ReportDefinitionPropertiesPane.html":"<div class=\"ierEntityItemPropertiesPane\">\r\n\t<label style=\"display: none;\" for=\"${id}_filter\">${ier_messages.reportDefinitionDialog_Available}</label>\t\r\n\t<div data-dojo-type=\"ecm.widget.FilterTextBox\" data-dojo-attach-point=\"_filterBox\" class=\"filterBox\" id=\"${id}_filter\" style=\"display:none;float:none;\"></div>\r\n\t<div data-dojo-type=\"ecm.widget.SloshBucket\" data-dojo-attach-point=\"_sloshBucket\" class=\"sloshBucket\" style=\"display:none;\"></div>\r\n</div>", "ier/widget/panes/EntityItemPropertiesPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-class", "dojo/_base/connect", "dojo/DeferredList", "dojo/_base/Deferred", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/dialog/IERBaseDialogPane", "dojo/text!./templates/EntityItemPropertiesPane.html", "ecm/widget/ContentClassSelector", "ier/widget/panes/CommonPropertiesPane", "dijit/form/Select"], function (dojo_declare, dojo_lang, dojo_style, dojo_class, dojo_connect, dojo_DeferredList, dojo_Deferred, ecm_model_desktop, ecm_model_Request, ier_constants, ier_messages, ier_util, ier_widget_dialog_IERBaseDialogPane, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemPropertiesPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, widgetsInTemplate:true, _messages:ier_messages, _constants:ier_constants, errorOccurred:false, contentClass:null, isReadOnly:false, parentFolder:null, defaultNameProperty:null, entityType:null, isNamingPatternEnabled:false, item:null, itemProperties:null, isCreate:true, disableContentClassSelector:false, shouldMapParentFolderProperties:true, rootClassId:null, createRendering:function (parameters) {
            this.errorFields = [];
            this.parentFolder = parameters.parentFolder ? parameters.parentFolder : this.parentFolder;
            if (this.parentFolder && this.parentFolder.isIERFavorite && this.parentFolder.item) {
                this.parentFolder = this.parentFolder.item;
            }
            this.defaultNameProperty = parameters.defaultNameProperty ? parameters.defaultNameProperty : this.defaultNameProperty;
            this.entityType = parameters.entityType ? parameters.entityType : this.entityType;
            this.isCreate = parameters.isCreate != null ? parameters.isCreate : this.isCreate;
            this.item = parameters.item ? parameters.item : this.item;
            this.isReadOnly = this._setReadOnly(parameters.isReadOnly);
            this.disableContentClassSelector = parameters.disableContentClassSelector != null ? parameters.disableContentClassSelector : this.disableContentClassSelector;
            this.shouldGetItemAttributes = parameters.shouldGetItemAttributes != null ? parameters.shouldGetItemAttributes : this.shouldGetItemAttributes;
            this.shouldMapParentFolderProperties = parameters.shouldMapParentFolderProperties != null ? parameters.shouldMapParentFolderProperties : this.shouldMapParentFolderProperties;
            this.rootClassId = parameters.rootClassId != null ? parameters.rootClassId : this.rootClassId;
            if (parameters.hideContentClassSelector) {
                dojo_style.set(this._contentClassSelector.domNode, "display", "none");
                dojo_style.set(this._contentClassSelectorDisabled.domNode, "display", "none");
                dojo_style.set(this._classLabel, "display", "none");
                dojo_class.remove(this.commonPropertiesContainer, "commonPropertiesMargins");
            } else {
                dojo_style.set(this._contentClassSelectorDisabled.domNode, "display", "none");
                dojo_style.set(this._contentClassSelector.domNode, "display", "");
            }
            this._contentClassSelector.rootClassId = parameters.rootClassId;
            this._contentClassSelector.excludedItems = (parameters.excludedClasses ? parameters.excludedClasses : null);
            this.setRepository(parameters.repository);
            this._contentClassLoadedHandler = this.connect(this._contentClassSelector, "onLoaded", function () {
                var selectedClass = parameters.defaultClass ? parameters.defaultClass : this._contentClassSelector.rootClassId;
                var contentClass = dojo_lang.isString(selectedClass) ? this.repository.getContentClass(selectedClass) : selectedClass;
                contentClass.originalAllowsInstances = contentClass.allowsInstances;
                if (!this.isCreate) {
                    contentClass.allowsInstances = true;
                }
                if (this.isCreate && contentClass.allowsInstances == false) {
                    this.errorOccurred = true;
                    this.onErrorOccurred(ier_messages.noPermissionAdd + " " + ier_messages.needAllowInstanceOnClass);
                }
                this._contentClassSelector.setSelected(contentClass);
            });
            this._contentClassSelectedHandler = this.connect(this._contentClassSelector, "onContentClassSelected", dojo_lang.hitch(this, function (contentClass) {
                this.contentClass = contentClass;
                this._contentClassSelector.setDisabled(this.disableContentClassSelector);
                if (contentClass.originalAllowsInstances) {
                    contentClass.allowsInstances = contentClass.originalAllowsInstances;
                }
                if (this.item) {
                    this.item.retrieveAttributes(dojo_lang.hitch(this, function () {
                        if (this.parentFolder && this.shouldMapParentFolderProperties && this.parentFolder.isAttributesRetrieved && !this.parentFolder.isAttributesRetrieved()) {
                            this.parentFolder.retrieveAttributes(dojo_lang.hitch(this, function () {
                                this.renderProperties(contentClass);
                            }), false, true);
                        } else {
                            this.renderProperties(contentClass);
                        }
                    }), false, true);
                } else {
                    if (this.parentFolder && this.shouldMapParentFolderProperties && this.parentFolder.isAttributesRetrieved && !this.parentFolder.isAttributesRetrieved()) {
                        this.parentFolder.retrieveAttributes(dojo_lang.hitch(this, function () {
                            this.renderProperties(contentClass);
                        }), false, true);
                    } else {
                        this.renderProperties(contentClass);
                    }
                }
            }));
            this._commonPropertiesChangedHandler = this.connect(this._commonProperties, "onChange", function () {
                this.onInputChange(this._commonProperties);
                this.onPropertiesChanged();
            });
        }, _setReadOnly:function (readOnly) {
            if (readOnly) {
                return readOnly;
            } else {
                if (this.item) {
                    return !this.item.privModifyProperties;
                }
            }
        }, disconnectHandlers:function () {
            if (this._contentClassLoadedHandler) {
                dojo_connect.disconnect(this._contentClassLoadedHandler);
            }
            if (this._contentClassSelectedHandler) {
                dojo_connect.disconnect(this._contentClassSelectedHandler);
            }
            if (this._commonPropertiesChangedHandler) {
                dojo_connect.disconnect(this._commonPropertiesChangedHandler);
            }
        }, renderProperties:function (contentClass) {
            this._commonProperties.clearRendering();
            var deferArray = [];
            contentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (origAttributes) {
                this._renderProperties(origAttributes, deferArray, contentClass);
            }));
        }, _renderProperties:function (origAttributes, deferArray, contentClass) {
            var attributes = this.cloneAttributes(origAttributes);
            if (!this.isCreate) {
                var reviewerAttributeDef = this.getAttributeDefinition(ier_constants.Property_Reviewer, attributes);
                if (reviewerAttributeDef && !contentClass.isRecordClass) {
                    var reviewerDeferred = new dojo_Deferred();
                    deferArray.push(reviewerDeferred);
                    var reviewer = null;
                    reviewerAttributeDef.dataType = ier_constants.DataType_User;
                    this.repository.getUser(reviewerAttributeDef.defaultValue, dojo_lang.hitch(this, function (user) {
                        if (!reviewer) {
                            if (user) {
                                reviewer = user;
                                reviewerAttributeDef.defaultValue = [user];
                            }
                            reviewerDeferred.resolve();
                        }
                    }));
                }
            }
            this.onRenderAttributes(attributes, deferArray, contentClass);
            var defs = new dojo_DeferredList(deferArray);
            defs.then(dojo_lang.hitch(this, function () {
                if (this.isNamingPatternEnabled) {
                    this.getNamingPatternName(this.parentFolder.id, this.entityType, this.repository, dojo_lang.hitch(this, function (nameFromNamingPattern) {
                        if (nameFromNamingPattern) {
                            this._defaultNamingPatternPropertyAttribute = this.getAttributeDefinition(this._namingPatternPropertyField, attributes);
                            this._defaultNamingPatternPropertyAttribute.readOnly = true;
                            this._defaultNamingPatternPropertyAttribute.defaultValue = nameFromNamingPattern;
                        } else {
                            this._defaultNamingPatternPropertyAttribute = null;
                        }
                        this._renderAttributes(attributes);
                    }));
                } else {
                    this._defaultNamingPatternPropertyAttribute = null;
                    this._renderAttributes(attributes);
                }
            }));
        }, _renderAttributes:function (attributes) {
            this._commonProperties.renderAttributes(attributes, this.isCreate ? this.item : null, this.isCreate ? "create" : "editProperties", this.isReadOnly);
            this.setContainerNameFieldValidation(this.defaultNameProperty);
            this._commonProperties.resize();
            this.onCompleteRendering();
        }, onRenderAttributes:function (attributes, deferArray, contentClass) {
        }, setReviewerAndCurrentDate:function (attributes, deferArray) {
            if (this.isCreate) {
                var deferred = new dojo_Deferred();
                this.repository.getCurrentUser(dojo_lang.hitch(this, function (user) {
                    if (user) {
                        var reviewerDef = this.getAttributeDefinition(ier_constants.Property_Reviewer, attributes);
                        if (reviewerDef) {
                            reviewerDef.defaultValue = [user];
                        }
                        deferred.resolve();
                    }
                }));
                var dateOpened = this.getAttributeDefinition(ier_constants.Property_DateOpened, attributes);
                if (dateOpened) {
                    dateOpened.defaultValue = (ier_util.getISODateString(new Date()));
                }
                deferArray.push(deferred);
            }
        }, enableAndSetNamingPattern:function (folderName, folderIdentifier) {
            var currentFilePlan = ecm_model_desktop.getCurrentFilePlan();
            if (currentFilePlan && currentFilePlan.isNamingPatternEnabled()) {
                var namingPattern = currentFilePlan.getNamingPattern();
                this.isNamingPatternEnabled = true;
                this.setNamingPatternField(namingPattern.isAppliedToName() ? folderName : folderIdentifier);
            }
        }, onCompleteRendering:function () {
        }, onPropertiesChanged:function () {
        }, validate:function () {
            var errorField = this._commonProperties.validate();
            return (errorField == null && !this.errorOccurred);
        }, getProperties:function () {
            this.itemProperties = this._commonProperties.getPropertiesJSON(true);
            if (this._defaultNamingPatternPropertyAttribute) {
                this.itemProperties.push({"name":this._defaultNamingPatternPropertyAttribute.id, "value":this._defaultNamingPatternPropertyAttribute.defaultValue});
            }
            return this.itemProperties;
        }, getPropertyValue:function (propertyName) {
            var properties = this.getProperties();
            for (var i in properties) {
                var prop = properties[i];
                if (prop && prop.name == propertyName) {
                    return prop.value;
                }
            }
        }, getContentClass:function () {
            return this.contentClass;
        }, getDefaultNameProperty:function () {
            return this.defaultNameProperty;
        }, setPropertyValue:function (property, value) {
            return this._commonProperties.setPropertyValue(property, value);
        }, setNamingPatternField:function (property) {
            this._namingPatternPropertyField = property;
        }, enablePropertieValuesSyncUp:function (enabled) {
            this._commonProperties.enablePropertieValuesSyncUp(enabled);
        }, resize:function () {
            this.inherited(arguments);
            this.resizeCommonProperties();
        }, resizeCommonProperties:function () {
            this._commonProperties.resize();
        }, getAttributeDefinition:function (id, attributeDefs) {
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                if (attrDef.id == id) {
                    return attrDef;
                }
            }
        }, setContainerNameFieldValidation:function (propertyName, errorMessage) {
            var _errorMessage = errorMessage ? errorMessage : ier_messages.baseDialog_invalidFolderName;
            var field = this._commonProperties.getFieldWithName(propertyName);
            if (field) {
                field.invalidMessage = _errorMessage;
            }
        }, getNamingPatternName:function (idOfParentContainerWithPattern, entityType, repository, onComplete) {
            if (this._nameFromNamingPattern) {
                if (onComplete) {
                    onComplete(this._nameFromNamingPattern);
                }
            } else {
                var params = ier_util.getDefaultParams(repository, dojo_lang.hitch(this, function (response) {
                    this._nameFromNamingPattern = response.nameFromNamingPattern;
                    if (onComplete) {
                        onComplete(this._nameFromNamingPattern);
                    }
                }));
                params.requestParams[ier_constants.Param_EntityId] = idOfParentContainerWithPattern;
                params.requestParams[ier_constants.Param_EntityType] = entityType;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetEntityNameFromNamingPattern, ier_constants.PostEncoding, params);
            }
        }, setRepository:function (repository) {
            this._contentClassSelector.setRepository(repository);
            this.repository = repository;
            this._commonProperties.setRepository(repository);
        }, cloneAttributes:function (attributeDefs) {
            var copyAttributes = [];
            var itemAttributes = null;
            var attributesToAvoidMapping = [];
            if (!this.isCreate && this.item) {
                itemAttributes = this.item.attributes;
            } else {
                if (this.isCreate && this.shouldMapParentFolderProperties) {
                    itemAttributes = this.parentFolder ? this.parentFolder.attributes : null;
                    attributesToAvoidMapping.push(ier_constants.Property_RecordCategoryIdentifier);
                    attributesToAvoidMapping.push(ier_constants.Property_RecordCategoryName);
                    attributesToAvoidMapping.push(ier_constants.Property_RecordFolderIdentifier);
                    attributesToAvoidMapping.push(ier_constants.Property_RecordFolderName);
                    attributesToAvoidMapping.push(ier_constants.Property_VolumeName);
                }
            }
            var continueMapping = true;
            for (var i in attributeDefs) {
                var attrDef = attributeDefs[i];
                var clonedAttributeDef = attrDef.clone();
                if (this.item && this.item.isAttributeReadOnly(attrDef.id)) {
                    clonedAttributeDef.readOnly = true;
                }
                copyAttributes.push(clonedAttributeDef);
                continueMapping = true;
                if (itemAttributes != null) {
                    if (this.isCreate && this.shouldMapParentFolderProperties) {
                        if (clonedAttributeDef.system == true || clonedAttributeDef.hidden == true || (clonedAttributeDef.defaultValue && clonedAttributeDef.defaultValue != "") || (clonedAttributeDef.value && clonedAttributeDef.value != "")) {
                            continueMapping = false;
                        } else {
                            for (var j in attributesToAvoidMapping) {
                                if (clonedAttributeDef.id == attributesToAvoidMapping[j]) {
                                    continueMapping = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (continueMapping && itemAttributes[clonedAttributeDef.id]) {
                        clonedAttributeDef.defaultValue = itemAttributes[clonedAttributeDef.id];
                    }
                }
            }
            return copyAttributes;
        }, destroy:function () {
            this.errorFields = null;
            this.disconnectHandlers();
            this.inherited(arguments);
        }, _nop:null});
    });
}, "ier/widget/listView/decorators/ColumnDecorators":function () {
    define(["dojo/_base/lang", "dojo/_base/array", "dojo/dom-construct", "dojo/dom-style", "dijit/registry", "ier/messages", "ier/constants", "ier/util/util", "ier/model/_BaseEntityObject", "ier/widget/DDScheduleCompositeButton", "ier/widget/ObjectCompositeButton"], function (dojo_lang, dojo_array, domConstruct, domStyle, dijit_registry, ier_messages, ier_constants, ier_util, ier_model_BaseEntityObject, ier_widget_DDScheduleCompositeButton, ier_widget_ObjectCompositeButton) {
        dojo_lang.setObject("ierMultiStateIconsDecorator", function (item) {
            var display = "";
            var attributes = item.attributes;
            if (item.isDispositionInProgress == true || item.isDispositionInProgress == "true") {
                display += "<img class=\"ierDispositionInProgressIcon\" alt=\"" + ier_messages.contentList_dispositionInProgress + "\" title=\"" + ier_messages.contentList_dispositionInProgress + "\" src=\"dojo/resources/blank.gif\" />";
            } else {
                if (item.isReadyForDisposition == true || item.isReadyForDisposition == "true") {
                    display += "<img class=\"ierDispositionReadyIcon\" alt=\"" + ier_messages.contentList_dispositionReady + "\" title=\"" + ier_messages.contentList_dispositionReady + "\" src=\"dojo/resources/blank.gif\" />";
                } else {
                    if (item.isBasicScheduleInProgress == true || item.isBasicScheduleInProgress == "true") {
                        display += "<img class=\"ierBasicScheduleDispositionInProgressIcon\" alt=\"" + ier_messages.contentList_basicScheduleDispositionInProgress + "\" title=\"" + ier_messages.contentList_basicScheduleDispositionInProgress + "\" src=\"dojo/resources/blank.gif\" />";
                    } else {
                        display += "<img src=\"dojo/resources/blank.gif\" height=\"16px\" width=\"20px\" alt=\"\">";
                    }
                }
            }
            if (item.isClosed == true || item.isClosed == "true") {
                display += "<img class=\"ierCloseIcon\" alt=\"" + ier_messages.contentList_closed + "\" title=\"" + ier_messages.contentList_closed + "\" src=\"dojo/resources/blank.gif\" />";
            } else {
                if (item.isReopen == true || item.isReopen == "true") {
                    display += "<img class=\"ierReopenIcon\" alt=\"" + ier_messages.contentList_reopened + "\" title=\"" + ier_messages.contentList_reopened + "\" src=\"dojo/resources/blank.gif\" />";
                } else {
                    display += "<img src=\"dojo/resources/blank.gif\" height=\"16px\" width=\"20px\" alt=\"\">";
                }
            }
            if (attributes.OnHold == true || attributes.OnHold == "true") {
                display += "<img class=\"ierHoldIcon\" alt=\"" + ier_messages.contentList_onHold + "\" title=\"" + ier_messages.contentList_onHold + "\" src=\"dojo/resources/blank.gif\" />";
            } else {
                display += "<img src=\"dojo/resources/blank.gif\" height=\"16px\" width=\"20px\" alt=\"\">";
            }
            return display;
        });
        dojo_lang.setObject("ierMimeTypeDecorator", function (item, rowId, rowIndex) {
            var iconCss = ier_util.getIconClass(item);
            var tooltip = ier_util.getMimetypeTooltip(item) || "";
            var mimeTypeString = "";
            if (iconCss != null) {
                mimeTypeString = "<img class=\"" + iconCss + "\" alt=\"" + tooltip + "\" title=\"" + tooltip + "\" src=\"dojo/resources/blank.gif\"";
            }
            if (item.isFolder()) {
                mimeTypeString += " role=\"link\" onclick=\"ecm.widget.listView.ContentList.callMethod('" + this.id + "', '_performDefaultActionForRowId', '" + rowId + "')\"";
            }
            if (mimeTypeString.length != 0) {
                mimeTypeString += " />";
            }
            return mimeTypeString;
        });
        dojo_lang.setObject("ierObjectTypeDecorator", function (data) {
            var entry = "<div data-dojo-attach-point=\"containerNode\" style=\"width: 100%\"></div>";
            return entry;
        });
        dojo_lang.setObject("ierObjectTypeCellValueFormatter", function (gridData, storeData, cellWidget) {
            var value = gridData;
            var row = cellWidget.cell.row;
            var item = row.item();
            var columnName = cellWidget.cell.column.columnName;
            var objectItem = item ? item.getIERObjectItem(columnName) : null;
            var objectCompositeButton = null;
            var isNew = false;
            if (cellWidget && cellWidget.containerNode && cellWidget.containerNode.children && cellWidget.containerNode.children[0]) {
                var objectButton = dijit_registry.getEnclosingWidget(cellWidget.containerNode.children[0]);
                if (objectButton instanceof ier_widget_DDScheduleCompositeButton || objectButton instanceof ier_widget_ObjectCompositeButton) {
                    objectCompositeButton = objectButton;
                }
            }
            if (item && item instanceof ier.model.RecordCategory && item.isDefensibleDisposal()) {
                if (objectCompositeButton != null && !(objectCompositeButton instanceof ier_widget_DDScheduleCompositeButton)) {
                    objectCompositeButton.destroy();
                    objectCompositeButton = null;
                }
                if (objectCompositeButton == null) {
                    isNew = true;
                    objectCompositeButton = new ier_widget_DDScheduleCompositeButton({parentItem:item, listenToChanges:true});
                }
                objectCompositeButton.setSelectedItem(item.getDefensibleDisposalSchedule());
            } else {
                if (value && objectItem) {
                    if (objectCompositeButton != null && !(objectCompositeButton instanceof ier_widget_ObjectCompositeButton)) {
                        objectCompositeButton.destroy();
                        objectCompositeButton = null;
                    }
                    if (objectCompositeButton == null) {
                        isNew = true;
                        objectCompositeButton = new ier_widget_ObjectCompositeButton({parentItem:item, parentItemColumn:columnName, listenToChanges:true});
                    }
                    var resultSet = this.getResultSet();
                    var repository = resultSet.repository;
                    objectCompositeButton.setRepository(repository);
                    objectCompositeButton.setSelectedItem(objectItem);
                } else {
                    if (objectCompositeButton) {
                        domStyle.set(objectCompositeButton.domNode, "display", "none");
                    }
                }
            }
            if (objectCompositeButton && cellWidget) {
                if (isNew) {
                    domStyle.set(objectCompositeButton.domNode, "width", "100%");
                    domConstruct.place(objectCompositeButton.domNode, cellWidget.containerNode, "only");
                } else {
                    domStyle.set(objectCompositeButton.domNode, "display", "");
                }
            }
        });
        dojo_lang.setObject("ierAsyncTaskStatusColumnDecorator", function (item, rowId, rowIndex) {
            var display = "";
            if (item) {
                var attributes = item.attributes;
                var value = attributes[ier_constants.Attribute_Status];
                if (value == ier_constants.TaskStatus_Completed) {
                    display = "<img class=\"taskStatusCompletedIcon\" style=\"padding-right:5px;\" alt=\"" + ier_messages.taskPane_completedStatus + "\" title=\"" + ier_messages.taskPane_completedStatus + "\" src=\"dojo/resources/blank.gif\" />";
                } else {
                    if (value == ier_constants.TaskStatus_Scheduled) {
                        display = "<img class=\"taskStatusScheduledIcon\" style=\"padding-right:5px;\" alt=\"" + ier_messages.taskPane_scheduledStatus + "\" title=\"" + ier_messages.taskPane_scheduledStatus + "\" src=\"dojo/resources/blank.gif\" />";
                    } else {
                        if (value == ier_constants.TaskStatus_Failed) {
                            display = "<img class=\"taskStatusFailedIcon\" style=\"padding-right:5px;\" alt=\"" + ier_messages.taskPane_failedStatus + "\" title=\"" + ier_messages.taskPane_failedStatus + "\" src=\"dojo/resources/blank.gif\" />";
                        } else {
                            if (value == ier_constants.TaskStatus_Paused) {
                                display = "<img class=\"taskStatusPausedIcon\" style=\"padding-right:5px;\" alt=\"" + ier_messages.taskPane_disabledStatus + "\" title=\"" + ier_messages.taskPane_disabledStatus + "\" src=\"dojo/resources/blank.gif\" />";
                            } else {
                                display = "<img class=\"taskStatusInProgressIcon\" style=\"padding-right:5px;\" alt=\"" + ier_messages.taskPane_inProgressStatus + "\" title=\"" + ier_messages.taskPane_inProgressStatus + "\" src=\"dojo/resources/blank.gif\" />";
                            }
                        }
                    }
                }
                display += ier_util.getStatusDisplayValue(value);
            }
            return display;
        });
        dojo_lang.setObject("ierAsyncTaskTypeColumnDecorator", function (item, rowId, rowIndex) {
            var display = "";
            if (item) {
                var attributes = item.attributes;
                var value = attributes[ier_constants.Attribute_Type];
                var isRecurring = item.isTaskRecurring ? item.isTaskRecurring() : false;
                var icon = isRecurring ? "taskRecurringIcon" : ier_util.getTypeDisplayIcon(value);
                value = ier_util.getTypeDisplayValue(value);
                display = "<img class=\"" + icon + "\" style=\"padding-right: 5px;\" alt=\"" + value + "\" title=\"" + value + "\" src=\"dojo/resources/blank.gif\" />";
                display += value;
            }
            return display;
        });
    });
}, "url:ier/widget/admin/templates/RepositorySettingsPane.html":"<div class=\"ecmAdminTab\">\r\n   \t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_saveButton\">${_messages.admin_save}</button>\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_resetButton\">${_messages.admin_reset}</button>\r\n\t</div>\r\n\t<div class=\"ierAdminContent\">\r\n\t\t<table class=\"propertyTable\" role=\"presentation\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_selector\">${_messages.admin_defaultFilePlan}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm/widget/HoverHelp\" message=\"${_messages.admin_defaultFilePlan_tooltip}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td data-dojo-attach-point=\"_selectorContainer\" class=\"propertyRowValue\"></td>\r\n\t\t\t</tr>\r\n\t\t</tbody></table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx/layout/TitlePane\" data-dojo-props=\"open: true\" title=\"${_messages.admin_systemConfig}\">\r\n\t\t<div data-dojo-type=\"ier/widget/admin/SystemConfigPane\" data-dojo-attach-point=\"_systemConfigPane\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/listView/gridModules/RowContextMenu":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ecm/widget/listView/gridModules/RowContextMenu", "ier/constants", "ier/util/menu", "ier/model/_BaseEntityObject"], function (dojo_declare, dojo_lang, ecm_model_Desktop, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ecm_widget_listView_RowContextMenu, ier_constants, ier_util_menu, ier_model_BaseEntityObject) {
        return dojo_declare("ier.widget.listView.modules.RowContextMenu", [ecm_widget_listView_RowContextMenu], {getContextMenuItemsType:function (items) {
            if (items && items.length > 0) {
                var item = items[0];
                if (item && (item instanceof ecm_model_AsyncTask || item instanceof ecm_model_AsyncTaskInstance)) {
                    return ier_util_menu.getTaskContextMenuType(items);
                } else {
                    return ier_util_menu.getContainersAndRecordsContextMenuType(items);
                }
            }
        }, loadContextMenu:function (selectedItems, callback) {
            for (var i in selectedItems) {
                var item = selectedItems[i];
                if (item && (item instanceof ecm_model_AsyncTask || item instanceof ecm_model_AsyncTaskInstance)) {
                    if (item.hasPrivilege(ier_constants.Privilege_TaskAdmin)) {
                        item[ier_constants.Privilege_TaskUser] = true;
                    }
                }
            }
            if (callback) {
                ecm_model_Desktop.loadMenuActions(this.getContextMenuItemsType(selectedItems), callback);
            }
        }});
    });
}, "url:ier/widget/dialog/templates/AddRecordCategoryDialogContent.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_general}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemGeneralPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemGeneralPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemPropertiesPane\"\r\n\t\t\tdata-dojo-type=\"ier.widget.panes.EntityItemPropertiesPane\"></div>\r\n\t</div>\r\n\t <div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_disposition}\"\r\n\t\tclass=\"ierPropertiesTitlePane\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemDispositionPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemDispositionPane\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${_ierMessages.baseDialog_security}\"\r\n\t\tclass=\"ierPropertiesTitlePane\" open=\"false\">\r\n\t\t<div data-dojo-attach-point=\"_entityItemSecurityPane\"\r\n\t\tdata-dojo-type=\"ier.widget.panes.EntityItemSecurityPane\"></div>\r\n\t</div>\r\n</div>", "url:ier/widget/templates/FilePlanSearchBar.html":"<div class=\"dijit dijitReset dijitInline dijitLeft fileplanSearchBar\" role=\"presentation\" >\r\n\t<div class=\"dijitReset dijitInputField dijitInputContainer\" data-dojo-attach-point=\"_searchBarContainer\">\r\n\t\t<input id=\"${id}_filterbox\" class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\r\n\t\ttype='${type}'/>\r\n\t</div>\r\n\t<span class=\"searchNode\" data-dojo-attach-point=\"_searchNode\" data-dojo-attach-event=\"onclick:_quickSearchButtonClicked\"></span>\r\n</div>", "ier/model/RecordFolderContainerMixin":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_Request, ier_constants, ier_util) {
        return dojo_declare("ier.model.RecordFolderContainerMixin", null, {addRecordFolder:function (className, criterias, permissions, dispSchedule, additionalLegacyScheduleParameters, callback) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (callback) {
                    var recordFolder = ier_util.createBaseEntityItem(response.parent, this.repository, null, this.parent);
                    this.updatePropertiesAndAttributes(recordFolder, false);
                    this.repository.onItemsUpdated(this);
                    callback(recordFolder);
                }
            }));
            params.requestParams[ier_constants.Param_ParentFolderId] = this.id;
            params.requestParams[ier_constants.Param_ClassName] = className;
            if (dispSchedule) {
                params.requestParams[ier_constants.Param_DispositionScheduleId] = dispSchedule.id;
                dojo_lang.mixin(params.requestParams, additionalLegacyScheduleParameters);
            }
            var data = new Object();
            data[ier_constants.Param_Properties] = criterias;
            data[ier_constants.Param_Permissions] = permissions;
            params["requestBody"] = data;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_CreateRecordFolder, ier_constants.PostEncoding, params);
        }});
    });
}, "url:ier/widget/admin/templates/AddDesktopSettingsPane.html":"<div class=\"ierAdminContent\">\r\n\t${_messages.admin_addDesktopPane_tooltip}\r\n\t</br>\r\n\t<table class=\"propertyTable\" role=\"presentation\" style=\"margin-top:10px;\"><tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_desktopName\">${_messages.admin_addDesktopPane_desktopName}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.admin_addDesktopPane_desktopNameHover}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_desktopName\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_desktopName\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true, propercase: false\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"required\">*</span>\r\n\t\t\t\t\t<label for=\"${id}_desktopId\">${_messages.admin_addDesktopPane_desktopId}:</label>\r\n\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${_messages.admin_addDesktopPane_desktopIDHover}\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_desktopId\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_desktopId\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true, propercase: false\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<label for=\"${id}_desktopDescription\">${_messages.admin_addDesktopPane_desktopDescription}:</label>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div id=\"${id}_desktopDescription\" data-dojo-type=\"ecm/widget/ValidationTextBox\" data-dojo-attach-point=\"_desktopDescription\"\r\n\t\t\t\t\t\tdata-dojo-props=\"trim: true, intermediateChanges: true\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t</tbody></table>\r\n\t<div  class=\"ecmAdminTabButtonBar\">\r\n\t\t<button data-dojo-type=\"dijit/form/Button\" data-dojo-attach-point=\"_addButton\" data-dojo-props=\"disabled: true\">${_messages.admin_addDesktopPane_addDesktop}</button>\r\n\t</div>\r\n</div>\r\n", "url:ier/widget/panes/templates/ConvertDefensibleDisposalDispositionPane.html":"<div class=\"ierEntityItemDispositionPane ierCommonPropertiesPane ecmCommonPropertiesPane\" style=\"margin-top:5px;\" data-dojo-attach-point=\"containerNode\">\r\n\t<table class=\"propertyTable\" data-dojo-attach-point=\"searchInDropdownSection\" role=\"presentation\">\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t${messages.recordCategory}\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t<div data-dojo-type=\"ier.widget.search.SearchInDropDown\" \r\n\t\t\t\t\t\tuseIERFolderSelector=\"true\"\r\n\t\t\t\t\t\tclass=\"dijitInline\"\r\n\t\t\t\t\t\tdropdownid=\"${id}_folderLocation\"\r\n\t\t\t\t\t\tshowIncludeSubFolders=\"false\"\r\n\t\t\t\t\t\tshowRepositoryTeamspace=\"true\"\r\n\t\t\t\t\t\tselectRootInitially=\"false\"\r\n\t\t\t\t\t\tisRequired=\"true\"\r\n\t\t\t\t\t\tdisplayForSearch=\"false\"\r\n\t\t\t\t\t\tdisplaySelectTeamspacesNode=\"false\",\r\n\t\t\t\t\t\tallowOnlySameDomainRepositories=\"true\"\r\n\t\t\t\t\t\tdata-dojo-attach-point=\"folderSelector\"\r\n\t\t\t\t\t\tstyle=\"width: 300px;\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id=\"${id}_disabledFolderSelector\" class=\"folderTargetLocation\" data-dojo-attach-point=\"disabledFolderSelector\"\r\n\t\t\t\t\t\tdata-dojo-type=\"dijit.form.TextBox\" style=\"display:none; width: 300px;\" data-dojo-props=\"disabled:true\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t\r\n\t<div id=\"${id}_defensibleDisposalPane\" data-dojo-attach-point=\"defensibleDisposalPane\" data-dojo-type=\"ier/widget/panes/DefensibleDisposalDispositionPane\"></div>\r\n</div>", "url:ier/widget/templates/QuickSearchList.html":"<div data-dojo-attach-point=\"containerNode\" style=\"height:100%\">\r\n\t<div style=\"padding-bottom:5px\">\r\n\t\t<div data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"searchBar\"></div>\r\n\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_quickSearchButtonClicked\">Search</button>\r\n\t</div>\r\n\t<div data-dojo-type=\"ecm.widget.TitlePane\" collapsed=\"false\" collapsible=\"true\" data-dojo-attach-point=\"_quickSearchTitlePane\">\r\n\t\t<div data-dojo-type=\"ier.widget.TilesList\" data-dojo-attach-point=\"_quickSearches\" style=\"overflow:auto; height:600px\">\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/ReportListing":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/data/ItemFileWriteStore", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ier/widget/TilesList", "dojo/text!./templates/ReportListing.html"], function (dojo_declare, dojo_lang, dojo_style, dojo_data_ItemFileWriteStore, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ier_widget_TilesList, template) {
        return dojo_declare("ier.widget.ReportListing", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {widgetsInTemplate:true, templateString:template, reportDefinitions:null, messages:null, store:null, postCreate:function () {
            this.inherited(arguments);
            this.tileList = new ier_widget_TilesList({style:"height: 100%, width: 100%", hideFilterBox:this.hideFilterBox});
            this.connect(this.tileList, "onItemSelected", "onItemSelected");
            this.connect(this.tileList, "onListItemDoubleClick", "onItemSelected");
            if (this.repository && this.repository.connected) {
                this.setRepository(this.repository);
            }
            this.domNode.appendChild(this.tileList.domNode);
            this.tileList.resize();
        }, onItemSelected:function (selectedItem) {
        }, setRepository:function (repository) {
            if (repository) {
                this.tileList.clearList();
                this.repository = repository;
                if (this.repository.isIERLoaded()) {
                    this.loadReportListing();
                } else {
                    this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                        this.loadReportListing();
                    }));
                }
            }
        }, loadReportListing:function () {
            if (this.repository.isFilePlanRepository()) {
                this.repository.retrieveReportDefinitions(dojo_lang.hitch(this, function (reportDefinitions) {
                    this.reportDefinitions = reportDefinitions;
                    this.onReportDefinitionsRetrieved(reportDefinitions);
                    this._loadReportListingCompleted(reportDefinitions);
                }));
            }
        }, refreshListing:function () {
            if (this.repository.isFilePlanRepository()) {
                this.repository.reportDefinitions = [];
                this.loadReportListing();
            }
        }, onReportDefinitionsRetrieved:function (reportDefinitions) {
        }, resize:function () {
            this.tileList.resize();
        }, clearList:function () {
            this.tileList.clearList();
        }, _loadReportListingCompleted:function (reportDefinitions) {
            var tempArray = [];
            for (var i = 0; i < reportDefinitions.length; i++) {
                tempArray.push({id:reportDefinitions[i].id, fpos:this.repository._objectStoreName, content:reportDefinitions[i].getDescription(), title:reportDefinitions[i].title, name:reportDefinitions[i].title, originalItem:reportDefinitions[i]});
            }
            var store = new dojo_data_ItemFileWriteStore({data:{identifier:"id", items:tempArray}});
            this.tileList.setStore(store);
            if (this.tileList.filter) {
                this.tileList.filter.set("value", "");
            }
            this.query = {"title":"*"};
            this.tileList.resize();
            this.tileList.setQuery(this.query);
        }});
    });
}, "ier/widget/tasks/ReportTaskInformationPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "dojo/dom-style", "dojo/dom-geometry", "dijit/layout/ContentPane", "ecm/model/AsyncTask", "ecm/model/AsyncTaskInstance", "ier/constants", "ier/messages", "ier/widget/tasks/TaskInformationPane", "ier/widget/tasks/ReportTaskDetailsPane", "ier/widget/tasks/ReportTaskReportParametersPane", "ier/widget/tasks/TaskResultsPane", "ier/widget/tasks/TaskErrorPane", "ier/widget/tasks/TaskExecutionRecordPane", "ier/widget/tasks/ReportTaskResultsPane", "dojo/text!./templates/TaskInformationPane.html", "idx/layout/HeaderPane"], function (dojo_declare, dojo_lang, dojo_connect, dojo_style, dojo_geo, dijit_layout_ContentPane, ecm_model_AsyncTask, ecm_model_AsyncTaskInstance, ier_constants, ier_messages, ier_widget_TaskInformationPane, ReportTaskDetailsPane, ReportTaskReportParametersPane, TaskResultsPane, TaskErrorPane, TaskEexecutionRecordPane, ReportTaskResultsPane, templateString) {
        return dojo_declare("ier.widget.tasks.ReportTaskInformationPane", [ier_widget_TaskInformationPane], {setUpTabs:function () {
            this.detailsTab = new ReportTaskDetailsPane({UUID:"details", title:ier_messages.taskPane_previewDetails, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.detailsTab);
            this.reportParametersTab = new ReportTaskReportParametersPane({UUID:"reportParameters", title:ier_messages.taskPane_previewReportParameters, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.reportParametersTab);
            this.resultsTab = new ReportTaskResultsPane({UUID:"results", title:ier_messages.taskPane_previewResults, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.resultsTab);
            this.errorsTab = new TaskErrorPane({UUID:"errors", title:ier_messages.taskPane_previewErrors, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.errorsTab);
            this.taskInstancesTab = new TaskEexecutionRecordPane({UUID:"asyncTaskInstances", title:ier_messages.taskPane_previewExecutionRecords, informationPane:this});
            this.taskPreviewTabContainer.addChild(this.taskInstancesTab);
        }});
    });
}, "url:ier/widget/layout/templates/FilePlanPane.html":"<div class=\"ecmCenterPane ierCenterPane\">\r\n\t<div data-dojo-type=\"dijit.layout.BorderContainer\" class=\"contentPane\" data-dojo-attach-point=\"mainContainer\" data-dojo-props=\"gutters:false\">\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'top'\" class=\"topPane filePaneTopContainer\">\r\n\t\t\t<div class=\"ierFilePlanSelectorContainer\" data-dojo-attach-point=\"_filePlanSelectorContainer\"></div>\r\n\t\t\t<div class=\"filePlanBreadcrumbContainer\">\r\n\t\t\t\t <div data-dojo-type=\"ecm.widget.Ellipsis\" data-dojo-attach-point=\"breadcrumbContainer\" class=\"breadcrumbContainer\" data-dojo-props=\"truncate:'left'\">\r\n\t\t\t    \t<div data-dojo-type=\"ecm.widget.Breadcrumb\" data-dojo-attach-point=\"breadcrumb\" class=\"breadcrumb\"></div>\r\n\t\t\t    </div>\r\n\t\t    </div>\r\n\t\t   <div class=\"filePlanSearchBarContainer\">\r\n\t\t   \t\t<div data-dojo-type=\"ier.widget.FilePlanSearchBar\" data-dojo-attach-point=\"_filePlanSearchBar\" class=\"filePlanSearchBar\" style=\"display:none\"></div>\r\n\t\t   </div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\" class=\"filepaneCenter\">\r\n\t\t\t<div data-dojo-attach-point=\"defaultTab\" data-dojo-type=\"idx.layout.BorderContainer\" class=\"contentPane\" data-dojo-props=\"gutters:false, design:'sidebar'\">\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'leading', splitter:true\" class=\"filePlanLeadingPaneOverflow\" >\r\n\t\t\t\t\t<div data-dojo-type=\"ier.widget.FolderTree\" data-dojo-attach-point=\"folderTree\" data-dojo-props=\"showFoldersOnly:true\" aria-label=\"${_messages.filePlanPane_tree}\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props=\"region:'center'\">\r\n\t\t\t\t\t<div data-dojo-attach-point=\"mainStackContainer\" \r\n\t\t\t\t\t\t data-dojo-type=\"dijit.layout.StackContainer\" \r\n\t\t\t\t\t\t region=\"center\" \r\n\t\t\t\t\t\t class=\"stackContainer\">\t \r\n\t\t\t\t\t\t<div class=\"ierContentList\" data-dojo-attach-point=\"folderContents\" data-dojo-type=\"ier.widget.listView.ContentList\"\r\n\t\t\t\t\t\t emptyMessage=\"${_messages.contentList_recordContainerIsEmpty}\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>", "ier/widget/panes/CommonPropertiesPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "dojo/dom-style", "ecm/widget/CommonPropertiesPane", "ecm/widget/dialog/ConfirmationDialog", "ecm/Messages", "ier/constants", "ier/messages", "ier/util/property", "ier/widget/_FolderSelectorDropDown", "ier/widget/ObjectSelector", "ier/widget/RadioButtonSelector"], function (dojo_declare, dojo_lang, dojo_class, dojo_style, ecm_widget_CommonPropertiesPane, ecm_widget_dialog_ConfirmationDialog, ecm_messages, ier_constants, ier_messages, ier_util_property, ier_widget_FolderSelectorDropDown, ier_widget_ObjectSelector, ier_widget_RadioButtonSelector) {
        return dojo_declare("ier.widget.panes.CommonPropertiesPane", [ecm_widget_CommonPropertiesPane], {ier_messages:ier_messages, _item:null, _enableReportPropertiesSyncUp:true, postCreate:function () {
            this.inherited(arguments);
            this._enableReportPropertiesSyncUp = true;
        }, destroy:function () {
            if (this._namingPatternDialog) {
                this._namingPatternDialog.destroy();
            }
            if (this._confirmRetainMetadata) {
                this._confirmRetainMetadata.destroy();
            }
            this._item = null;
            this.inherited(arguments);
        }, isAttributeShown:function (attributeDefinition, item) {
            var show = this.inherited(arguments);
            if (show && attributeDefinition && attributeDefinition.contentClass && attributeDefinition.contentClass.id) {
                if (attributeDefinition.contentClass.id == ier_constants.ClassName_DispositionTrigger) {
                    var eventType = attributeDefinition.getMetaData(ier_constants.DispositionEventType);
                    if (eventType == null) {
                        show = true;
                    } else {
                        if (eventType == ier_constants.EventType_PredefinedDateTrigger) {
                            show = ier_util_property.isPredefinedDateEventProperty(attributeDefinition.id);
                        } else {
                            if (eventType == ier_constants.EventType_ExternalEventTrigger) {
                                show = ier_util_property.isExternalEventProperty(attributeDefinition.id);
                            } else {
                                if (eventType == ier_constants.EventType_InternalEventTrigger) {
                                    show = ier_util_property.isInternalEventProperty(attributeDefinition.id);
                                } else {
                                    if (eventType == ier_constants.EventType_RecurringEventTrigger) {
                                        show = ier_util_property.isRecurringEventProperty(attributeDefinition.id);
                                    } else {
                                        show = true;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (attributeDefinition.contentClass.id == ier_constants.ClassName_ReportDefinition) {
                        if (attributeDefinition.id == ier_constants.Property_DocumentTitle) {
                            show = false;
                        }
                    }
                }
            }
            return show;
        }, _setFolderRoot:function (folderSelector, repository, rootFolderId) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    folderSelector.setRoot(itemRetrieved);
                }));
            } else {
                folderSelector.setRoot(repository);
            }
        }, renderAttributes:function (attributeDefinitions, item, reason, isReadOnly) {
            this.onRenderAttributes(attributeDefinitions, item, reason, isReadOnly);
            this._item = item;
            this.inherited(arguments);
        }, onRenderAttributes:function () {
        }, createControl:function (kwArgs, attributeDefinition, callback) {
            var controlWidget = null;
            var repository = attributeDefinition.contentClass.repository;
            var baseConstraints = {labelId:kwArgs.id, name:kwArgs.name || "", label:kwArgs.label || "", dataType:kwArgs.dataType, readOnly:kwArgs.readOnly, required:kwArgs.required};
            if (kwArgs && kwArgs.dataType && kwArgs.dataType == "xs:object") {
                var property = attributeDefinition.id;
                var objectSelector = this._createObjectSelector(repository, null, baseConstraints, kwArgs);
                var className = null;
                if (property == ier_constants.Property_Location || property == ier_constants.Property_HomeLocation) {
                    className = ier_constants.ClassName_Location;
                } else {
                    if (property == ier_constants.Property_AssociatedRecordType) {
                        className = ier_constants.ClassName_RecordType;
                    } else {
                        if (property == ier_constants.Property_AssociatedWorkflow) {
                            className = ier_constants.ClassName_WorkflowDefinition;
                            objectSelector.showVersionSelection = true;
                        } else {
                            if (property == ier_constants.Property_NamingPattern) {
                                className = ier_constants.ClassName_NamingPattern;
                                objectSelector.createCreateButton();
                                this.connect(objectSelector, "onItemCreate", function () {
                                    if (this._namingPatternDialog) {
                                        this._namingPatternDialog.destroy();
                                    }
                                    var AddNamingPatternDialog = null;
                                    require(["ier/widget/dialog/AddNamingPatternDialog"], function (ier_dialog_AddNamingPatternDialog) {
                                        AddNamingPatternDialog = ier_dialog_AddNamingPatternDialog;
                                    });
                                    if (AddNamingPatternDialog) {
                                        this._namingPatternDialog = new AddNamingPatternDialog();
                                        this._namingPatternDialog.show(repository);
                                    }
                                    return this._namingPatternDialog;
                                });
                            } else {
                                className = null;
                            }
                        }
                    }
                }
                if (className) {
                    objectSelector.setObjectClassName(className);
                } else {
                    objectSelector.setPropertyClassName(property);
                    objectSelector.contentClass = attributeDefinition.contentClass;
                }
                controlWidget = objectSelector;
            } else {
                switch (attributeDefinition.id) {
                  case ier_constants.Property_Reviewer:
                    attributeDefinition.dataType = ier_constants.DataType_User;
                    kwArgs.dataType = ier_constants.DataType_User;
                    kwArgs.repository = attributeDefinition.contentClass.repository;
                    var control = this.inherited(arguments, [kwArgs, attributeDefinition]);
                    if (control && control.value && control.value[0] && control.value[0].displayName) {
                        control.label = control.value[0].displayName;
                    } else {
                        if (control.value && control.value[0]) {
                            control.label = control.value[0];
                        }
                    }
                    controlWidget = control;
                    break;
                  case ier_constants.ReportEntry_disposal_schedule:
                    var objectSelector = this._createObjectSelector(repository, ier_constants.ClassName_DispositionSchedule, baseConstraints, kwArgs);
                    objectSelector.addDialogCssClass("ierMediumDialog");
                    controlWidget = objectSelector;
                    controlWidget = objectSelector;
                    break;
                  case ier_constants.Property_HoldName:
                    if (attributeDefinition.contentClass && (attributeDefinition.contentClass.id == ier_constants.ClassName_ReportHold || attributeDefinition.contentClass.name == ier_constants.ClassName_ReportHold)) {
                        var objectSelector = this._createObjectSelector(repository, ier_constants.ClassName_Hold, baseConstraints, kwArgs);
                        objectSelector.addDialogCssClass("ierMediumDialog");
                        controlWidget = objectSelector;
                    } else {
                        controlWidget = this.inherited(arguments, [kwArgs, attributeDefinition]);
                    }
                    break;
                  case ier_constants.ReportEntry_fileplan_browse:
                    var control = new ier_widget_FolderSelectorDropDown(baseConstraints);
                    dojo_style.set(control.domNode, "width", "300px");
                    this._setFolderRoot(control, attributeDefinition.contentClass.repository, ier_constants.Id_RecordsManagementFolder);
                    if (control) {
                        this.connect(control, "onFolderSelected", "onChange");
                    }
                    controlWidget = control;
                    break;
                  case ier_constants.ReportEntry_report_type:
                    var labels = [];
                    labels.push(this.ier_messages.report_detailed);
                    labels.push(this.ier_messages.report_summarized);
                    var control = new ier_widget_RadioButtonSelector(baseConstraints);
                    control.setLabels(labels);
                    control.createRendering();
                    if (control) {
                        this.connect(control, "onChange", "onChange");
                    }
                    controlWidget = control;
                    break;
                  case ier_constants.ReportEntry_rm_entity_type:
                    kwArgs.uniqueValues = true;
                    var control = this.inherited(arguments, [kwArgs, attributeDefinition]);
                    if (control) {
                        this.connect(control, "onChange", "onChange");
                    }
                    controlWidget = control;
                    break;
                  case ier_constants.Property_RetainMetadata:
                    kwArgs.valueOptions = [];
                    kwArgs.valueOptions.push({value:1, label:ecm_messages.false_label});
                    kwArgs.valueOptions.push({value:0, label:ecm_messages.true_label});
                    var control = this.inherited(arguments, [kwArgs, attributeDefinition]);
                    var initialValue = kwArgs.values.length ? kwArgs.values[0] : "";
                    if (control) {
                        this.connect(control, "onChange", function () {
                            var value = control.getValue();
                            if (value !== initialValue) {
                                if (value === 0) {
                                    if (this._confirmRetainMetadata) {
                                        this._confirmRetainMetadata.destroy();
                                    }
                                    this._confirmRetainMetadata = new ecm_widget_dialog_ConfirmationDialog({title:ecm_messages.warning_dialog_title, text:ier_messages.retainmetadata_confirmation, buttonLabel:ecm_messages.ok, onCancel:dojo_lang.hitch(this, function () {
                                        control.set("displayedValue", initialValue === 1 ? ecm_messages.false_label : "");
                                    })});
                                    dojo_class.add(this._confirmRetainMetadata.domNode, "ierConfirmationDialog");
                                    this._confirmRetainMetadata.show();
                                }
                                this.onPropertyChanged();
                            }
                        });
                    }
                    controlWidget = control;
                    break;
                  default:
                    controlWidget = this.inherited(arguments, [kwArgs, attributeDefinition]);
                    break;
                }
            }
            if (dojo_lang.isFunction(callback)) {
                callback(controlWidget);
            } else {
                return controlWidget;
            }
        }, _createObjectSelector:function (repository, className, baseConstraints, kwArgs) {
            var objectSelector = new ier_widget_ObjectSelector(baseConstraints);
            objectSelector.setRepository(repository);
            if (className) {
                objectSelector.setObjectClassName(className);
            }
            if (kwArgs.values && kwArgs.values.length > 0) {
                if (kwArgs.values[0]) {
                    repository.retrieveItem(kwArgs.values[0], dojo_lang.hitch(this, function (itemRetrieved) {
                        if (!objectSelector._destroyed) {
                            objectSelector.setSelectedItem(itemRetrieved, true);
                            this.onValueSet(itemRetrieved);
                        }
                    }), className);
                }
            }
            if (objectSelector) {
                this.connect(objectSelector, "onChange", "onChange");
            }
            return objectSelector;
        }, onChange:function (evt) {
            if (evt && evt.type == "keyup") {
                if (evt.target.name == ier_constants.Property_RMReportTitle && this._enableReportPropertiesSyncUp) {
                    var srcField = this.getFieldWithName(ier_constants.Property_RMReportTitle);
                    var destField = this.getFieldWithName(ier_constants.Property_ReportName);
                    var srcFieldValue = this.getPropertyValue(ier_constants.Property_RMReportTitle);
                    if (srcField && destField) {
                        this.setPropertyValue(ier_constants.Property_ReportName, srcFieldValue);
                    }
                } else {
                    if (evt.target.name == ier_constants.Property_ReportName) {
                        this._enableReportPropertiesSyncUp = false;
                    }
                }
            }
        }, onValueSet:function (itemRetrieved) {
        }, enablePropertieValuesSyncUp:function (enabled) {
            this._enableReportPropertiesSyncUp = enabled;
        }, appendCustomField:function (field) {
            this.getFields().push(field);
        }, getPropertiesJSON:function (includeReadonly, includeHidden, excludeEmptyValues) {
            var properties = this.inherited(arguments);
            for (var i in properties) {
                var prop = properties[i];
                for (var attrDefNdx in this.attributeDefinitions) {
                    var attrDef = this.attributeDefinitions[attrDefNdx];
                    if (prop.name == attrDef.id) {
                        prop["isShown"] = this.isAttributeShown(attrDef, this._item);
                    }
                }
            }
            return properties;
        }});
    });
}, "ier/widget/tasks/TaskErrorPane":function () {
    require({cache:{"url:ier/widget/tasks/templates/TaskPane.html":"<div class=\"taskPane\" style=\"width: 100%; height: 100%;\" dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"container\" style=\"padding-top: 10px;\">\r\n\t</div>\r\n</div>"}});
    define("ier/widget/tasks/TaskErrorPane", ["dojo/_base/declare", "dojo/dom-style", "dojo/dom-construct", "dijit/layout/ContentPane", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/LoggerMixin", "ier/constants", "ier/messages", "dojo/text!./templates/TaskPane.html"], function (dojo_declare, dojo_domStyle, dojo_construct, dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin, ier_constants, ier_messages, templateString) {
        return dojo_declare("ier.widget.tasks.TaskErrorPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {templateString:templateString, widgetsInTemplate:true, createRendering:function (item) {
            this.item = item;
            this.errorsContainer = dojo_construct.create("div");
            if (item.errors) {
                for (var i = item.errors.length; i--; ) {
                    var error = item.errors[i];
                    if (error && error.message) {
                        dojo_construct.create("pre", {"style":"", "class":"taskError", "innerHTML":error.message}, this.errorsContainer);
                    }
                }
                dojo_construct.place(this.errorsContainer, this.container, "only");
            }
        }});
    });
}, "ier/widget/dialog/IERBaseDialog":function () {
    define("ier/widget/dialog/IERBaseDialog", ["dojo/_base/declare", "dojo/_base/array", "dojo/dom-class", "dojo/dom-construct", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "ecm/widget/dialog/BaseDialog", "ier/util/util", "ier/messages"], function (dojo_declare, dojo_array, dojo_class, dojo_construct, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_dialog_BaseDialog, ier_util, ier_messages) {
        var baseDialog = dojo_declare("ier.widget.dialog.IERBaseDialog", [dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_dialog_BaseDialog], {widgetsInTemplate:true, _ierMessages:ier_messages, repository:null, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierBaseDialog");
            this.setResizable(true);
            this.resize();
        }, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, getChildPanes:function () {
            return this._childPanes;
        }, addChildPane:function (childPane) {
            if (!this._childPanes) {
                this._childPanes = [];
            }
            this._childPanes.push(childPane);
            this.connect(childPane, "onInputChange", function (widget) {
                this.validateInput();
            });
            this.connect(childPane, "onErrorOccurred", function (error, type) {
                this.setMessage(error, type);
            });
        }, addButton:function (buttonLabel, clickFunction, disabled, isDefault) {
            if (!this.childButtons) {
                this.childButtons = [];
            }
            var button = null;
            if (isDefault) {
                button = this.inherited(arguments, [buttonLabel, clickFunction, disabled, isDefault, "default_" + this.id]);
            } else {
                button = this.inherited(arguments);
            }
            this.childButtons.push(button);
            if (isDefault) {
                this._defaultChildButton = button;
            }
            return button;
        }, setDefaultButton:function (button) {
            this._defaultChildButton = button;
        }, getDefaultButton:function () {
            return this._defaultChildButton;
        }, isDefaultButtonEnabled:function () {
            if (this._defaultChildButton) {
                return this._defaultChildButton.get("disabled");
            }
            return false;
        }, setButtonEnabled:function (button, enabled) {
            if (button) {
                button.set("disabled", !enabled);
            }
        }, validateInput:function () {
            for (var i in this._childPanes) {
                var childPane = this._childPanes[i];
                if (childPane.isValidationRequired()) {
                    var validate = childPane.validate();
                    if (!validate) {
                        this.setButtonEnabled(this._defaultChildButton, false);
                        return false;
                    }
                }
            }
            this.setButtonEnabled(this._defaultChildButton, true);
            return true;
        }, createHrefLinkNode:function (link, text) {
            return dojo_construct.create("a", {href:link, title:text, innerHTML:text, target:"_blank"});
        }, getHelpUrl:function (forPage) {
            return ier_util.getHelpUrl(forPage);
        }, addChildWidget:function (widget) {
            if (!this._childWidgets) {
                this._childWidgets = [];
            }
            this._childWidgets.push(widget);
        }, destroy:function () {
            dojo_array.forEach(this._childPanes, function (widget) {
                if (widget && widget.destroyRecursive) {
                    widget.destroyRecursive();
                }
            });
            dojo_array.forEach(this._childWidgets, function (widget) {
                if (widget && widget.destroyRecursive) {
                    widget.destroyRecursive();
                }
            });
            this.inherited(arguments);
        }, addDomNodeCSSClass:function (cssClass) {
            dojo_class.add(this.domNode, cssClass);
        }});
        return baseDialog;
    });
}, "ier/widget/panes/AsyncTaskSchedulerPane":function () {
    require({cache:{"url:ier/widget/panes/templates/AsyncTaskSchedulerPane.html":"<div class=\"taskSchedulerPane\">\r\n</div>", "url:ier/widget/panes/templates/AsyncTaskSchedulerPaneContent.html":"<div class=\"taskSchedulerPane\">\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_scheduleInformation}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_nameTextBox\">${messages.Name}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_nameHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"nameTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" style=\"width: 300px\"\r\n\t\t\t\t\t\tid=\"${id}_nameTextBox\" name=\"${id}_nameTextBox\" data-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"descriptionRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label for=\"${id}_descriptionTextBox\">${messages.description_label}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_descriptionHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"descriptionTextBox\" data-dojo-type=\"ecm/widget/ValidationSimpleTextarea\" style=\"width: 300px\"\r\n\t\t\t\t\t\t\tid=\"${id}_descriptionTextBox\" name=\"${id}_descriptionTextBox\" data-dojo-props=\"trim: true, value: '',intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"startTimeRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t${messages.taskSchedulerPane_startTime}:\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_startTimeHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"startTimeDateTimeTextBox\" data-dojo-type=\"idx/form/DateTimeTextBox\" \r\n\t\t\t\t\t\t\tid=\"${id}_startTimeTextBox\"></span>\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"startImmediatelyCheckbox\" data-dojo-type=\"dijit/form/CheckBox\" \r\n\t\t\t\t\t\t\tname=\"${id}_startImmediatelyCheckBox\" id=\"${id}_startImmediatelyCheckBox\" data-dojo-attach-event=\"onChange:onInputChange\"></span>\r\n\t\t\t\t\t\t<label for=\"${id}_startImmediatelyCheckBox\">${messages.taskSchedulerPane_startImmediately}</label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr data-dojo-attach-point=\"reoccurenceRow\">\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t${messages.taskSchedulerPane_recurrence}:\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_recurrenceHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t <fieldset style=\"padding: 0px; margin: 0px\">\r\n\t\t                    <legend style=\"display: none;\">${messages.taskSchedulerPane_recurrence}</legend>\r\n\t\t                    <div value=\"true\" type=\"radio\" name=\"${id}_recurringRadioGroup\" data-dojo-attach-point=\"enableRecurrenceRadioButton\" id=\"${id}_enableRecurringRadio\" \r\n\t\t                    \tdata-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\"></div>\r\n\t\t                    <label for=\"${id}_enableRecurringRadio\">${messages.enable}</label>&nbsp;\r\n\t\t                    <div value=\"false\" type=\"radio\" name=\"${id}_recurringRadioGroup\" data-dojo-attach-point=\"disableRecurrenceRadioButton\" id=\"${id}_disableRecurringRadio\" \r\n\t\t                    \tdata-dojo-type=\"ecm.widget.RadioButton\" data-dojo-attach-event=\"onChange:onInputChange\" checked></div>\r\n\t\t                    <label for=\"${id}_disableRecurringRadio\">${messages.disable}</label>\r\n\t               \t\t</fieldset>\r\n\t               \t</td>\r\n\t           </tr>\r\n\t           <tr data-dojo-attach-point=\"reoccurenceIntervalRow\">\r\n\t           \t\t<td colspan=\"2\">\r\n\t               \t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-left: 30px;\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t\t\t\t\t<span data-dojo-attach-point=\"intervalRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t\t\t\t\t<label for=\"${id}_intervalTextBox\">${messages.taskSchedulerPane_interval}:</label>\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_intervalHoverHelp}\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"ierFloatLeft\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div data-dojo-attach-point=\"intervalNumberSpinner\" data-dojo-type=\"dijit/form/NumberSpinner\" id=\"${id}_intervalTextBox\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"value:1,constraints:{min:1,max:1000,places:0},disabled:true\" data-dojo-attach-event=\"onKeyUp:onInputChange\"></div>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<select style=\"margin-left: 5px;\" data-dojo-attach-point=\"intervalSelect\" data-dojo-type=\"dijit/form/Select\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"disabled: true, intermediateChanges: true\" data-dojo-attach-event=\"onChange:onInputChange\" aria-label=\"${ier_messages.timeUnit}\">\r\n\t\t\t\t\t\t\t\t\t\t\t \t<option value=\"hours\">${messages.hours}</option>\r\n\t\t\t\t\t\t\t\t\t\t     \t<option value=\"days\" selected=\"selected\">${messages.days}</option>\r\n\t\t\t\t\t\t\t\t\t\t     \t<option value=\"weeks\">${messages.weeks}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t\t\t\t\t<span data-dojo-attach-point=\"endTimeRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t\t\t\t\t${messages.endTime}:\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_endTimeHoverHelp}\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t\t\t\t\t<div data-dojo-attach-point=\"endTimeDateTimeBox\" data-dojo-type=\"idx/form/DateTimeTextBox\" id=\"${id}_endTimeTextBox\" \r\n\t\t\t\t\t\t\t\t\t\t\tdata-dojo-props=\"disabled:true\"></div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr> \r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"loginInformation\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_loginInformation}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"usernameRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_usernameTextBox\">${messages.username}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"usernameHoverHelp\" message=\"${messages.taskSchedulerPane_usernameHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"usernameTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" id=\"${id}_usernameTextBox\" name=\"${id}_usernameTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<span data-dojo-attach-point=\"passwordRequired\" class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t\t\t\t<label for=\"${id}_passwordTextBox\">${messages.password}</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" data-dojo-attach-point=\"passwordHoverHelp\" message=\"${messages.taskSchedulerPane_passwordHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"passwordTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" type=\"password\" id=\"${id}_passwordTextBox\" \r\n\t\t\t\t\t\t\tname=\"${id}_passwordTextBox\" data-dojo-props=\"trim: true, required: true, intermediateChanges: true\" \r\n\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\t<div data-dojo-type=\"idx.layout.TitlePane\" data-dojo-attach-point=\"notification\"\r\n\t\ttitle=\"${messages.taskSchedulerPane_notification}\">\r\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse\" class=\"generalTable\" role=\"presentation\">\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t\t\t\t<label for=\"${id}_emailAddressTextBox\">${messages.taskSchedulerPane_emailAddress}:</label>\r\n\t\t\t\t\t\t<div data-dojo-type=\"ecm.widget.HoverHelp\" message=\"${messages.taskSchedulerPane_emailAddressHoverHelp}\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td class=\"propertyRowValue\">\r\n\t\t\t\t\t\t<div data-dojo-attach-point=\"emailAdressTextBox\" data-dojo-type=\"ecm/widget/ValidationTextBox\" id=\"${id}_emailAddressTextBox\" name=\"${id}_emailAddressTextBox\"\r\n\t\t\t\t\t\t\tdata-dojo-props=\"trim: true,intermediateChanges: true\" \r\n\t\t\t\t\t\t\tdata-dojo-attach-event=\"onChange:onInputChange\" style=\"width: 300px\"></div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>"}});
    define("ier/widget/panes/AsyncTaskSchedulerPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "dojo/dom-style", "dojo/date/stamp", "dojo/aspect", "dijit/registry", "ecm/Messages", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialogPane", "ecm/widget/taskManager/AsyncTaskSchedulerPane", "dojo/text!./templates/AsyncTaskSchedulerPane.html", "dojo/text!./templates/AsyncTaskSchedulerPaneContent.html"], function (dojo_declare, dojo_lang, dojo_construct, dojo_style, dojo_date_stamp, dojo_aspect, dijit_registry, ecm_messages, ier_constants, ier_messages, ier_widget_dialog_IERBaseDialogPane, ecm_widget_AsyncTaskSchedulerPane, templateString, asyncTaskSchedulerContentPaneString) {
        return dojo_declare("ier.widget.panes.AsyncTaskSchedulerPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, constants:ier_constants, messages:ecm_messages, ier_messages:ier_messages, repository:null, title:ier_messages.setSchedule, showLoginInformation:false, asyncTaskSchedulerPane:null, postCreate:function () {
            this.inherited(arguments);
            var pane = null;
            pane = new ecm_widget_AsyncTaskSchedulerPane({showLoginInformation:this.showLoginInformation, templateString:asyncTaskSchedulerContentPaneString, ier_messages:ier_messages});
            this.asyncTaskSchedulerPane = pane;
            dojo_construct.place(this.asyncTaskSchedulerPane.domNode, this.domNode);
            this.asyncTaskSchedulerPane.startImmediatelyCheckbox.set("checked", true);
            this.asyncTaskSchedulerPane.startTimeDateTimeTextBox.set("disabled", true);
            this.asyncTaskSchedulerPane.startTimeDateTimeTextBox.dateTextBox.set("label", ier_messages.startDate);
            this.asyncTaskSchedulerPane.startTimeDateTimeTextBox.timeTextBox.set("label", ier_messages.startTime);
            this.asyncTaskSchedulerPane.endTimeDateTimeBox.dateTextBox.set("label", ier_messages.endDate);
            this.asyncTaskSchedulerPane.endTimeDateTimeBox.timeTextBox.set("label", ier_messages.endTime);
            this.asyncTaskSchedulerPane.descriptionTextBox.set("required", false);
            this.asyncTaskSchedulerPane.emailAdressTextBox.set("required", false);
            dojo_aspect.after(this.asyncTaskSchedulerPane, "disableLoginPane", dojo_lang.hitch(this, function () {
                if (this.asyncTaskSchedulerPane.usernameTextBox.get("disabled") == true) {
                    this.asyncTaskSchedulerPane.usernameTextBox.reset();
                    this.asyncTaskSchedulerPane.passwordTextBox.reset();
                }
            }));
            this.connect(this.asyncTaskSchedulerPane, "onInputChange", "onInputChange");
        }, createRendering:function (repository) {
            this.asyncTaskSchedulerPane.requireLoginInformation = true;
            this.asyncTaskSchedulerPane.validateLoginPane();
            this.asyncTaskSchedulerPane.onInputChange();
        }, _getScheduleAttr:function () {
            return this.asyncTaskSchedulerPane.get("schedule");
        }, _setScheduleAttr:function (schedule) {
            this.asyncTaskSchedulerPane.set("schedule", schedule);
        }, getAsyncTaskName:function () {
            return this.asyncTaskSchedulerPane.nameTextBox.get("value");
        }, validate:function () {
            return this.asyncTaskSchedulerPane.validate();
        }});
    });
}, "url:ier/widget/panes/templates/IERBaseDialogPane.html":"<div data-dojo-attach-point=\"containerNode\" style=\"height: 100%; width: 100%\">\r\n</div>\r\n", "url:ier/widget/dialog/templates/FileRecord.html":"<div data-dojo-type=\"dijit.layout.ContentPane\" class=\"ierDialogContent\">\r\n\t<table class=\"generalTable\" role=\"presentation\">\r\n\t<tbody>   \r\n\t\t<tr data-dojo-attach-point=\"_folderSelectorRow\">\r\n\t\t<td class=\"propertyRowLabel\">\r\n\t\t\t<span class=\"ecmLabeledInputFieldRequired\">*</span>\r\n\t\t\t${_messages.fileRecordDialog_fileplanLocation}:\r\n\t\t</td>\r\n\t\t<td class=\"propertyRowValue\">\r\n\t\t\t<div data-dojo-attach-point=\"_folderSelectorCell\">\r\n\t\t\t</div>\r\n\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t</table>\r\n\r\n</div>", "ier/widget/dialog/IERBaseDialogPane":function () {
    define(["dojo/_base/declare", "dojo/_base/array", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/layout/ContentPane", "ecm/LoggerMixin", "ecm/widget/HoverHelp", "ier/util/util", "ier/messages"], function (dojo_declare, dojo_array, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, dijit_layout_ContentPane, ecm_LoggerMixin, ecm_widget_HoverHelp, ier_util, ier_messages) {
        return dojo_declare("ier.widget.dialog.IERBaseDialogPane", [dijit_layout_ContentPane, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, ecm_LoggerMixin], {widgetsInTemplate:true, _messages:ier_messages, repository:null, isValidationRequired:false, getRepository:function () {
            return this.repository;
        }, setRepository:function (repository) {
            this.repository = repository;
        }, validate:function () {
            return true;
        }, isValidationRequired:function () {
            return this.isValidationRequired;
        }, addChildWidget:function (widget) {
            if (!this._childWidgets) {
                this._childWidgets = [];
            }
            this._childWidgets.push(widget);
        }, onInputChange:function (widget) {
        }, onSelected:function () {
        }, onErrorOccurred:function (message, type) {
        }, createHoverHelp:function (promptText) {
            var hoverHelp = new ecm_widget_HoverHelp({message:promptText});
            hoverHelp.startup();
            this.addChildWidget(hoverHelp);
            return hoverHelp;
        }, getHelpUrl:function (forPage) {
            return ier_util.getHelpUrl(forPage);
        }, createHtmlLink:function (link, text) {
            return "<a href=\"" + link + "\" target=\"_blank\" title=\"" + text + "\">" + text + "</a>";
        }, destroy:function () {
            dojo_array.forEach(this._childWidgets, function (widget) {
                if (widget && widget.destroyRecursive) {
                    widget.destroyRecursive();
                }
            });
            this.inherited(arguments);
        }});
    });
}, "url:ier/widget/dialog/templates/PropertyDialogContent.html":"<div data-dojo-type=\"dijit/layout/ContentPane\">\r\n\t<div data-dojo-type=\"dijit/layout/TabContainer\" class=\"ierDialogContent\">\r\n\t\t<div data-dojo-type=\"ier/widget/panes/EntityItemPropertiesPane\" data-dojo-attach-point=\"_propertiesPane\" \r\n\t\ttitle=\"${_ierMessages.baseDialog_properties}\"></div>\r\n\t</div>\r\n</div>\r\n", "ier/widget/tasks/ReportTaskReportParametersPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/dom-construct", "dojo/date/locale", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/tasks/TaskDetailsPane", "dojo/text!./templates/TaskDetailsPane.html", "ecm/widget/PropertyGrid"], function (dojo_declare, dojo_lang, dojo_domStyle, dojo_construct, dojo_date_locale, ier_constants, ier_messages, ier_util, ier_widget_TaskDetailsPane, templateString, ecm_grid_PropertyGrid) {
        return dojo_declare("ier.widget.tasks.ReportTaskReportParametersPane", [ier_widget_TaskDetailsPane], {templateString:templateString, widgetsInTemplate:true, postCreate:function () {
            var brNode = dojo_construct.create("br");
            dojo_construct.place(brNode, this.gridContainer);
        }, createRendering:function (item) {
            var repository = ier_util.getRepository(item.taskRequest.specificTaskRequest.ier_p8RepositoryId, item.taskRequest.ceEJBURL);
            if (repository) {
                var reportHoldingContentClass = repository.getContentClass(ier_constants.ClassName_ReportHold);
                reportHoldingContentClass.retrieveAttributeDefinitions(dojo_lang.hitch(this, function (attributeDefinitions) {
                    this.attributes = attributeDefinitions;
                    this._createReportPropertiesGrid(item);
                    this._createReportOutputPropertiesGrid(item);
                }));
            }
        }, _createReportPropertiesGrid:function (item) {
            if (this.reportPropGrid) {
                this.reportPropGrid.destroy();
            }
            var data = {};
            var resources = {};
            var propertiesArray = [];
            if (item.attributes.type == ier_constants.TaskType_ReportClass) {
                if (item.taskRequest && item.taskRequest.specificTaskRequest == null) {
                    item.taskRequest.specificTaskRequest = item.taskRequest.reportTaskRequest;
                }
                if (item instanceof ecm.model.AsyncTaskInstance) {
                    item = item.parent;
                }
                this._addValue("ier_reportName", item, data, resources, propertiesArray);
                for (var index in item.taskRequest.specificTaskRequest.criterias) {
                    var object = item.taskRequest.specificTaskRequest.criterias[index];
                    if (object) {
                        var attributeDef = this.attributes ? ier_util.getAttributeDefinition(this.attributes, object.name) : null;
                        name = object.name;
                        label = attributeDef && attributeDef.name ? attributeDef.name : object.label;
                        value = object.displayValue ? object.displayValue : object.value;
                        if (object.dataType == "xs:user") {
                            label = ier_messages.username;
                            value = value && value[0] ? value[0].displayName : "";
                        }
                        if (object.dataType == "xs:timestamp") {
                            if (value) {
                                value = dojo_date_locale.format(new Date(value), {datePattern:"MM/dd/yyyy", timePattern:"hh:mm:ss a"});
                            }
                        }
                        if (object.name == ier_constants.ReportEntry_hold_name) {
                            label = ier_messages.report_holdName;
                        }
                    }
                    if (value) {
                        data[name] = value;
                        resources[name + "Label"] = label || name;
                        propertiesArray.push(name);
                    }
                }
                var taskProperties = propertiesArray.join(",");
                this.reportPropGrid = new ecm_grid_PropertyGrid({data:data, properties:taskProperties, labelKeySuffix:"Label", resources:resources});
                this.reportPropGrid.startup();
                this.reportPropGrid.placeAt(this.gridContainer, "first");
                this.resize();
            }
        }, _createReportOutputPropertiesGrid:function (item) {
            if (this.reportOutputPropGrid) {
                this.reportOutputPropGrid.destroy();
            }
            var data = {};
            var resources = {};
            var propertiesArray = [];
            if (item.attributes.type == ier_constants.TaskType_ReportClass) {
                if (item.taskRequest && item.taskRequest.specificTaskRequest == null) {
                    item.taskRequest.specificTaskRequest = item.taskRequest.reportTaskRequest;
                }
                if (item instanceof ecm.model.AsyncTaskInstance) {
                    item = item.parent;
                }
                this._addValue(ier_constants.Param_SaveInRepository, item, data, resources, propertiesArray);
                this._addValue(ier_constants.Param_SaveInFolderLocationName, item, data, resources, propertiesArray);
                this._addValue(ier_constants.Param_ReportTitle, item, data, resources, propertiesArray);
                var taskProperties = propertiesArray.join(",");
                this.reportOutputPropGrid = new ecm_grid_PropertyGrid({data:data, properties:taskProperties, labelKeySuffix:"Label", resources:resources});
                this.reportOutputPropGrid.startup();
                this.reportOutputPropGrid.placeAt(this.gridContainer);
                this.resize();
            }
        }, _addValue:function (name, item, data, resources, propertiesArray) {
            var value = item.taskRequest.specificTaskRequest[name];
            var label = this.getLabel(name);
            if (value) {
                data[name] = value;
                resources[name + "Label"] = label || name;
                propertiesArray.push(name);
            }
        }});
    });
}, "ier/widget/panes/EntityItemLinksPane":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/event", "dojo/keys", "ier/constants", "ier/messages", "ier/util/util", "ecm/model/Request", "ier/model/ResultSet", "ier/widget/dialog/IERBaseDialogPane", "dijit/layout/BorderContainer", "dojo/text!./templates/EntityItemLinksPane.html", "dijit/layout/ContentPane", "ier/widget/listView/ContentList", "ier/widget/FilePlanSearchBar"], function (dojo_declare, dojo_lang, dojo_array, dojo_event, dojo_keys, ier_constants, ier_messages, ier_util, ecm_model_Request, ier_model_ResultSet, ier_widget_dialog_IERBaseDialogPane, BorderContainer, templateString) {
        return dojo_declare("ier.widget.panes.EntityItemLinksPane", [BorderContainer, ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, postCreate:function () {
            this.inherited(arguments);
            this.connect(this, "onKeyDown", function (evt) {
                if (evt.keyCode == dojo_keys.ENTER) {
                    dojo_event.stop(evt);
                }
            });
        }, isLoaded:function () {
            return this._isLoaded;
        }, createRendering:function (repository, item) {
            this.repository = repository;
            this.item = item;
            this._updateContentList();
        }, _updateContentList:function (filterString) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                response = this._customizeResponseObj(response);
                response.repository = this.repository;
                var resultSet = new ier_model_ResultSet(response);
                this._contentList.setResultSet(resultSet);
                this._contentList.resize();
                this._isLoaded = true;
            }));
            params.requestParams[ier_constants.Param_EntityId] = this.item.getGuidId();
            params.requestParams[ier_constants.Param_IsContainer] = this.item.isFolder();
            params.requestParams[ier_constants.Param_FilterString] = filterString;
            ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_RetrieveLinks, ier_constants.PostEncoding, params);
        }, _customizeResponseObj:function (response) {
            var cols = response.columns.cells[0];
            if (cols.length > 1) {
                cols[0].formatter = this._formatEntityType;
                cols[0].decorator = undefined;
                cols[0].name = this._messages.entityItemLinksPane_label_EntityType;
                cols[0].field = "ClassName";
                cols[0].width = "15em";
                cols[0].sortable = true;
                cols[2].name = this._messages.entityItemLinksPane_label_LinkTo;
                cols.pop();
                var rows = response.rows;
                var myGuidId = this.item.getGuidId();
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (myGuidId == row.attributes.Head[0]) {
                        row.attributes.Head = row.attributes.Tail;
                    } else {
                        row.attributes.Tail = row.attributes.Head;
                    }
                }
            }
            return response;
        }, _filterContentOnEnter:function (evt) {
            if (evt.keyCode == dojo_keys.ENTER) {
                this._updateContentList(filterString);
            }
        }, _emtpyFormatter:function (item) {
            return "";
        }, _formatEntityType:function (item) {
            return item["ClassName"];
        }});
    });
}, "ier/widget/panes/AddItemPane":function () {
    define(["dojo/_base/declare", "dojo/dom-construct", "dojo/_base/lang", "dojo/io-query", "dojo/dom-style", "ier/constants", "ier/messages", "ier/widget/dialog/IERBaseDialogPane", "ecm/widget/FolderSelectorCallback", "ecm/widget/UnselectableFolder", "dojo/text!./templates/AddItemPane.html", "ecm/widget/_FolderSelectorDropDown", "ecm/widget/ValidationTextBox", "ier/widget/search/SearchInDropDown", "idx/layout/TitlePane", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/EntityItemSecurityPane"], function (dojo_declare, dojo_construct, dojo_lang, dojo_ioQuery, dojo_style, ier_constants, ier_messages, ier_widget_dialog_IERBaseDialogPane, ecm_widget_FolderSelectorCallback, ecm_widget_UnselectableFolder, templateString) {
        return dojo_declare("ier.widget.panes.AddItemPane", [ier_widget_dialog_IERBaseDialogPane], {templateString:templateString, constants:ier_constants, _messages:ier_messages, _saveInFolder:null, documentTitle:null, title:ier_messages.baseDialog_addItemTitle, showPermissionPane:true, defaultClass:ier_constants.ClassName_Document, postCreate:function () {
            this.inherited(arguments);
            if (!this.showPermissionPane) {
                dojo_style.set(this.securityTitlePane.domNode, "display", "none");
            }
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback("privAddToFolder", ier_messages.noPermissionAdd);
            this.folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            this.connect(this.folderSelector, "onFolderSelected", function (folder) {
                this._saveInFolder = folder;
                if (folder && folder.item) {
                    this.folderSelector.repository = folder.item.repository;
                }
                if (this.folderSelector.repository != this.repository || !this._entityItemPropertiesPaneCreated) {
                    this.repository = this.folderSelector.repository;
                    this._entityItemPropertiesPaneCreated = true;
                    this._entityItemPropertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_Document, defaultNameProperty:ier_constants.Property_DocumentTitle, parentFolder:folder.item, defaultClass:this.defaultClass, });
                }
                this.onInputChange();
            });
            this.connect(this._entityItemPropertiesPane, "onCompleteRendering", function () {
                this.contentClass = this._entityItemPropertiesPane.getContentClass();
                var properties = this._entityItemPropertiesPane.getProperties();
                this._entityItemPropertiesPane.setPropertyValue(ier_constants.Property_DocumentTitle, this.documentTitle);
                if (this.showPermissionPane) {
                    this._entityItemSecurityPane.createRendering(this.repository, null, this._saveInFolder.item, this.contentClass, properties);
                }
                this._entityItemPropertiesPane.resizeCommonProperties();
                this.onInputChange();
                this.resize();
            });
            this.connect(this._entityItemPropertiesPane, "onRenderAttributes", function (attributes, deferArray) {
                this.onRenderAttributes(attributes, deferArray);
            });
        }, onRenderAttributes:function (attributes, deferArray) {
        }, createRendering:function (repository, defaultFolder) {
            if (repository != this.repository) {
                this.repository = repository;
                this.clearValues();
                this.folderSelector.setRoot(this.repository);
                this.setDefaultFolder(defaultFolder);
                this.onInputChange();
            }
        }, setDefaultFolder:function (folder) {
            if (folder) {
                this.repository.retrieveItem(folder, dojo_lang.hitch(this, function (itemRetrieved) {
                    this.folderSelector.setSelected(itemRetrieved);
                    this.contentClass = this._entityItemPropertiesPane.getContentClass();
                    this.onInputChange();
                }));
            }
        }, validate:function () {
            return this._saveInFolder != null && this.contentClass != null && this._entityItemSecurityPane.validate() && this._entityItemPropertiesPane.validate();
        }, clearValues:function () {
            this._saveInFolder = null;
            this.contentClass = null;
        }, getSavedInFolder:function () {
            return this._saveInFolder;
        }, getRootDownloadLinkURL:function () {
            var queryParams = {desktop:ecm.model.desktop.id, repositoryId:this._saveInFolder.item.repository.id};
            var rootPath = ecm.model.desktop._cServicesUrl || "/navigator";
            var linkUrl = rootPath + "/bookmark.jsp?" + dojo_ioQuery.objectToQuery(queryParams);
            return (window.location.protocol + "//" + window.location.host + linkUrl);
        }, setDocumentTitle:function (value) {
            this.documentTitle = value;
            this._entityItemPropertiesPane.setPropertyValue(ier_constants.Property_DocumentTitle, value);
        }, getDocumentTitle:function () {
            return this._entityItemPropertiesPane.getPropertyValue(ier_constants.Property_DocumentTitle);
        }, getProperties:function () {
            return this._entityItemPropertiesPane.getProperties();
        }, getClassName:function () {
            var contentClass = this._entityItemPropertiesPane.getContentClass();
            if (contentClass) {
                return contentClass.id;
            } else {
                return null;
            }
        }, getPermissions:function () {
            return this._entityItemSecurityPane.getPermissions();
        }});
    });
}, "ier/widget/Tree":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", "ecm/widget/Tree", "ier/constants", "ier/util/util", "ier/model/_BaseEntityObject"], function (dojo_declare, dojo_lang, dojo_construct, ecm_widget_Tree, ier_constants, ier_util, ier_model_BaseEntityObject) {
        return dojo_declare("ier.widget.Tree", [ecm_widget_Tree], {getIconClass:function (item, opened) {
            var iconClass = null;
            if (item) {
                if (opened) {
                    var className = item.template;
                    var entityType = item.isInstanceOf(ier_model_BaseEntityObject) ? item.getEntityType() : null;
                    if (className == ier_constants.ClassName_FilePlan || entityType == ier_constants.EntityType_FilePlan) {
                        iconClass = "filePlanOpenIcon";
                    } else {
                        if (entityType == ier_constants.EntityType_RecordCategory || className == ier_constants.ClassName_RecordCategory) {
                            iconClass = "recordCategoryOpenIcon";
                        } else {
                            if (entityType == ier_constants.EntityType_ElectronicRecordFolder || className == ier_constants.ClassName_ElectronicRecordFolder) {
                                iconClass = "recordElectronicFolderOpenIcon";
                            } else {
                                if (entityType == ier_constants.EntityType_HybridRecordFolder || className == ier_constants.ClassName_HybridRecordFolder) {
                                    iconClass = "recordHybridFolderOpenIcon";
                                } else {
                                    if (entityType == ier_constants.EntityType_PhysicalRecordFolder || className == ier_constants.ClassName_PhysicalRecordFolder) {
                                        iconClass = "recordPhysicalFolderOpenIcon";
                                    } else {
                                        if (entityType == ier_constants.EntityType_PhysicalContainer || className == ier_constants.ClassName_PhysicalContainer) {
                                            iconClass = "recordBoxOpenIcon";
                                        } else {
                                            if (entityType == ier_constants.EntityType_Volume || className == ier_constants.ClassName_Volume) {
                                                iconClass = "volumeOpenIcon";
                                            } else {
                                                iconClass = "openFolderIcon";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    iconClass = ier_util.getIconClass(item);
                }
            }
            if (iconClass != null) {
                return iconClass;
            } else {
                return this.inherited(arguments);
            }
        }});
    });
}, "ier/widget/dialog/HoldDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-class", "ier/constants", "ier/messages", "ier/util/dialog", "ier/widget/dialog/IERBaseDialog", "ecm/widget/dialog/MessageDialog", "dojo/text!./templates/HoldDialogContent.html", "dijit/layout/ContentPane", "dijit/layout/TabContainer", "ier/widget/panes/EntityItemPropertiesPane", "ier/widget/panes/HoldConditionPane"], function (dojo_declare, dojo_lang, dojo_array, dojo_class, ier_constants, ier_messages, ier_util_dialog, ier_dialog_IERBaseDialog, ecm_dialog_MessageDialog, contentString) {
        return dojo_declare("ier.widget.dialog.HoldDialog", [ier_dialog_IERBaseDialog], {title:ier_messages.holdDialog_title, contentString:contentString, _blockEditHold:false, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierHoldDialog");
            this.setIntroText(ier_messages.holdDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh19.htm"));
            this.setResizable(true);
            this.addChildPane(this._propertiesPane);
            this.addChildPane(this._conditionPane);
            this._saveButton = this.addButton(ier_messages.baseDialog_saveButton, "_onClickSave", false, true);
            this._applyButton = this.addButton(ier_messages.baseDialog_applyButton, "_onClickApply", false, false);
            this.connect(this._propertiesPane, "onCompleteRendering", function () {
                this._propertiesPane.resize();
                this.resize();
            });
        }, show:function (repository, item) {
            this.inherited(arguments);
            this.repository = repository;
            this.item = item;
            if (!item) {
                this.set("title", this._ierMessages.holdDialog_add_title);
                this._saveButton.set("label", this._ierMessages.baseDialog_addButton);
                this._applyButton.domNode.style.display = "none";
            }
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
            this.resize();
        }, validateInput:function () {
            if (this._blockEditHold) {
                this._applyButton.set("disabled", true);
                this._saveButton.set("disabled", true);
                return false;
            }
            var valid = this.inherited(arguments);
            if (valid && this._conditionPane) {
                valid = this._conditionPane.isValid();
            }
            this._applyButton.set("disabled", !valid);
            this._saveButton.set("disabled", !valid);
            return valid;
        }, _renderPropertiesPane:function (isReadOnly) {
            this._propertiesPane.createRendering({repository:this.repository, rootClassId:ier_constants.ClassName_Hold, defaultNameProperty:ier_constants.Property_HoldName, entityType:ier_constants.EntityType_Hold, hideContentClassSelector:true, isReadOnly:isReadOnly, item:this.item});
        }, _renderDialog:function () {
            var readOnly = true;
            if (this.item) {
                var sweepState = this.item.attributes["SweepState"];
                if (sweepState == 0) {
                    readOnly = false;
                } else {
                    if (sweepState == 1) {
                        var sweepDate = this.item.attributes["LastHoldSweepDate"];
                        if (sweepDate == null || sweepDate == "") {
                            readOnly = false;
                        }
                    }
                }
            } else {
                readOnly = false;
            }
            var holdId = (this.item && this.item.id);
            if (holdId) {
                this.repository.getObjectConditions(holdId, ier_constants.EntityType_Hold, dojo_lang.hitch(this, function (conditions) {
                    this._conditionPane.set("repository", this.repository);
                    this._conditionPane.set("conditions", conditions);
                    this._blockEditHold = this._checkMetadata(conditions);
                    if (!this._blockEditHold) {
                        this._blockEditHold = this._haveMixedOperators(conditions);
                    }
                    if (readOnly || this._blockEditHold) {
                        this._conditionPane.setReadOnly();
                    }
                    this._renderPropertiesPane(this._blockEditHold);
                    if (this._blockEditHold) {
                        this._applyButton.set("disabled", true);
                        this._saveButton.set("disabled", true);
                        this._conditionPane._previewButton1.set("disabled", true);
                        this._messageDialog && this._messageDialog.destroy();
                        this._messageDialog = new ecm_dialog_MessageDialog({text:ier_messages.commonConditionForm_metadataContentSearch});
                        this._messageDialog.startup();
                        this._messageDialog.show();
                        ier_util_dialog.manage(this._messageDialog);
                    }
                }));
            } else {
                this._conditionPane.set("repository", this.repository);
                this._conditionPane.set("conditions", []);
                this._renderPropertiesPane(false);
            }
        }, _checkMetadata:function (conditions) {
            return dojo_array.some(conditions, dojo_lang.hitch(this, function (con) {
                return con.className == ier_constants.ClassName_Record && con.content && con.content.type == "METADATA";
            }));
        }, _haveMixedOperators:function (conditions) {
            return dojo_array.some(conditions, dojo_lang.hitch(this, function (con) {
                return con.criteria && con.className == ier_constants.ClassName_Record && con.content && con.content.type == "CONTENT" && con.content.matchAll != con.matchAll;
            }));
        }, _save:function (close) {
            var properties = this._propertiesPane.getProperties();
            var conditions = this._conditionPane.get("conditions");
            var holdId = (this.item && this.item.id);
            this.repository.saveHold(this.item, properties, conditions, holdId, dojo_lang.hitch(this, function () {
                if (close) {
                    this.hide();
                }
            }));
        }, _onClickApply:function () {
            this._save(false);
        }, _onClickSave:function () {
            this._save(true);
        }});
    });
}, "ier/widget/layout/_SearchPaneMixin":function () {
    define(["dojo/_base/declare", "ecm/widget/ActionMenu"], function (declare, ActionMenu) {
        var _ActionMenu = declare(ActionMenu, {createMenu:function (actions) {
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    var a = actions[i];
                    if (a.id == "Link" || a.id == "SendEmailForSearches") {
                        actions.splice(i, 1);
                        i--;
                    }
                }
            }
            return this.inherited(arguments);
        }});
        return declare(null, {setRepository:function (repository) {
            this.inherited(arguments);
            this._adaptRepository(this.repository);
        }, getDefaultLayoutRepository:function () {
            return this._adaptRepository(this.inherited(arguments));
        }, _adaptRepository:function (repository) {
            if (repository && repository.retrieveIERSearchTemplates && repository.retrieveIERSearchTemplate) {
                repository.retrieveSearchTemplates = repository.retrieveIERSearchTemplates;
                repository.retrieveSearchTemplate = repository.retrieveIERSearchTemplate;
            }
            return repository;
        }, _createSearchSelector:function () {
            this.inherited(arguments);
            if (this.searchSelector) {
                this.searchSelector._actionMenuCreator = new _ActionMenu();
            }
        }});
    });
}, "ier/widget/admin/AdminCheckBox":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/text!./templates/AdminCheckBox.html", "dijit/form/CheckBox"], function (dojo_declare, dojo_lang, dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin, templateString) {
        return dojo_declare("ier.widget.admin.AdminCheckBox", [dijit_Widget, dijit_TemplatedMixin, dijit_WidgetsInTemplateMixin], {templateString:templateString, widgetsInTemplate:true, label:"", attributeMap:dojo_lang.delegate(dijit_Widget.prototype.attributeMap, {id:"focusNode", tabIndex:"focusNode"}), postCreate:function () {
            this.inherited(arguments);
        }, onClickAction:function (checkbox, state) {
        }, onClick:function (evt) {
            this.onClickAction(this._checkbox);
        }, get:function (name) {
            return this._checkbox.get(name);
        }, set:function (name, value) {
            this._checkbox.set(name, value);
        }, _nop:null});
    });
}, "ier/model/RecordVolume":function () {
    define(["dojo/_base/declare", "ier/constants", "ier/model/_BaseEntityObject", "ier/model/RecordContainerMixin", "ier/model/RMContainerMixin"], function (dojo_declare, ier_constants, ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RMContainerMixin) {
        var RecordVolume = dojo_declare("ier.model.RecordVolume", [ier_model_BaseEntityObject, ier_model_RecordContainerMixin, ier_model_RMContainerMixin], {constructor:function (arguments) {
        }});
        ier_model_BaseEntityObject.registerClass("RecordVolume", RecordVolume);
        return RecordVolume;
    });
}, "ier/widget/admin/config":function () {
    define(["dojo/_base/declare", "dojo/_base/json", "dojo/_base/lang", "ecm/model/Desktop", "ecm/model/Request", "ier/constants", "ier/util/util", "ecm/LoggerMixin"], function (dojo_declare, dojo_json, dojo_lang, ecm_model_desktop, ecm_model_Request, ier_constants, ier_util, ecm_LoggerMixin) {
        var _AdminConfigurationUtil = dojo_declare("ier.widget.admin._AdminConfigurationUtil", ecm_LoggerMixin, {configurationString:null, configurationInitial:{"id":"ier_constants.ApplicationPlugin", "selectedFilePlanRepositories":[]}, SELECTED_FILEPLAN_REPOSITORIES:"selectedFilePlanRepositories", REPORT_SERVER_NAME:"reportServerName", JDBC_REPORT_DB_DATASOURCE:"JDBCReportDBDataSource", isConfigurationLoaded:function () {
            return configurationString != null;
        }, getConfigurationString:function () {
            return this.configurationString;
        }, getEscapedConfigurationString:function () {
            if (this.configurationString && this.configurationString.id) {
                return escape(JSON.stringify(this.configurationString));
            } else {
                return JSON.stringify(this.configurationString);
            }
        }, loadConfiguration:function (onComplete, configurationString) {
            if (!this.configurationString) {
                if (configurationString) {
                    this.configurationString = dojo_json.fromJson(unescape(configurationString));
                    if (onComplete) {
                        onComplete();
                    }
                } else {
                    ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_GetAndSavePluginConfiguration, ier_constants.PostEncoding, ier_util.getDefaultParams(ecm_model_desktop.getAuthenticatingRepository(), dojo_lang.hitch(this, function (response) {
                        var configString = response.configuration;
                        if (configString && configString.length > 0) {
                            var decoded = unescape(configString);
                            if (configString && configString.id) {
                                configString = dojo_json.fromJson(unescape(decoded));
                            } else {
                                decoded = unescape(configString);
                                if (decoded && decoded.length > 0 && decoded[0] == "\"") {
                                    decoded = decoded.substring(1, decoded.length - 1);
                                }
                                configString = dojo_json.fromJson(unescape(decoded));
                            }
                        }
                        this._loadConfigurationString(configString);
                        if (onComplete) {
                            onComplete();
                        }
                    })));
                }
            } else {
                if (onComplete) {
                    onComplete();
                }
            }
        }, _loadConfigurationString:function (configString) {
            if (configString && configString.id) {
                this.configurationString = configString;
            } else {
                this.configurationString = this.configurationInitial;
            }
        }, setFilePlanRepositoryConfigsArray:function (filePlanRepositoryConfigsArray) {
            if (filePlanRepositoryConfigsArray) {
                this.configurationString[this.SELECTED_FILEPLAN_REPOSITORIES] = filePlanRepositoryConfigsArray;
            }
        }, removeReportingInformation:function () {
            if (this.configurationString[this.REPORT_SERVER_NAME]) {
                delete this.configurationString[this.REPORT_SERVER_NAME];
            }
            if (this.configurationString[this.JDBC_REPORT_DB_DATASOURCE]) {
                delete this.configurationString[this.JDBC_REPORT_DB_DATASOURCE];
            }
        }, getReportServerName:function () {
            if (this.configurationString) {
                return this.configurationString[this.REPORT_SERVER_NAME];
            }
        }, getJDBCReportDBDataSource:function () {
            if (this.configurationString) {
                return this.configurationString[this.JDBC_REPORT_DB_DATASOURCE];
            }
        }, clearFilePlanRepositoryConfigsArray:function () {
            this.configurationString[this.SELECTED_FILEPLAN_REPOSITORIES] = [];
        }, clearConfiguration:function () {
            this.configurationString = null;
        }, getFilePlanRepositoryConfigsArray:function () {
            if (this.configurationString) {
                return this.configurationString[this.SELECTED_FILEPLAN_REPOSITORIES];
            } else {
                return [];
            }
        }, addFilePlanRepositoryConfig:function (fileplanRepositoryConfig) {
            this.configurationString[this.SELECTED_FILEPLAN_REPOSITORIES].push(fileplanRepositoryConfig);
        }, isSavedFilePlanRepository:function (repositoryId) {
            var fpConfigsArray = this.configurationString[this.SELECTED_FILEPLAN_REPOSITORIES];
            for (var i in fpConfigsArray) {
                var savedFileplanRepositoryConfig = fpConfigsArray[i];
                if (repositoryId == savedFileplanRepositoryConfig.repositoryId) {
                    return true;
                }
            }
            return false;
        }});
        var adminConfigUtil = new _AdminConfigurationUtil();
        return adminConfigUtil;
    });
}, "ier/widget/dialog/FileRecordDialog":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class", "ecm/model/Desktop", "ecm/model/Request", "ecm/widget/UnselectableFolder", "ecm/widget/FolderSelectorCallback", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/_FolderSelectorDropDown", "ier/widget/dialog/IERBaseDialog", "dojo/text!./templates/FileRecord.html", "dijit/layout/ContentPane", "ecm/widget/HoverHelp"], function (dojo_declare, dojo_lang, dojo_class, ecm_model_desktop, ecm_model_Request, ecm_widget_UnselectableFolder, ecm_widget_FolderSelectorCallback, ier_constants, ier_messages, ier_util, ier_widget_FolderSelectorDropDown, ier_dialog_IERBaseDialog, contentString) {
        return dojo_declare("ier.widget.dialog.FileRecordDialog", [ier_dialog_IERBaseDialog], {contentString:contentString, widgetsInTemplate:true, _record:null, _fp_repository_location:null, _messages:ier_messages, _items:null, constructor:function () {
        }, postCreate:function () {
            this.inherited(arguments);
            dojo_class.add(this.domNode, "ierSmallDialog");
            this.okButton = this.addButton(ier_messages.fileRecordDialog_fileButton, "_onClickFile", false, true);
        }, show:function (repository, items) {
            this.inherited("show", []);
            this.repository = repository;
            this._items = items;
            if (this.repository.isIERLoaded()) {
                this._renderDialog();
            } else {
                this.repository.loadIERRepository(dojo_lang.hitch(this, function (repository) {
                    this._renderDialog();
                }));
            }
        }, _renderDialog:function () {
            this.setTitle(ier_messages.fileRecordDialog_title);
            this.setIntroText(ier_messages.fileRecordDialog_description);
            this.setIntroTextRef(ier_messages.dialog_LearnMoreLink, this.getHelpUrl("frmovh27.htm"));
            this.okButton.set("disabled", true);
            if (this._folderSelector) {
                this._folderSelector.destroy();
                this._folderSelector = null;
            }
            this._folderSelector = new ier_widget_FolderSelectorDropDown();
            this._folderSelector.selectRootInitially = false;
            this._folderSelector.preventSelectRoot = true;
            this.addChildWidget(this._folderSelectorCell);
            this._folderSelectorCell.appendChild(this._folderSelector.domNode);
            this._setFolderSelectorPermissions(this.repository, dojo_lang.hitch(this, function () {
                this._setFolderRoot(this.repository, ecm_model_desktop.getCurrentFilePlanId());
            }));
            this.connect(this._folderSelector, "onFolderSelected", function (folder) {
                this._fp_repository_location = folder.item.id;
                this.okButton.set("disabled", !(this.validate()));
            });
            this.resize();
        }, _setFolderRoot:function (repository, rootFolderId) {
            if (rootFolderId) {
                repository.retrieveItem(rootFolderId, dojo_lang.hitch(this, function (itemRetrieved) {
                    this._folderSelector.setRoot(itemRetrieved);
                }));
            } else {
                this._folderSelector.setRoot(repository);
            }
        }, _setFolderSelectorPermissions:function (repository, onComplete) {
            var folderSelectorCallback = new ecm_widget_FolderSelectorCallback("privCanFileRecordToContainer", ier_messages.fileRecordDialog_notAllowedToFileToContainer);
            this._folderSelector.setIsSelectableCallback(folderSelectorCallback.isSelectableByPermission, folderSelectorCallback);
            var sourceContainer = this._items[0].parent.id;
            var unselectableFolders = [];
            var unselectableItem = new ecm_widget_UnselectableFolder(sourceContainer, true, ier_messages.fileRecordDialog_RecordAlreadyFiledHere);
            unselectableFolders.push(unselectableItem);
            this._folderSelector.setUnselectableFolders(unselectableFolders);
            if (onComplete) {
                onComplete();
            }
        }, validate:function () {
            if (this._fp_repository_location == null) {
                return false;
            } else {
                return true;
            }
        }, _onClickFile:function () {
            if (this.validate()) {
                var items = this._items;
                var item = items[0];
                var serviceParams = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                    this.repository.retrieveItem(this._fp_repository_location, dojo_lang.hitch(this, function (itemRetrieved) {
                        if (itemRetrieved) {
                            itemRetrieved.refresh();
                        }
                        this.onCancel();
                    }));
                }));
                serviceParams.requestParams[ier_constants.Param_RecordId] = item.id;
                serviceParams.requestParams[ier_constants.Param_DestinationContainer] = this._fp_repository_location;
                ecm_model_Request.postPluginService(ier_constants.ApplicationPlugin, ier_constants.Service_FileRecord, ier_constants.PostEncoding, serviceParams);
            }
        }});
    });
}, "url:ier/widget/tasks/templates/TaskExecutionRecordPane.html":"<div style=\"width: 100%; height: 100%;\" data-dojo-attach-point=\"containerNode\">\r\n\t<div data-dojo-attach-point=\"contentList\" data-dojo-type=\"ier/widget/listView/ContentList\"></div>\r\n</div>", "ier/widget/admin/SystemConfigPane":function () {
    define(["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/date/locale", "dojo/date/stamp", "dijit/_TemplatedMixin", "dijit/_Widget", "dijit/_WidgetsInTemplateMixin", "ier/constants", "ier/messages", "ier/util/util", "ier/widget/ObjectSelector", "dojo/text!./templates/SystemConfigPane.html", "ecm/widget/HoverHelp", "ecm/widget/NumberTextBox", "ecm/widget/Select"], function (array, declare, lang, locale, stamp, _TemplatedMixin, _Widget, _WidgetsInTemplateMixin, constants, messages, util, ObjectSelector, SystemConfigPane_html) {
        return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {templateString:SystemConfigPane_html, repository:null, values:null, dirty:false, valid:true, _messages:messages, postCreate:function () {
            this.inherited(arguments);
            this._transferMappingSelector = new ObjectSelector({id:this.id + "_transferMappingSelector", labelId:this.id + "_transferMappingLabel", label:messages.admin_systemConfig_exportTransferMapping, objectClassName:constants.ClassName_TransferMapping});
            this._transferMappingSelector.placeAt(this._transferMappingCell);
            this._screeningWorkflowSelector = new ObjectSelector({id:this.id + "_screeningWorkflowSelector", labelId:this.id + "_screeningWorkflowLabel", label:messages.admin_systemConfig_screeningWorkflow, objectClassName:constants.ClassName_WorkflowDefinition});
            this._screeningWorkflowSelector.placeAt(this._screeningWorkflowCell);
            this.connect(this._exportConfigSelect, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._transferMappingSelector, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._batchSizeBox, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._screeningWorkflowSelector, "onChange", function () {
                this._validate(true);
            });
            this.connect(this._patternSuffixSelect, "onChange", function () {
                this._validate(true);
            });
        }, _setRepositoryAttr:function (repository) {
            this._set("repository", repository);
            this._transferMappingSelector.repository = repository;
            this._screeningWorkflowSelector.repository = repository;
            repository && repository.retrieveObjects(constants.ClassName_SystemConfiguration, null, lang.hitch(this, function (resultSet) {
                var values = this.values = {};
                array.forEach(resultSet && resultSet.items, function (item) {
                    var name = item.attributes.PropertyName;
                    var value = item.attributes.PropertyValue;
                    if (name && value) {
                        values[name] = value;
                    }
                });
                this.reset();
            }));
        }, save:function () {
            this._setValue("Export Configuration", this._exportConfigSelect.get("value") || "");
            var id = this._transferMappingSelector.get("value");
            this._setValue("Export Transfer Mapping", id && util.getGuidId(id) || "0");
            this._setValue("Maximum Batch Size For Workflows", ("" + this._batchSizeBox.get("value")) || "");
            this._setValue("Screening Workflow", this._screeningWorkflowSelector.get("displayedValue") || "Screening Workflow");
            this._setValue("Volume Pattern Suffix", this._patternSuffixSelect.get("value") || "");
            if (this.repository && this.values) {
                var systemConfigurations = [];
                for (var name in this.values) {
                    var value = this.values[name];
                    if (value) {
                        systemConfigurations.push({name:name, value:value});
                    }
                }
                this.repository.saveSystemConfigurations(systemConfigurations, lang.hitch(this, function () {
                    this._validate(false);
                }));
            }
        }, reset:function () {
            this._setWidgetValue(this._exportConfigSelect, this._getValue("Export Configuration"));
            this._transferMappingSelector.setSelectedItem(null, true);
            var id = this._getValue("Export Transfer Mapping");
            if (id && id != "0") {
                this.repository && this.repository.retrieveObjects(constants.ClassName_TransferMapping, null, lang.hitch(this, function (resultSet) {
                    array.some(resultSet && resultSet.items || [], function (item) {
                        if (item && item.id && util.getGuidId(item.id) == id) {
                            this._transferMappingSelector.setSelectedItem(item, true);
                            return true;
                        }
                        return false;
                    }, this);
                }));
            }
            this._fposSetupNode.innerHTML = this._getValue("FPOS Setup");
            this._versionInfoNode.innerHTML = this._getValue("RM Version Info");
            this._setWidgetValue(this._batchSizeBox, this._getValue("Maximum Batch Size For Workflows"));
            this._screeningWorkflowSelector.setSelectedItem(null, true);
            var name = this._getValue("Screening Workflow");
            if (name) {
                this.repository && this.repository.retrieveObjects(constants.ClassName_WorkflowDefinition, name, lang.hitch(this, function (resultSet) {
                    array.some(resultSet && resultSet.items || [], function (item) {
                        if (item && item.name == name) {
                            this._screeningWorkflowSelector.setSelectedItem(item, true);
                            return true;
                        }
                        return false;
                    }, this);
                }));
            }
            var value = this._getValue("Security Script Run Date");
            if (value) {
                if (value.length >= 15 && value.charAt(4) != "-") {
                    var d = [value.substring(0, 4), value.substring(4, 6), value.substring(6, 8)].join("-");
                    var t = [value.substring(9, 11), value.substring(11, 13), value.substring(13, 15)].join(":");
                    value = d + "T" + t + value.substring(15);
                }
                var date = stamp.fromISOString(value);
                value = locale.format(date, {formatLength:"short", fullYear:true});
            }
            this._runDateNode.innerHTML = value || "";
            this._setWidgetValue(this._patternSuffixSelect, this._getValue("Volume Pattern Suffix"));
            this._validate(false);
        }, _getValue:function (name) {
            return this.values && this.values[name] || "";
        }, _setValue:function (name, value) {
            if (this.values) {
                this.values[name] = value;
            }
        }, _setWidgetValue:function (widget, value) {
            var intermediateChanges = widget.intermediateChanges;
            widget.intermediateChanges = false;
            widget.set("value", value, false);
            widget.intermediateChanges = intermediateChanges;
        }, _validate:function (dirty) {
            this.dirty = dirty;
            this.valid = this._batchSizeBox.isValid();
            this.onChange(dirty);
        }, onChange:function (dirty) {
        }});
    });
}, "ier/model/actions/PlaceOnHoldAction":function () {
    define(["dojo/_base/declare", "ecm/model/Action"], function (dojo_declare, ecm_model_action) {
        return dojo_declare("ier.model.actions.PlaceOnHoldAction", [ecm_model_action], {canPerformAction:function (repository, itemList, listType, teamspace, resultSet) {
            var canPerform = this.inherited(arguments);
            if (canPerform) {
                return canPerform;
            } else {
                return canPerform;
            }
        }});
    });
}, "url:ier/widget/templates/CognosViewer.html":"<div data-dojo-attach-point=\"containerNode\" style=\"height:100%; padding:0px\">\r\n    <div data-dojo-attach-point=\"mainContainer\" data-dojo-type=\"dijit.layout.BorderContainer\" gutters=\"false\" style=\"height:100%;width:100%\">\r\n    \t<div data-dojo-props=\"region:'top'\" data-dojo-attach-point=\"reportLoadingText\" style=\"display:none; margin-top: 15px; margin-left: auto; margin-right: auto; \r\n\t\t\ttext-align:center; font-weight: bold;\">${messages.reportPane_loading}</div>\r\n\t\t<div data-dojo-attach-point=\"resultsPane\" data-dojo-type=\"dijit.layout.ContentPane\" style=\"width:100%; height:100%\" data-dojo-props=\"region:'center'\">\r\n\t\t\t<iframe frameBorder=\"0\" style=\"width:100%; height:98%\" data-dojo-attach-point=\"viewer\">\r\n\t\t\t</iframe>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n", "ier/widget/listView/modules/DocInfo":function () {
    define(["dojo/_base/declare", "ecm/widget/listView/modules/DocInfo", "ier/widget/panes/ItemPropertiesDisplayPane"], function (dojo_declare, ecm_widget_listView_modules_DocInfo, ier_widget_ItemPropertiesDisplayPane) {
        return dojo_declare("ier.widget.listView.modules.DocInfo", [ecm_widget_listView_modules_DocInfo], {createItemPropertiesDisplayPane:function () {
            return new ier_widget_ItemPropertiesDisplayPane({showSystemProps:this.showSystemProps, showPreview:this.showPreview, allowEdit:true});
        }});
    });
}, "ier/widget/FilePlanSearchBar":function () {
    require({cache:{"url:ier/widget/templates/FilePlanSearchBar.html":"<div class=\"dijit dijitReset dijitInline dijitLeft fileplanSearchBar\" role=\"presentation\" >\r\n\t<div class=\"dijitReset dijitInputField dijitInputContainer\" data-dojo-attach-point=\"_searchBarContainer\">\r\n\t\t<input id=\"${id}_filterbox\" class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\r\n\t\ttype='${type}'/>\r\n\t</div>\r\n\t<span class=\"searchNode\" data-dojo-attach-point=\"_searchNode\" data-dojo-attach-event=\"onclick:_quickSearchButtonClicked\"></span>\r\n</div>"}});
    define("ier/widget/FilePlanSearchBar", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/event", "dojo/keys", "dijit/_Widget", "dijit/form/TextBox", "ecm/Messages", "ier/messages", "dojo/text!./templates/FilePlanSearchBar.html"], function (dojo_declare, dojo_lang, dojo_event, dojo_keys, dijit_Widget, dijit_form_TextBox, ecm_messages, ier_messages, templateString) {
        return dojo_declare("ier.widget.FilePlanSearchBar", [dijit_form_TextBox], {templateString:templateString, widgetsInTemplate:false, trim:true, placeHolder:ier_messages.nameContains, attributeMap:dojo_lang.delegate(dijit_Widget.prototype.attributeMap, {id:"focusNode", tabIndex:"focusNode"}), messages:ecm_messages, postCreate:function () {
            this.inherited(arguments);
            this.connect(this.textbox, "onkeydown", dojo_lang.hitch(this, function (e) {
                if (e.keyCode == dojo_keys.ENTER) {
                    this._quickSearchButtonClicked();
                    dojo_event.stop(e);
                }
            }));
        }, onSearchButtonClicked:function (value) {
        }, _quickSearchButtonClicked:function (evt) {
            this.onSearchButtonClicked(this.get("value"));
        }, _nop:null});
    });
}, "ier/model/_BaseEntityObject":function () {
    define(["dojo/_base/declare", "dojo/_base/lang", "ecm/model/ContentItem", "ecm/model/Request", "ier/constants", "ier/util/util"], function (dojo_declare, dojo_lang, ecm_model_ContentItem, Request, ier_constants, ier_util) {
        var _BaseEntityObject = dojo_declare("ier.model._BaseEntityObject", [ecm_model_ContentItem], {constructor:function (id, name, repository, attributes, properties, resultSet, parent, attributeTypes, attributeFormats, objectStoreId) {
            this.timestamp = new Date().getTime();
        }, getTimeStamp:function () {
            return this.timestamp;
        }, isIERLoaded:function () {
            return this.IERLoaded == true && this.getEntityType() != null;
        }, refreshProperties:function () {
            this.repository.retrieveItem(this.id, dojo_lang.hitch(this, function (item) {
                this.update(item);
            }), this.getClassName());
        }, getRMDescription:function () {
            return this.attributes[ier_constants.Property_RMEntityDescription];
        }, getEntityType:function () {
            return this["entityType"];
        }, getAllowedRMTypes:function () {
            return this.attributes[ier_constants.Property_AllowedRMTypes];
        }, setAllowedRMTypes:function (types) {
            this.attributes[ier_constants.Property_AllowedRMTypes] = types;
        }, getClassName:function () {
            return this["template"];
        }, getMimeType:function () {
            return this.getContentType();
        }, getGuidId:function () {
            return this.id.split(",")[2];
        }, getCreateDate:function () {
            return this.attributes[ier_constants.Property_CreateDate];
        }, getIERObjectItem:function (property) {
            if (this.attributes[property]) {
                var objectItem = this.getItemValue(property);
                if (objectItem) {
                    if (!objectItem.name) {
                        objectItem.name = this.getDisplayValue(property);
                    }
                    if (!objectItem.name) {
                        objectItem.name = this.nameProperty ? this.attributes[this.nameProperty] : null;
                    }
                    return objectItem;
                }
            }
            return null;
        }, fetchIERObjectItem:function (property, callback) {
            var objectItem = this.getIERObjectItem(property);
            var itemId = this.attributes[property];
            if (objectItem && objectItem.id == itemId && objectItem.attributes) {
                callback(objectItem);
            } else {
                if (itemId) {
                    var className = null;
                    if (itemId.indexOf(",") == -1) {
                        className = ier_util.getClassName(property);
                    }
                    this.repository.retrieveItem(itemId, dojo_lang.hitch(this, function (itemRetrieved) {
                        itemRetrieved.IERLoaded = true;
                        this.attributeItems[property] = itemRetrieved;
                        callback(itemRetrieved);
                    }), className);
                } else {
                    callback(null);
                }
            }
        }, getLegacyDispositionSchedule:function (callback) {
            this.fetchIERObjectItem(ier_constants.Property_DispositionSchedule, callback);
        }, retrieveAttributes:function (callback, backgroundRequest) {
            this.inherited(arguments);
        }, isAttributesRetrieved:function () {
            return this.ierAttributesRetrieved;
        }, updatePropertiesAndAttributes:function (item, refresh) {
            var skipRefresh = refresh != null ? !refresh : true;
            var attributes = this.attributes;
            var attributeTypes = this.attributeTypes;
            var attributeFormats = this.attributeFormats;
            this.update(item, true);
            dojo_declare.safeMixin(attributes, this.attributes);
            dojo_declare.safeMixin(attributeTypes, this.attributeTypes);
            dojo_declare.safeMixin(attributeFormats, this.attributeFormats);
            this.attributes = attributes;
            this.attributeTypes = attributeTypes;
            this.attributeFormats = attributeFormats;
            if (!skipRefresh) {
                this.onChange([this]);
            }
        }, refreshIERStates:function (callback, refresh) {
            var params = ier_util.getDefaultParams(this.repository, dojo_lang.hitch(this, function (response) {
                if (response) {
                    if (response.item) {
                        this.updatePropertiesAndAttributes(ier_util.createBaseEntityItem(response.item, this.repository, null, this.parent));
                    }
                    if (response.parent && this.parent && this.parent instanceof ier.model._BaseEntityObject) {
                        this.parent.updatePropertiesAndAttributes(ier_util.createBaseEntityItem(response.parent, this.repository, null, this.parent.parent), !refresh);
                    } else {
                        if (this.parent instanceof ecm.model.Favorite) {
                            this.parent.retrieveFavorite();
                        }
                    }
                    if (refresh) {
                        this.refresh();
                    }
                    if (callback) {
                        callback();
                    }
                }
            }));
            params.requestParams[ier_constants.Param_ClassName] = this.template;
            params.requestParams[ier_constants.Param_Id] = this.id;
            params.requestParams[ier_constants.Param_ParentFolderId] = this.parent ? this.parent.id : null;
            params.requestParams[ier_constants.Param_ParentClassName] = this.parent ? this.parent.template : null;
            Request.postPluginService(ier_constants.ApplicationPlugin, "ierRefreshService", ier_constants.PostEncoding, params);
        }, refresh:function () {
            this.inherited(arguments);
            this.onChange([this]);
        }});
        var entityObjectClasses = {};
        _BaseEntityObject.registerClass = function (name, ctor) {
            entityObjectClasses[name] = ctor;
        };
        _BaseEntityObject.createFromJSON = function (itemJSON, repository, resultSet, parent) {
            var properties = itemJSON;
            var className = properties.template;
            var entityType = itemJSON.entityType ? itemJSON.entityType : null;
            var mimeType = itemJSON.CEMimeType ? itemJSON.CEMimeType : null;
            var item = null;
            if (entityType == ier_constants.EntityType_FilePlan || className == ier_constants.ClassName_FilePlan) {
                item = new entityObjectClasses.FilePlan(itemJSON);
            } else {
                if (entityType == ier_constants.EntityType_RecordCategory || className == ier_constants.ClassName_RecordCategory) {
                    item = new entityObjectClasses.RecordCategory(itemJSON);
                } else {
                    if (entityType == ier_constants.EntityType_ElectronicRecordFolder || className == ier_constants.ClassName_ElectronicRecordFolder) {
                        item = new entityObjectClasses.RecordFolder(itemJSON);
                    } else {
                        if (entityType == ier_constants.EntityType_HybridRecordFolder || className == ier_constants.ClassName_HybridRecordFolder) {
                            item = new entityObjectClasses.RecordFolder(itemJSON);
                        } else {
                            if (entityType == ier_constants.EntityType_PhysicalRecordFolder || className == ier_constants.ClassName_PhysicalRecordFolder) {
                                item = new entityObjectClasses.RecordFolder(itemJSON);
                            } else {
                                if (entityType == ier_constants.EntityType_PhysicalContainer || className == ier_constants.ClassName_PhysicalContainer) {
                                    item = new entityObjectClasses.RecordFolder(itemJSON);
                                } else {
                                    if (entityType == ier_constants.EntityType_Volume || className == ier_constants.ClassName_Volume) {
                                        item = new entityObjectClasses.RecordVolume(itemJSON);
                                    } else {
                                        if (entityType == ier_constants.EntityType_ElectronicRecord || entityType == ier_constants.EntityType_PhysicalRecord || entityType == ier_constants.EntityType_EmailRecord || className == ier_constants.ClassName_ElectronicRecord || className == ier_constants.ClassName_PhysicalRecord || className == ier_constants.ClassName_EmailRecord || mimeType == ier_constants.Mimetype_ElectronicRecord || mimeType == ier_constants.Mimetype_EmailRecord || mimeType == ier_constants.Mimetype_PhysicalRecord) {
                                            item = new entityObjectClasses.Record(itemJSON);
                                        } else {
                                            if (entityType == ier_constants.EntityType_DispositionSchedule || className == ier_constants.ClassName_DispositionSchedule) {
                                                item = new entityObjectClasses.DispositionSchedule(itemJSON);
                                            } else {
                                                if (entityType == ier_constants.EntityType_Location || className == ier_constants.ClassName_Location) {
                                                    item = new entityObjectClasses.Location(itemJSON);
                                                } else {
                                                    if (entityType == ier_constants.EntityType_NamingPattern || className == ier_constants.ClassName_NamingPattern) {
                                                        item = new entityObjectClasses.NamingPattern(itemJSON);
                                                    } else {
                                                        if (entityType == ier_constants.EntityType_Hold || className == ier_constants.ClassName_Hold) {
                                                            item = new entityObjectClasses.Hold(itemJSON);
                                                        } else {
                                                            if (className == ier_constants.ClassName_RecordType || className == ier_constants.ClassName_DispositionTrigger || className == ier_constants.ClassName_TransferMapping || className == ier_constants.ClassName_DispositionAction) {
                                                                item = new _BaseEntityObject(itemJSON);
                                                            } else {
                                                                if (className == ier_constants.ClassName_WorkflowDefinition && entityType != null && entityType != "") {
                                                                    item = new _BaseEntityObject(itemJSON);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (item) {
                item.IERLoaded = true;
            }
            return item;
        };
        if (ecm_model_ContentItem.registerFactory) {
            ecm_model_ContentItem.registerFactory(_BaseEntityObject);
        }
        return _BaseEntityObject;
    });
}, "ier/widget/layout/SearchPane":function () {
    define("ier/widget/layout/SearchPane", ["dojo/_base/declare", "dojo/_base/lang", "dojo/aspect", "dojo/dom-class", "ecm/model/ContentClass", "ecm/model/Request", "ecm/widget/layout/SearchPane", "ier/messages", "ier/util/dialog", "ier/widget/layout/_SearchPaneMixin", "ier/widget/QuickSearchList", "ier/widget/search/SearchBuilder", "ier/widget/search/SearchTab"], function (declare, lang, aspect, dom_class, ContentClass, Request, SearchPane, messages, util_dialog, _SearchPaneMixin) {
        return declare("ier.widget.layout.SearchPane", [SearchPane, _SearchPaneMixin], {constructor:function () {
            var retrieveAttributeDefinitionsForSearches = ContentClass.prototype.retrieveAttributeDefinitionsForSearches;
            lang.extend(ContentClass, {retrieveAttributeDefinitionsForSearches:function () {
                var signal = aspect.before(Request, "invokeService", function (serviceName, serverType, params) {
                    if (params) {
                        params.filter_type = "searches";
                    }
                });
                try {
                    retrieveAttributeDefinitionsForSearches.apply(this, arguments);
                }
                finally {
                    if (signal && signal.remove) {
                        signal.remove();
                    }
                }
            }});
        }, buildRendering:function () {
            this.inherited(arguments);
            dom_class.add(this.domNode, "ierSearchPane");
        }, postCreate:function () {
            this.tabs["ierQuickSearchList"] = {contentClass:"ier.widget.QuickSearchList"};
            this.tabs["searchbuilder"] = {contentClass:"ier.widget.search.SearchBuilder"};
            this.tabs["search"] = {contentClass:"ier.widget.search.SearchTab"};
            this.inherited(arguments);
            this.connect(this, "onRepositoryChange", function (pane, repository) {
                if (repository) {
                    if (repository.isIERLoaded()) {
                        this._validateRepository(repository);
                    } else {
                        repository.loadIERRepository(lang.hitch(this, function (repository) {
                            this._validateRepository(repository);
                        }));
                    }
                }
            });
        }, _validateRepository:function (repository) {
            if (repository && repository.isFilePlanRepository()) {
                this._filePlanRepository = repository;
            } else {
                util_dialog.showMessage(messages.no_fileplans_available);
                repository = this._filePlanRepository || this.getDefaultLayoutRepository();
                if (repository && repository.isFilePlanRepository()) {
                    this.repositorySelector.getDropdown().set("value", repository.id);
                }
            }
        }});
    });
}}});
define("ier/ier", ["dojo/_base/declare", "ier/constants", "ier/messages", "ier/util/util", "ier/util/dialog", "ier/util/menu", "ier/util/property", "ier/model/DispositionSchedule", "ier/model/FilePlan", "ier/model/FilePlanRepositoryMixin", "ier/model/FilePlansTreeModel", "ier/model/IERRepositoryMixin", "ier/model/Hold", "ier/model/Location", "ier/model/NamingPattern", "ier/model/RecordCategory", "ier/model/RecordVolume", "ier/model/RecordFolder", "ier/model/Record", "ier/model/RecordCategoryContainerMixin", "ier/model/RecordFolderContainerMixin", "ier/model/RecordContainerMixin", "ier/model/RecordEntryTemplate", "ier/model/ReportDefinition", "ier/model/IERDesktopMixin", "ier/model/actions/DeclareAction", "ier/model/actions/PlaceOnHoldAction", "ier/model/actions/RemoveHoldAction", "ier/model/actions/RecordPropertiesAction", "ier/widget/layout/CommonActionsHandler", "ier/widget/layout/FilePlanPane", "ier/widget/layout/FilePlanFlyoutPane", "ier/widget/layout/JobsFlyoutPane", "ier/widget/layout/TaskPane", "ier/widget/layout/ConfigureFlyoutPane", "ier/widget/layout/ConfigurePane", "ier/widget/layout/ReportsFlyoutPane", "ier/widget/layout/ReportLayout", "ier/widget/layout/ReportPane", "ier/widget/layout/SearchPane", "ier/widget/layout/DashboardPane", "ier/widget/layout/IERMainLayout", "ier/widget/layout/FavoritePane", "ier/widget/layout/AdminiPane", "ier/widget/listView/modules/TaskFilter", "ier/widget/tasks/MultiStatusTasksListingPane", "ier/widget/tasks/RecurringTasksListingPane", "ier/widget/tasks/TasksListingPane", "ier/widget/tasks/ReportTasksListingPane", "ier/widget/tasks/ReportTaskInformationPane", "ier/widget/tasks/DDSweepTaskInformationPane", "ier/widget/tasks/DefensibleDisposalTasksListingPane", "ier/widget/tasks/CompletedTasksListingPane", "ier/widget/admin/PluginConfigurationPane", "ier/widget/admin/config", "ier/widget/admin/AdminGrid", "ier/widget/admin/AdminCheckBox", "ier/widget/admin/GeneralSettingsPane", "ier/widget/admin/RepositorySettingsPane", "ier/widget/admin/SystemConfigPane", "ier/widget/admin/SystemPropertyPane", "ier/widget/CognosViewer", "ier/widget/BaseReportViewer"], function () {
});

